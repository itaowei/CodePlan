import logging
from tqdm import tqdm
from pathlib import Path


from eval import RepoOrApproachNotFound, CS_EXT_REPO_NAMES, PYTHON_EXT_REPO_NAMES, REPO_NAMES
from git_utils import get_diff


_script_dir = Path(__file__).parent.absolute()
_data_dir = _script_dir.parent / "data"


_name_source = "Source"
_name_pred = "Predicted"
_name_target = "Target"


def pp_diff(
        source_dir: Path,
        target_dir: Path,
        pred_dir: Path,
        file_regexp: str,
        output_file: Path,
):
    # get all files recursively from source_dir
    source_files = list(source_dir.rglob(file_regexp))
    target_files = list(target_dir.rglob(file_regexp))
    pred_files = list(pred_dir.rglob(file_regexp))
    
    # ignore autogenerated files
    source_files = [p for p in source_files if 'bin' not in p.parts and 'obj' not in p.parts]
    target_files = [p for p in target_files if 'bin' not in p.parts and 'obj' not in p.parts]
    pred_files = [p for p in pred_files if 'bin' not in p.parts and 'obj' not in p.parts]

    # keep only relative paths
    source_files = set(str(file.relative_to(source_dir)) for file in source_files)
    target_files = set(str(file.relative_to(target_dir)) for file in target_files)
    pred_files = set(str(file.relative_to(pred_dir)) for file in pred_files)

    # keep only common files
    common_files = source_files.intersection(target_files).intersection(pred_files)


    diffs = []
    for file in tqdm(common_files):
        diff_source_target = get_diff(source_dir / file, target_dir / file)
        diff_source_pred = get_diff(source_dir / file, pred_dir / file)
        diff_target_pred = get_diff(target_dir / file, pred_dir / file)
        diffs.append((file, diff_source_target, diff_source_pred, diff_target_pred))

    # order diffs by shortest diff
    diffs = sorted(diffs, key=lambda x: len(x[3]))

    def get_formatted_diff(diff: str):
        lines = diff.splitlines()
        html_content = ""
        for line in lines:
            if line.startswith('diff --git') or line.startswith('--- a') or line.startswith('+++ b') or line.startswith('--- "a') or line.startswith('+++ "b') or line.startswith("--- 'a") or line.startswith("+++ 'b"):
                continue
            elif line.startswith('+'):
                html_content += f'<span style="color:green;">{line}</span><br>'
            elif line.startswith('-'):
                html_content += f'<span style="color:orangered;">{line}</span><br>'
            elif line.startswith('@'):
                html_content += f'<span style="color:blue;">{line}</span><br>'
            else:
                html_content += line + "<br>"
        if html_content == "":
            html_content = "<br>No diff<br>"
        return html_content

    # write the diffs to a file
    logging.info(f"Writing diffs to {output_file}")
    with open(output_file, mode="w", encoding="utf-8") as f:
        f.write("<html><body><pre>")
        for file, diff_source_target, diff_source_pred, diff_target_pred  in diffs:
            f.write("<hr>")
            f.write(f"<h1>{file}</h1>")
            if _name_source and _name_target:
                f.write(f'<h2><span style="color:orangered;">{_name_source}</span> vs <span style="color:green;">{_name_target}</span></h2>')
                f.write(get_formatted_diff(diff_source_target))
            if _name_pred and _name_source:
                f.write(f'<h2><span style="color:orangered;">{_name_source}</span> vs <span style="color:green;">{_name_pred}</span></h2>')
                f.write(get_formatted_diff(diff_source_pred))
            if _name_pred and _name_target:
                f.write(f'<h2><span style="color:orangered;">{_name_target}</span> vs <span style="color:green;">{_name_pred}</span></h2>')
                f.write(get_formatted_diff(diff_target_pred))

        f.write('</pre></body></html>')



def pp_diff_repo_approach(
    repo_name: str,
    approach_name: str,
    output_file: Path | None = None,
):
    repo_data_dir = _data_dir / repo_name
    if not repo_data_dir.exists():
        raise RepoOrApproachNotFound(
            f"Could not find repo {repo_name} at {repo_data_dir}",
            dir_path=repo_data_dir,
        )
    
    approach_data_dir = repo_data_dir / "pred" / approach_name
    if not approach_data_dir.exists():
        raise RepoOrApproachNotFound(
            f"Could not find approach {approach_name} for repo {repo_name} at {approach_data_dir}",
            dir_path=approach_data_dir,
        )

    approach_repo_dir = approach_data_dir / "repo"
    source_data_dir = repo_data_dir / "source"
    target_data_dir = repo_data_dir / "target"

    if repo_name in CS_EXT_REPO_NAMES:
        file_regexp = "*.cs"
    elif repo_name in PYTHON_EXT_REPO_NAMES:
        file_regexp = "*.py"
    else:
        raise ValueError(f"Invalid repo name: {repo_name}")
    
    if output_file is None:
        output_file = approach_data_dir / "diff.html"
    
    pp_diff(
        source_dir=source_data_dir,
        target_dir=target_data_dir,
        pred_dir=approach_repo_dir,
        file_regexp=file_regexp,
        output_file=output_file,
    )


if __name__ == "__main__":
    from argparse import ArgumentParser

    parser = ArgumentParser()
    parser.add_argument("--repo", "-r", type=str, choices=REPO_NAMES)
    parser.add_argument("--approach", "-a", type=str)
    parser.add_argument("--all", action="store_true")
    parser.add_argument("--verbose", "-v", action="store_true")
    parser.add_argument("--debug", "-d", action="store_true")
    args = parser.parse_args()

    if args.verbose:
        logging.basicConfig(level=logging.INFO)
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)

    if args.all:
        logging.info("Pretty printing diff for all approaches on all repos.")
        metrics = {}
        for repo_name in REPO_NAMES:
            approach_names = CS_EXT_REPO_NAMES.get(repo_name, []) + PYTHON_EXT_REPO_NAMES.get(repo_name, [])
            
            for approach_name in approach_names:
                try:
                    logging.info(f"Pretty printing diff for approach {approach_name} on repo {repo_name}")
                    pp_diff_repo_approach(
                        repo_name=repo_name,
                        approach_name=approach_name,
                    )

                except RepoOrApproachNotFound as e:
                    logging.warning(f"Skipping approach {approach_name} for repo {repo_name} as no data found at {e.dir_path}")
                    continue

    else:
        logging.info(f"Pretty printing diff for approach {args.approach} on repo {args.repo}")
        pp_diff_repo_approach(
            repo_name=args.repo,
            approach_name=args.approach,
        )
