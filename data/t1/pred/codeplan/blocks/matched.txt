

openai__whisper\gpt_codeplan\whisper\utils.py
BlockTypes.METHOD, ResultWriter.__call__
def __call__(self, result: dict, audio_path: str, options: dict):
        audio_basename = os.path.basename(audio_path)
        audio_basename = os.path.splitext(audio_basename)[0]
        output_path = os.path.join(
            self.output_dir, audio_basename + "." + self.extension
        )

        with open(output_path, "w", encoding="utf-8") as f:
            self.write_result(result, file=f, options=options)
--------------------------------------------------
openai__whisper\gpt_codeplan\whisper\utils.py
BlockTypes.METHOD, WriteSRT.write_result
def write_result(self, result: dict, file: TextIO, options: dict):
        for i, (start, end, text) in enumerate(self.iterate_result(result, options), start=1):
            print(f"{i}\n{start} --> {end}\n{text}\n", file=file, flush=True)
--------------------------------------------------
openai__whisper\gpt_codeplan\whisper\utils.py
BlockTypes.METHOD, WriteTXT.write_result
def write_result(self, result: dict, file: TextIO, options: dict):
        for segment in result["segments"]:
            print(segment["text"].strip(), file=file, flush=True)
--------------------------------------------------
openai__whisper\gpt_codeplan\whisper\utils.py
BlockTypes.METHOD, SubtitlesWriter.iterate_result
def iterate_result(self, result: dict, options: dict):
        raw_max_line_width: Optional[int] = options["max_line_width"]
        max_line_count: Optional[int] = options["max_line_count"]
        highlight_words: bool = options["highlight_words"]
        max_line_width = 1000 if raw_max_line_width is None else raw_max_line_width
        preserve_segments = max_line_count is None or raw_max_line_width is None

        def iterate_subtitles():
            line_len = 0
            line_count = 1
            # the next subtitle to yield (a list of word timings with whitespace)
            subtitle: list[dict] = []
            last = result["segments"][0]["words"][0]["start"]
            for segment in result["segments"]:
                for i, original_timing in enumerate(segment["words"]):
                    timing = original_timing.copy()
                    long_pause = not preserve_segments and timing["start"] - last > 3.0
                    has_room = line_len + len(timing["word"]) <= max_line_width
                    seg_break = i == 0 and len(subtitle) > 0 and preserve_segments
                    if line_len > 0 and has_room and not long_pause and not seg_break:
                        # line continuation
                        line_len += len(timing["word"])
                    else:
                        # new line
                        timing["word"] = timing["word"].strip()
                        if (
                            len(subtitle) > 0
                            and max_line_count is not None
                            and (long_pause or line_count >= max_line_count)
                            or seg_break
                        ):
                            # subtitle break
                            yield subtitle
                            subtitle = []
                            line_count = 1
                        elif line_len > 0:
                            # line break
                            line_count += 1
                            timing["word"] = "\n" + timing["word"]
                        line_len = len(timing["word"].strip())
                    subtitle.append(timing)
                    last = timing["start"]
            if len(subtitle) > 0:
                yield subtitle

        if "words" in result["segments"][0]:
            for subtitle in iterate_subtitles():
                subtitle_start = self.format_timestamp(subtitle[0]["start"])
                subtitle_end = self.format_timestamp(subtitle[-1]["end"])
                subtitle_text = "".join([word["word"] for word in subtitle])
                if highlight_words:
                    last = subtitle_start
                    all_words = [timing["word"] for timing in subtitle]
                    for i, this_word in enumerate(subtitle):
                        start = self.format_timestamp(this_word["start"])
                        end = self.format_timestamp(this_word["end"])
                        if last != start:
                            yield last, start, subtitle_text

                        yield start, end, "".join(
                            [
                                re.sub(r"^(\s*)(.*)$", r"\1<u>\2</u>", word)
                                if j == i
                                else word
                                for j, word in enumerate(all_words)
                            ]
                        )
                        last = end
                else:
                    yield subtitle_start, subtitle_end, subtitle_text
        else:
            for segment in result["segments"]:
                segment_start = self.format_timestamp(segment["start"])
                segment_end = self.format_timestamp(segment["end"])
                segment_text = segment["text"].strip().replace("-->", "->")
                yield segment_start, segment_end, segment_text
--------------------------------------------------
openai__whisper\gpt_codeplan\whisper\utils.py
BlockTypes.METHOD, WriteVTT.write_result
def write_result(self, result: dict, file: TextIO, options: dict):
        print("WEBVTT\n", file=file)
        for start, end, text in self.iterate_result(result, options):
            print(f"{start} --> {end}\n{text}\n", file=file, flush=True)
--------------------------------------------------
openai__whisper\gpt_codeplan\whisper\utils.py
BlockTypes.METHOD, ResultWriter.write_result
def write_result(self, result: dict, file: TextIO, options: dict):
        raise NotImplementedError
--------------------------------------------------
openai__whisper\gpt_codeplan\whisper\utils.py
BlockTypes.METHOD, WriteTSV.write_result
def write_result(self, result: dict, file: TextIO, options: dict):
        print("start", "end", "text", sep="\t", file=file)
        for segment in result["segments"]:
            print(round(1000 * segment["start"]), file=file, end="\t")
            print(round(1000 * segment["end"]), file=file, end="\t")
            print(segment["text"].strip().replace("\t", " "), file=file, flush=True)
--------------------------------------------------
openai__whisper\gpt_codeplan\whisper\utils.py
BlockTypes.METHOD, WriteJSON.write_result
def write_result(self, result: dict, file: TextIO, options: dict):
        json.dump(result, file)
--------------------------------------------------
