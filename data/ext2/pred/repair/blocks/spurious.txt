src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\When_page_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_page_found.Then_successful_response
[Test]
        public async Task Then_successful_response()
        {
            var response = await Handler.Handle(new ResetPageAnswersRequest(ApplicationId, SectionId, "1"), CancellationToken.None);

            response.Value.HasPageAnswersBeenReset.Should().BeTrue();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\When_page_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_page_found.Then_page_answers_are_reset
[Test]
        public async Task Then_page_answers_are_reset()
        {
            await Handler.Handle(new ResetPageAnswersRequest(ApplicationId, SectionId, "1"), CancellationToken.None);

            var getPageResponse = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, "1"), CancellationToken.None);
            getPageResponse.Value.PageOfAnswers.Should().BeEmpty();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\When_page_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_page_found.Then_page_complete_is_false
[Test]
        public async Task Then_page_complete_is_false()
        {
            await Handler.Handle(new ResetPageAnswersRequest(ApplicationId, SectionId, "1"), CancellationToken.None);

            var getPageResponse = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, "1"), CancellationToken.None);
            getPageResponse.Value.Complete.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\When_page_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_page_found.Then_all_pages_have_their_active_status_set_correctly
[Test]
        public async Task Then_all_pages_have_their_active_status_set_correctly()
        {
            await Handler.Handle(new ResetPageAnswersRequest(ApplicationId, SectionId, "1"), CancellationToken.None);

            var page1Response = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, "1"), CancellationToken.None);
            page1Response.Value.Active.Should().BeTrue();

            var page2Response = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, "2"), CancellationToken.None);
            page2Response.Value.Active.Should().BeFalse();

            var page3Response = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, "3"), CancellationToken.None);
            page3Response.Value.Active.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.PagesController.PagesController
public Ppublic PagesController(ILogger<PagesController> logger, IMediator mediator)
        {
            _logger = logger;
            _mediator = mediator;
        }
--------------------------------------------------
