src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\When_page_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_page_found.Then_questiontag_is_reset
[Test]
        public async Task Then_questiontag_is_reset()
        {
            await Handler.Handle(new ResetPageAnswersRequest(ApplicationId, SectionId, "1"), CancellationToken.None);

            var getApplicationDataResponse = await GetApplicationDataHandler.Handle(new GetApplicationDataRequest(ApplicationId), CancellationToken.None);

            var applicationData = JsonNode.Parse(getApplicationDataResponse.Value).AsObject();
            var questionTag = applicationData["Q1"];

            questionTag.Should().BeNull();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\ApplicationDataController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.ApplicationDataController.GetQuestionTagData
[ProducesResponseType(200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(400)]
        [HttpGet("{applicationId}/applicationData/{questionTag}")]
        public async Task<ActionResult<string>> GetQuestionTagData(Guid applicationId, string questionTag)
        {
            var applicationDataResponse = await _mediator.Send(new GetQuestionTagDataRequest(applicationId, questionTag));

            if (!applicationDataResponse.Success) return NotFound(new NotFoundError(applicationDataResponse.Message));

            return applicationDataResponse?.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.PagesController.ResetPageAnswers
[HttpPost("{applicationId}/sections/{sectionId}/pages/{pageId}/reset")]
        [ProducesResponseType(200)]
        public async Task<ActionResult<ResetPageAnswersResponse>> ResetPageAnswers(Guid applicationId, Guid sectionId, string pageId)
        {
            _logger.LogInformation($"Resetting all Answers on page {pageId}");

            var resetPageAnswersResponse = await _mediator.Send(new ResetPageAnswersRequest(applicationId, sectionId, pageId), CancellationToken.None);
            if (!resetPageAnswersResponse.Success)
            {
                _logger.LogError($"Unable to reset answers for page {pageId} | Reason : {resetPageAnswersResponse.Message}");
                return BadRequest(new BadRequestError(resetPageAnswersResponse.Message));
            }

            _logger.LogInformation($"Response from ResetPageAnswers: {JsonConvert.SerializeObject(resetPageAnswersResponse.Value)}");

            return resetPageAnswersResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Services\NotRequiredProcessor.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Services.NotRequiredProcessor.PagesWithoutNotRequired
public IEnumerable<Page> PagesWithoutNotRequired(List<Page> pages, JObject applicationData)
        {
            pages.RemoveAll(p => p.NotRequiredConditions != null &&
                                 p.NotRequiredConditions.Any(nrc => nrc.IsOneOf != null && nrc.IsOneOf.Contains(applicationData[nrc.Field]?.Value<string>())));

            var pagesToRemove = new List<string>();
            foreach (var page in pages.Where(p => p.NotRequiredConditions != null))
            {
                if (page.NotRequiredConditions == null) continue;
                foreach (var notRequiredCondition in page.NotRequiredConditions.Where(n => n.ContainsAllOf != null && n.ContainsAllOf.Any()))
                {
                    var fieldToCheck = notRequiredCondition.Field;
                    var fieldValue = applicationData[fieldToCheck]?.Value<string>();
                    if (string.IsNullOrEmpty(fieldValue)) continue;

                    var applicationDataValues = fieldValue.Split(",", StringSplitOptions.RemoveEmptyEntries);

                    var containsAllValues =
                        applicationDataValues.Select(p => p)
                            .Intersect(notRequiredCondition.ContainsAllOf.Distinct()).Count() ==
                        notRequiredCondition.ContainsAllOf.Distinct().Count();

                    if (containsAllValues)
                        pagesToRemove.Add(page.PageId);
                }

                foreach (var notRequiredCondition in page.NotRequiredConditions.Where(n =>
                    n.DoesNotContain != null && n.DoesNotContain.Any(x => !string.IsNullOrEmpty(x))))
                {
                    var isPresent = false;
                    var fieldToCheck = notRequiredCondition.Field;
                    var fieldValue = applicationData[fieldToCheck]?.Value<string>();
                    if (!string.IsNullOrEmpty(fieldValue))
                    {

                        var applicationDataValues = fieldValue.Split(",", StringSplitOptions.RemoveEmptyEntries);
                        foreach (var adv in applicationDataValues)
                        {
                            foreach (var condition in notRequiredCondition.DoesNotContain)
                            {
                                if (string.Equals(adv, condition, StringComparison.InvariantCultureIgnoreCase)) isPresent = true;
                            }
                        }

                    }

                    if (!isPresent)
                        pagesToRemove.Add(page.PageId);
                }
            }

            pages.RemoveAll(p => pagesToRemove.Any(pr => pr == p.PageId));


            return pages;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.PagesController.SetPageAnswers
[HttpPost("{applicationId}/sequences/{sequenceNo}/sections/{sectionNo}/pages/{pageId}")]
        [ProducesResponseType(200)]
        public async Task<ActionResult<SetPageAnswersResponse>> SetPageAnswers(Guid applicationId, int sequenceNo, int sectionNo, string pageId, [FromBody] List<Answer> answers)
        {
            _logger.LogInformation($"Answers sent to SetPageAnswers: {JsonConvert.SerializeObject(answers)}");

            var savePageAnswersResponse = await _mediator.Send(new SetPageAnswersBySectionNoRequest(applicationId, sequenceNo, sectionNo, pageId, answers), CancellationToken.None);
            if (!savePageAnswersResponse.Success)
            {
                _logger.LogError($"Unable to save answers for page {pageId} | Reason : {savePageAnswersResponse.Message}");
                return BadRequest(new BadRequestError(savePageAnswersResponse.Message));
            }

            _logger.LogInformation($"Response from SetPageAnswers: {JsonConvert.SerializeObject(savePageAnswersResponse.Value)}");

            return savePageAnswersResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionHandler.RemovePagesBasedOnNotRequiredConditions
private void RemovePagesBasedOnNotRequiredConditions(ApplicationSection section, JObject applicationData)
        {
            section.QnAData.Pages =
               _notRequiredProcessor.PagesWithoutNotRequired(section.QnAData.Pages, applicationData).ToList();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.UpdateApplicationData
protected void UpdateApplicationData(string pageId, List<Answer> submittedAnswers, ApplicationSection section, Data.Entities.Application application)
        {
            if (application != null)
            {
                var applicationData = JObject.Parse(application.ApplicationData ?? "{}");

                var page = section?.QnAData?.Pages.SingleOrDefault(p => p.PageId == pageId);

                if (page != null)
                {
                    var questionTagsWhichHaveBeenUpdated = new List<string>();
                    var answers = GetAnswersFromRequest(submittedAnswers);

                    foreach (var question in page.Questions)
                    {
                        SetApplicationDataField(question, answers, applicationData);
                        if (!string.IsNullOrWhiteSpace(question.QuestionTag))
                            questionTagsWhichHaveBeenUpdated.Add(question.QuestionTag);

                        if (question.Input.Options != null)
                        {
                            foreach (var option in question.Input.Options.Where(o => o.FurtherQuestions != null))
                            {
                                foreach (var furtherQuestion in option.FurtherQuestions)
                                {
                                    SetApplicationDataField(furtherQuestion, answers, applicationData);
                                    if (!string.IsNullOrWhiteSpace(furtherQuestion.QuestionTag))
                                        questionTagsWhichHaveBeenUpdated.Add(furtherQuestion.QuestionTag);
                                }
                            }
                        }
                    }

                    application.ApplicationData = applicationData.ToString(Formatting.None);

                    SetStatusOfAllPagesBasedOnUpdatedQuestionTags(application, questionTagsWhichHaveBeenUpdated);
                    _tagProcessingService.ClearDeactivatedTags(application.Id, section.Id);

                }
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSequenceSections\GetSequenceSectionsHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSequenceSections.GetSequenceSectionsHandler.RemovePagesBasedOnNotRequiredConditions
private void RemovePagesBasedOnNotRequiredConditions(Section section, JObject applicationData)
        {
            section.QnAData.Pages =
               _notRequiredProcessor.PagesWithoutNotRequired(section.QnAData.Pages, applicationData).ToList();

        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\FindNextRequiredActionTests\When_next_page_has_no_NotRequiredConditions.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.FindNextRequiredActionTests.When_next_page_has_no_NotRequiredConditions.For_null_NotRequiredConditions_then_the_same_nextAction_is_returned
[Test]
        public async Task For_null_NotRequiredConditions_then_the_same_nextAction_is_returned()
        {
            var section = new ApplicationSection
            {
                ApplicationId = ApplicationId,
                QnAData = new QnAData
                {
                    Pages = new List<Page>
                {
                    new Page
                    {
                        PageId = "2",
                        NotRequiredConditions = null
                    }
                }
                }
            };

            var applicationData = JObject.Parse(ApplicationDataJson);
            var nextActionAfterFindingNextAction = SetAnswersBase.FindNextRequiredAction(section, NextAction, applicationData);
            nextActionAfterFindingNextAction.Should().BeEquivalentTo(NextAction);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSections\GetSectionsHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSections.GetSectionsHandler.RemovePages
private void RemovePages(Data.Entities.Application application, Section section)
        {
            var applicationData = JObject.Parse(application.ApplicationData);

            RemovePagesBasedOnNotRequiredConditions(section, applicationData);
            RemoveInactivePages(section);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.GetCheckboxListMatchingNextActionsForPage
protected List<Next> GetCheckboxListMatchingNextActionsForPage(ApplicationSection section, Data.Entities.Application application, string pageId)
        {
            var page = section?.QnAData?.Pages.SingleOrDefault(p => p.PageId == pageId);

            if (page is null)
            {
                return new List<Next>();
            }
            else if (page.Next is null || !page.Next.Any())
            {
                throw new ApplicationException($"Page {page.PageId}, in Sequence {page.SequenceId}, Section {page.SectionId} has no 'Next' instructions.");
            }
            else if (page.Questions.All(q => !"CheckboxList".Equals(q.Input.Type, StringComparison.InvariantCultureIgnoreCase) && !"ComplexCheckboxList".Equals(q.Input.Type, StringComparison.InvariantCultureIgnoreCase)))
            {
                return new List<Next>();
            }

            var matchingNexts = new List<Next>();

            foreach (var next in page.Next)
            {
                var allConditionsSatisfied = true;

                if (next.Conditions != null && next.Conditions.Any())
                {
                    foreach (var condition in next.Conditions.Where(c => c.Contains != null))
                    {
                        var question = page.Questions.Single(q => q.QuestionId == condition.QuestionId);
                        var answers = page.PageOfAnswers?.FirstOrDefault()?.Answers;
                        var answer = answers?.FirstOrDefault(a => a.QuestionId == condition.QuestionId);

                        if ("CheckboxList".Equals(question.Input.Type, StringComparison.InvariantCultureIgnoreCase) || ("ComplexCheckboxList".Equals(question.Input.Type, StringComparison.InvariantCultureIgnoreCase)))
                        {
                            if (answer == null)
                            {
                                allConditionsSatisfied = false;
                                break;
                            }
                            else
                            {
                                var answerValueList = answer.Value.Split(",", StringSplitOptions.RemoveEmptyEntries);

                                if (answer.QuestionId != condition.QuestionId || !answerValueList.Contains(condition.Contains))
                                {
                                    allConditionsSatisfied = false;
                                    break;
                                }
                            }
                        }
                        else
                        {
                            if (answer == null || answer.QuestionId != condition.QuestionId || answer.Value != condition.MustEqual)
                            {
                                allConditionsSatisfied = false;
                                break;
                            }
                        }
                    }
                }

                if (allConditionsSatisfied)
                {
                    // NOTE: In this version we add all of the matching conditions.
                    matchingNexts.Add(next);
                }
            }

            var applicationData = JObject.Parse(application?.ApplicationData ?? "{}");
            var matchingNextsToReturn = new List<Next>();

            foreach (var matchingNext in matchingNexts)
            {
                var nextAction = FindNextRequiredAction(section, matchingNext, applicationData);

                if (nextAction != null)
                {
                    matchingNextsToReturn.Add(nextAction);
                }
            }

            return matchingNextsToReturn;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.PagesController.ResetSectionAnswers
[HttpPost("{applicationId}/sequences/{sequenceNo}/sections/{sectionNo}/reset")]
        [ProducesResponseType(200)]
        public async Task<ActionResult<ResetSectionAnswersResponse>> ResetSectionAnswers(Guid applicationId, int sequenceNo, int sectionNo)
        {
            _logger.LogInformation($"Resetting all Answers on sequence {sequenceNo}, section {sectionNo} for application {applicationId}");

            var resetSectionAnswersResponse = await _mediator.Send(new ResetSectionAnswersRequest(applicationId, sequenceNo, sectionNo), CancellationToken.None);
            if (!resetSectionAnswersResponse.Success)
            {
                _logger.LogError($"Unable to reset answers for sequence {sequenceNo}, section {sectionNo}, for application {applicationId} | Reason : {resetSectionAnswersResponse.Message}");
                return BadRequest(new BadRequestError(resetSectionAnswersResponse.Message));
            }

            _logger.LogInformation($"Response from ResetPageAnswersBySectionNumber: {JsonConvert.SerializeObject(resetSectionAnswersResponse.Value)}");

            return resetSectionAnswersResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSections\GetSectionsHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSections.GetSectionsHandler.RemovePagesBasedOnNotRequiredConditions
private void RemovePagesBasedOnNotRequiredConditions(Section section, JObject applicationData)
        {
            section.QnAData.Pages =
                _notRequiredProcessor.PagesWithoutNotRequired(section.QnAData.Pages, applicationData).ToList();

        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.PagesController.SetPageAnswers
[HttpPost("{applicationId}/sections/{sectionId}/pages/{pageId}")]
        [ProducesResponseType(200)]
        public async Task<ActionResult<SetPageAnswersResponse>> SetPageAnswers(Guid applicationId, Guid sectionId, string pageId, [FromBody] List<Answer> answers)
        {
            _logger.LogInformation($"Answers sent to SetPageAnswers: {JsonConvert.SerializeObject(answers)}");

            var savePageAnswersResponse = await _mediator.Send(new SetPageAnswersRequest(applicationId, sectionId, pageId, answers), CancellationToken.None);
            if (!savePageAnswersResponse.Success)
            {
                _logger.LogError($"Unable to save answers for page {pageId} | Reason : {savePageAnswersResponse.Message}");
                return BadRequest(new BadRequestError(savePageAnswersResponse.Message));
            }

            _logger.LogInformation($"Response from SetPageAnswers: {JsonConvert.SerializeObject(savePageAnswersResponse.Value)}");

            return savePageAnswersResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\ApplicationDataController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.ApplicationDataController.Get
[ProducesResponseType(200)]
        [ProducesResponseType(404)]
        [HttpGet("{applicationId}/applicationData")]
        public async Task<ActionResult<object>> Get(Guid applicationId)
        {
            var applicationDataResponse = await _mediator.Send(new GetApplicationDataRequest(applicationId));

            if (!applicationDataResponse.Success) return NotFound(new NotFoundError(applicationDataResponse.Message));

            return Ok(JsonConvert.DeserializeObject(applicationDataResponse.Value));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\FindNextRequiredActionTests\When_next_page_has_a_NotRequiredCondition.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.FindNextRequiredActionTests.When_multiple_next_actions_and_page_is_not_required.And_all_of_the_nextactions_have_a_condition_The_the_last_action_is_returned
[Test]
        public void And_all_of_the_nextactions_have_a_condition_The_the_last_action_is_returned()
        {
            var expectedNextAction = new Next
            {
                Action = "NextPage",
                ReturnId = "3",
                Conditions = new List<Condition>()
            };

            var section = new ApplicationSection
            {
                ApplicationId = ApplicationId,
                QnAData = new QnAData
                {
                    Pages = new List<Page>
                {
                    new Page
                    {
                        PageId = "2",
                        NotRequiredConditions = new List<NotRequiredCondition>{new NotRequiredCondition(){Field = "OrgType", IsOneOf = new string[]{"OrgType1","OrgType2"}}},
                        Next = new List<Next>
                        {
                            new Next
                            {
                                Action = "NextPage",
                                ReturnId = "12",
                                Conditions = new List<Condition>()
                            },
                            new Next
                            {
                                Action = "NextPage",
                                ReturnId = "14",
                                Conditions = new List<Condition>()
                            },
                            expectedNextAction
                        }
                    },
                    new Page
                    {
                        PageId = "3",
                        NotRequiredConditions = null
                    }
                }
                }
            };

            var applicationData = JObject.Parse(ApplicationDataJson);
            var nextActionAfterFindingNextAction = SetAnswersBase.FindNextRequiredAction(section, NextAction, applicationData);
            nextActionAfterFindingNextAction.Should().BeEquivalentTo(expectedNextAction);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\FindNextRequiredActionTests\When_next_page_has_a_NotRequiredCondition.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.FindNextRequiredActionTests.When_multiple_next_actions_and_page_is_not_required.And_one_of_the_nextactions_has_condition_null_Then_that_action_is_returned
[Test]
        public void And_one_of_the_nextactions_has_condition_null_Then_that_action_is_returned()
        {
            var actionWithNoCondition = new Next
            {
                Action = "NextPage",
                ReturnId = "3",
                Conditions = null
            };

            var section = new ApplicationSection
            {
                ApplicationId = ApplicationId,
                QnAData = new QnAData
                {
                    Pages = new List<Page>
                {
                    new Page
                    {
                        PageId = "2",
                        NotRequiredConditions = new List<NotRequiredCondition>{new NotRequiredCondition(){Field = "OrgType", IsOneOf = new string[]{"OrgType1","OrgType2"}}},
                        Next = new List<Next>
                        {
                            new Next
                            {
                                Action = "NextPage",
                                ReturnId = "12",
                                Conditions = new List<Condition>()
                            },
                            actionWithNoCondition,
                            new Next
                            {
                                Action = "NextPage",
                                ReturnId = "14",
                                Conditions = new List<Condition>()
                            }
                        }
                    },
                    new Page
                    {
                        PageId = "3",
                        NotRequiredConditions = null
                    }
                }
                }
            };

            var applicationData = JObject.Parse(ApplicationDataJson);
            var nextActionAfterFindingNextAction = SetAnswersBase.FindNextRequiredAction(section, NextAction, applicationData);
            nextActionAfterFindingNextAction.Should().BeEquivalentTo(actionWithNoCondition);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.PagesController.SkipPageBySectionNo
[HttpPost("{applicationId}/sequences/{sequenceNo}/sections/{sectionNo}/pages/{pageId}/skip")]
        [ProducesResponseType(200)]
        [ProducesResponseType(400)]
        public async Task<ActionResult<SkipPageResponse>> SkipPageBySectionNo(Guid applicationId, int sequenceNo, int sectionNo, string pageId)
        {
            _logger.LogInformation($"Getting the next action...: applicationId = {applicationId} , sequenceNo = {sequenceNo} , sectionNo = {sectionNo} , pageId = {pageId}");

            var getNextActionResponse = await _mediator.Send(new SkipPageBySectionNoRequest(applicationId, sequenceNo, sectionNo, pageId), CancellationToken.None);
            if (!getNextActionResponse.Success)
            {
                _logger.LogError($"Unable to get the next action for page {pageId} | Reason : {getNextActionResponse.Message}");
                return BadRequest(new BadRequestError(getNextActionResponse.Message));
            }

            _logger.LogInformation($"Response from SkipPageBySectionNo: {JsonConvert.SerializeObject(getNextActionResponse.Value)}");

            return getNextActionResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.FindNextRequiredAction
public Next FindNextRequiredAction(ApplicationSection section, Next nextAction, JObject applicationData)
        {
            if (section?.QnAData is null || nextAction is null || nextAction.Action != "NextPage") return nextAction;

            var isRequiredNextAction = true;

            // Check here for any NotRequiredConditions on the next page.
            var nextPage = section.QnAData?.Pages.FirstOrDefault(p => p.PageId == nextAction.ReturnId);

            if (nextPage is null || applicationData is null)
            {
                return nextAction;
            }
            else if (nextPage.NotRequiredConditions != null && nextPage.NotRequiredConditions.Any())
            {
                nextPage.NotRequired = _notRequiredProcessor.NotRequired(nextPage.NotRequiredConditions, applicationData);
                if (nextPage.NotRequired)
                {
                    isRequiredNextAction = false;
                }
            }

            if (isRequiredNextAction || nextPage.Next is null) return nextAction;

            // Get the next default action from this page.
            if (nextPage.Next.Count == 1)
            {
                nextAction = nextPage.Next.Single();
            }
            else if (nextPage.Next.Any(n => n.Conditions == null))
            {
                // For some reason null Conditions takes precedence over empty Conditions
                nextAction = nextPage.Next.Last(n => n.Conditions == null);
            }
            else if (nextPage.Next.Any(n => n.Conditions.Count == 0))
            {
                nextAction = nextPage.Next.Last(n => n.Conditions.Count == 0);
            }
            else
            {
                nextAction = nextPage.Next.Last();
            }

            // NOTE the recursion!
            return FindNextRequiredAction(section, nextAction, applicationData);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.GetNextActionForPage
protected Next GetNextActionForPage(ApplicationSection section, Data.Entities.Application application, string pageId)
        {
            var page = section?.QnAData?.Pages.SingleOrDefault(p => p.PageId == pageId);

            if (page is null)
            {
                return null;
            }
            else if (page.Next is null || !page.Next.Any())
            {
                throw new ApplicationException($"Page {page.PageId}, in Sequence {page.SequenceId}, Section {page.SectionId} has no 'Next' instructions.");
            }

            var applicationData = JObject.Parse(application?.ApplicationData ?? "{}");

            Next nextAction = null;

            if (page.Next.Count == 1)
            {
                nextAction = page.Next.Single();
            }

            foreach (var next in page.Next)
            {
                var allConditionsSatisfied = true;

                if (next.Conditions != null && next.Conditions.Any())
                {
                    foreach (var condition in next.Conditions)
                    {
                        if (!String.IsNullOrWhiteSpace(condition.QuestionTag))
                        {
                            var questionTagValue = applicationData[condition.QuestionTag];
                            var questionTag = questionTagValue?.Value<string>();
                            allConditionsSatisfied = CheckAllConditionsSatisfied(condition, questionTag);

                            if (!allConditionsSatisfied)
                                break;
                        }
                        else
                        {
                            var question = page.Questions.Single(q => q.QuestionId == condition.QuestionId);
                            var answers = page.PageOfAnswers?.FirstOrDefault()?.Answers;
                            var answer = answers?.FirstOrDefault(a => a.QuestionId == condition.QuestionId);

                            if ("CheckboxList".Equals(question.Input.Type, StringComparison.InvariantCultureIgnoreCase) || ("ComplexCheckboxList".Equals(question.Input.Type, StringComparison.InvariantCultureIgnoreCase)))
                            {
                                if (answer == null)
                                {
                                    allConditionsSatisfied = false;
                                    break;
                                }
                                else
                                {
                                    var answerValueList = answer.Value.Split(",", StringSplitOptions.RemoveEmptyEntries);

                                    if (answer.QuestionId != condition.QuestionId || !answerValueList.Contains(condition.Contains))
                                    {
                                        allConditionsSatisfied = false;
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                if (answer == null || answer.QuestionId != condition.QuestionId || answer.Value != condition.MustEqual)
                                {
                                    allConditionsSatisfied = false;
                                    break;
                                }
                            }
                        }
                    }
                }

                if (allConditionsSatisfied)
                {
                    // NOTE: In this version we return the first Next action that is satisfied. In the Checkbox version we return all of the matching ones.
                    // At some point we should check this intended behaviour works if multiple Next actions are satisfied BUT one of them are actually not required.
                    nextAction = next;
                    break;
                }
            }

            return FindNextRequiredAction(section, nextAction, applicationData);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.PagesController.ResetPageAnswersBySectionNumber
[HttpPost("{applicationId}/sequences/{sequenceNo}/sections/{sectionNo}/pages/{pageId}/reset")]
        [ProducesResponseType(200)]
        public async Task<ActionResult<ResetPageAnswersResponse>> ResetPageAnswersBySectionNumber(Guid applicationId, int sequenceNo, int sectionNo, string pageId)
        {
            _logger.LogInformation($"Resetting all Answers on page {pageId}");

            var resetPageAnswersResponse = await _mediator.Send(new ResetPageAnswersBySectionNoRequest(applicationId, sequenceNo, sectionNo, pageId), CancellationToken.None);
            if (!resetPageAnswersResponse.Success)
            {
                _logger.LogError($"Unable to reset answers for sequence {sequenceNo}, section {sectionNo}, page {pageId} | Reason : {resetPageAnswersResponse.Message}");
                return BadRequest(new BadRequestError(resetPageAnswersResponse.Message));
            }

            _logger.LogInformation($"Response from ResetPageAnswersBySectionNumber: {JsonConvert.SerializeObject(resetPageAnswersResponse.Value)}");

            return resetPageAnswersResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\FindNextRequiredActionTests\When_next_page_has_a_NotRequiredCondition.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.FindNextRequiredActionTests.When_multiple_next_actions_and_page_is_not_required.Then_the_page_is_marked_as_not_required
[Test]
        public void Then_the_page_is_marked_as_not_required()
        {
            var section = new ApplicationSection
            {
                ApplicationId = ApplicationId,
                QnAData = new QnAData
                {
                    Pages = new List<Page>
                    {
                        new Page
                        {
                            PageId = "2",
                            NotRequiredConditions = new List<NotRequiredCondition>{new NotRequiredCondition(){Field = "OrgType", IsOneOf = new string[]{"OrgType1","OrgType2"}}},
                            Next = new List<Next>
                            {
                                new Next
                                {
                                    Action = "NextPage",
                                    ReturnId = "12",
                                    Conditions = new List<Condition>()
                                }
                            }
                        },
                        new Page
                        {
                            PageId = "3",
                            NotRequiredConditions = null
                        }
                    }
                }
            };

            var applicationData = JObject.Parse(ApplicationDataJson);
            SetAnswersBase.FindNextRequiredAction(section, NextAction, applicationData);
            Assert.IsTrue(section.QnAData.Pages.First().NotRequired);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesHandler.UpdateApplicationData
private void UpdateApplicationData(SubmitPageOfFilesRequest request, Data.Entities.Application application, ApplicationSection section)
        {
            if (application != null)
            {
                var applicationData = JObject.Parse(application.ApplicationData ?? "{}");

                var page = section?.QnAData?.Pages.SingleOrDefault(p => p.PageId == request.PageId);

                if (page != null)
                {
                    var questionTagsWhichHaveBeenUpdated = new List<string>();
                    var answers = GetAnswersFromRequest(request);

                    foreach (var question in page.Questions)
                    {
                        SetApplicationDataField(question, answers, applicationData);
                        if (!string.IsNullOrWhiteSpace(question.QuestionTag))
                            questionTagsWhichHaveBeenUpdated.Add(question.QuestionTag);

                        if (question.Input.Options != null)
                        {
                            foreach (var option in question.Input.Options.Where(o => o.FurtherQuestions != null))
                            {
                                foreach (var furtherQuestion in option.FurtherQuestions)
                                {
                                    SetApplicationDataField(furtherQuestion, answers, applicationData);
                                    if (!string.IsNullOrWhiteSpace(furtherQuestion.QuestionTag))
                                        questionTagsWhichHaveBeenUpdated.Add(furtherQuestion.QuestionTag);
                                }
                            }
                        }
                    }

                    application.ApplicationData = applicationData.ToString(Formatting.None);

                    SetStatusOfAllPagesBasedOnUpdatedQuestionTags(application, questionTagsWhichHaveBeenUpdated);
                    _tagProcessingService.ClearDeactivatedTags(application.Id, request.SectionId);
                }
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionBySectionNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionBySectionNoHandler.RemovePagesBasedOnNotRequiredConditions
private void RemovePagesBasedOnNotRequiredConditions(ApplicationSection section, JObject applicationData)
        {
            section.QnAData.Pages =
                _notRequiredProcessor.PagesWithoutNotRequired(section.QnAData.Pages, applicationData).ToList();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.PagesController.SkipPage
[HttpPost("{applicationId}/sections/{sectionId}/pages/{pageId}/skip")]
        [ProducesResponseType(200)]
        [ProducesResponseType(400)]
        public async Task<ActionResult<SkipPageResponse>> SkipPage(Guid applicationId, Guid sectionId, string pageId)
        {
            _logger.LogInformation($"Getting the next action...: applicationId = {applicationId} , pageId = {pageId}");

            var getNextActionResponse = await _mediator.Send(new SkipPageRequest(applicationId, sectionId, pageId), CancellationToken.None);
            if (!getNextActionResponse.Success)
            {
                _logger.LogError($"Unable to get the next action for page {pageId} | Reason : {getNextActionResponse.Message}");
                return BadRequest(new BadRequestError(getNextActionResponse.Message));
            }

            _logger.LogInformation($"Response from SkipPage: {JsonConvert.SerializeObject(getNextActionResponse.Value)}");

            return getNextActionResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DeleteFile\DeleteFileRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DeleteFile.DeleteFileHandler.RemoveApplicationDataForThisQuestion
private async Task RemoveApplicationDataForThisQuestion(Guid applicationId, string questionId, Page page)
        {
            var application = await _dataContext.Applications.SingleOrDefaultAsync(app => app.Id == applicationId);
            var applicationData = JObject.Parse(application.ApplicationData);

            var question = page.Questions.Single(q => q.QuestionId == questionId);

            applicationData.Remove(question.QuestionTag);

            application.ApplicationData = applicationData.ToString(Formatting.None);

            await _dataContext.SaveChangesAsync();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\FindNextRequiredActionTests\When_next_page_has_a_NotRequiredCondition.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.FindNextRequiredActionTests.When_next_page_has_a_NotRequiredCondition.Subsequent_nextAction_is_returned
[Test]
        public async Task Subsequent_nextAction_is_returned()
        {
            var pageTwoNextAction = new Next
            {
                Action = "NextPage",
                ReturnId = "3"
            };

            var section = new ApplicationSection
            {
                ApplicationId = ApplicationId,
                QnAData = new QnAData
                {
                    Pages = new List<Page>
                {
                    new Page
                    {
                        PageId = "2",
                        NotRequiredConditions = new List<NotRequiredCondition>{new NotRequiredCondition(){Field = "OrgType", IsOneOf = new string[]{"OrgType1","OrgType2"}}},
                        Next = new List<Next>{pageTwoNextAction}
                    },
                    new Page
                    {
                        PageId = "3",
                        NotRequiredConditions = null
                    }
                }
                }
            };

            var applicationData = JObject.Parse(ApplicationDataJson);
            var nextActionAfterFindingNextAction = SetAnswersBase.FindNextRequiredAction(section, NextAction, applicationData);
            nextActionAfterFindingNextAction.Should().BeEquivalentTo(pageTwoNextAction);
        }
--------------------------------------------------
