src\SFA.DAS.QnA.Api.Types\Section.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Section.Title
public string Title { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Section.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Section.LinkTitle
public string LinkTitle { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Section.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Section.DisplayType
public string DisplayType { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\ProjectsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.ProjectsController.UpsertProject
[HttpPut("{projectId}")]
        public async Task<ActionResult<Project>> UpsertProject(Guid projectId, [FromBody] Project project)
        {
            var upsertProjectResult = await _mediator.Send(new UpsertProjectRequest(projectId, project));
            if (!upsertProjectResult.Success) return BadRequest(new BadRequestError(upsertProjectResult.Message));

            return upsertProjectResult.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Workflows\GetWorkflow\GetWorkflowRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Workflows.GetWorkflow.GetWorkflowRequest.GetWorkflowRequest
public GetWorkflowRequest(Guid projectId, Guid workflowId)
        {
            ProjectId = projectId;
            WorkflowId = workflowId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequences\GetSequencesHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sequences.GetSequences.GetSequencesHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequences\GetSequencesHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sequences.GetSequences.GetSequencesHandler._mapper
private readonly IMapper _mapper;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequences\GetSequencesHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetSequences.GetSequencesHandler.GetSequencesHandler
public GetSequencesHandler(QnaDataContext dataContext, IMapper mapper)
        {
            _dataContext = dataContext;
            _mapper = mapper;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\ApplicationController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.ApplicationController._mediator
private readonly IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\SetPageAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.SetPageAnswersResponse.ValidationPassed
public bool ValidationPassed { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequences\GetSequencesHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetSequences.GetSequencesHandler.Handle
public async Task<HandlerResponse<List<Sequence>>> Handle(GetSequencesRequest request, CancellationToken cancellationToken)
        {
            var sequences = await _dataContext.ApplicationSequences.AsNoTracking()
                .Where(seq => seq.ApplicationId == request.ApplicationId)
                .ToListAsync(cancellationToken: cancellationToken);

            if (!sequences.Any())
            {
                return new HandlerResponse<List<Sequence>>(false, "Application does not exist");
            }

            var mappedSequences = _mapper.Map<List<Sequence>>(sequences);

            return new HandlerResponse<List<Sequence>>(mappedSequences);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\ApplicationController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.ApplicationController.ApplicationController
public ApplicationController(ILogger<ApplicationController> logger, IMediator mediator)
        {
            _logger = logger;
            _mediator = mediator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\DateInFutureValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.DateInFutureValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", true)]
        [TestCase(",,", true)]
        [TestCase("01,01,0001", false)]
        [TestCase("01,11,2019", false)]
        [TestCase("31,12,9999", true)]
        public void Then_correct_errors_are_returned(string input, bool isValid)
        {
            var validator = new DateInFutureValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Date must be in the future",
                    Name = "DateInFuture"
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.GetAnswersFromRequest
private static List<Answer> GetAnswersFromRequest(List<Answer> submittedAnswers)
        {
            var answers = new List<Answer>();

            if (submittedAnswers != null)
            {
                answers.AddRange(submittedAnswers);
            }

            return answers;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSequencesTests\GetSequencesTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSequencesTests.GetSequencesTestBase.Handler
protected GetSequencesHandler Handler;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageBySectionNoTests\When_GetPageBySectionNo_handled_for_non_existent_page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageBySectionNoTests.When_GetPageBySectionNo_handled_for_non_existent_page.Then_unsuccessful_response_is_returned
[Test]
        public async Task Then_unsuccessful_response_is_returned()
        {
            var result = await Handler.Handle(new GetPageBySectionNoRequest(ApplicationId, SequenceNo, SectionNo, Guid.NewGuid().ToString()), CancellationToken.None);

            result.Success.Should().BeFalse();
            result.Value.Should().BeNull();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.SetStatusOfNextPagesBasedOnDeemedNextActions
protected void SetStatusOfNextPagesBasedOnDeemedNextActions(ApplicationSection section, string pageId, Next deemedNextAction, List<Next> deemedCheckboxListNextActions)
        {
            if (section != null)
            {
                // Have to force QnAData a new object and reassign for Entity Framework to pick up changes
                var qnaData = new QnAData(section.QnAData);
                var page = qnaData?.Pages.SingleOrDefault(p => p.PageId == pageId);

                if (page != null)
                {
                    if (deemedCheckboxListNextActions != null && deemedCheckboxListNextActions.Any())
                    {
                        foreach (var checkboxNextAction in deemedCheckboxListNextActions)
                        {
                            DeactivateDependentPages(checkboxNextAction, page.PageId, qnaData, page);
                        }

                        foreach (var checkboxNextAction in deemedCheckboxListNextActions)
                        {
                            ActivateDependentPages(checkboxNextAction, page.PageId, qnaData, page);
                        }
                    }
                    else if (deemedNextAction != null)
                    {
                        DeactivateDependentPages(deemedNextAction, page.PageId, qnaData, page);
                        ActivateDependentPages(deemedNextAction, page.PageId, qnaData, page);
                    }
                    else if (deemedNextAction is null && page.Next != null)
                    {
                        // NOTE: This should only occur when resetting page answers and all of the next actions are based on particular answer being provided
                        // Unforunately we don't have one of those answers so we must deactivate all dependant pages
                        foreach (var nextAction in page.Next)
                        {
                            DeactivateDependentPages(nextAction, page.PageId, qnaData, page);
                        }
                    }

                    // Assign QnAData back so Entity Framework will pick up changes
                    section.QnAData = qnaData;
                }
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSectionsTests\When_GetSections_handled.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSectionsTests.When_GetSections_handled.Then_the_correct_sections_are_returned
[Test]
        public async Task Then_the_correct_sections_are_returned()
        {
            var results = await Handler.Handle(new GetSectionsRequest(ApplicationId), CancellationToken.None);

            results.Value.Count.Should().Be(3);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSequences\UpsertWorkflowSequence\UpsertWorkflowSequenceHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.WorkflowSequences.UpsertWorkflowSequence.UpsertWorkflowSequenceHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageTests\CanUpdatePageTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdateTests.CanUpdatePageTestBase.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\CompleteFeedbackWithinSequence\CompleteFeedbackWithinSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.CompleteFeedbackWithinSequence.CompleteFeedbackWithinSequenceRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSequences\UpsertWorkflowSequence\UpsertWorkflowSequenceHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSequences.UpsertWorkflowSequence.UpsertWorkflowSequenceHandler.UpsertWorkflowSequenceHandler
public UpsertWorkflowSequenceHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageTests\CanUpdatePageTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdateTests.CanUpdatePageTestBase.SectionId
protected Guid SectionId;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageTests\CanUpdatePageTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdateTests.CanUpdatePageTestBase.ActivePageId
protected string ActivePageId;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesHandler._fileStorageConfig
private readonly IOptions<FileStorageConfig> _fileStorageConfig;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Projects\CreateProject\CreateProjectRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Projects.CreateProject.CreateProjectRequest.CreateProjectRequest
public CreateProjectRequest(Project project)
        {
            Project = project;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageTests\CanUpdatePageTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdateTests.CanUpdatePageTestBase.InactivePageId
protected string InactivePageId;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\RemovePageAnswerResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.RemovePageAnswerResponse.RemovePageAnswerResponse
public RemovePageAnswerResponse(Page.Page page)
        {
            Page = page;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesHandler._encryptionService
private readonly IEncryptionService _encryptionService;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\When_section_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_section_found.Then_delete_file_request_sent_for_file_upload_question
[TestCase("2", "Q2", "Folder/Filename.pdf")]
        public async Task Then_delete_file_request_sent_for_file_upload_question(string pageId, string questionId, string fileName)
        {
            await Handler.Handle(new ResetSectionAnswersRequest(ApplicationId, SequenceNo, SectionNo), CancellationToken.None);

            await Mediator.Received(1).Send(Arg.Is<DeleteFileRequest>(x => x.ApplicationId == ApplicationId && x.SectionId == SectionId && x.PageId == pageId && x.QuestionId == questionId && x.FileName == fileName));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Option.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Option.FurtherQuestions
public List<Question> FurtherQuestions { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesHandler._fileContentValidator
private readonly IFileContentValidator _fileContentValidator;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageTests\CanUpdatePageTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdateTests.CanUpdatePageTestBase.SetUp
[SetUp]
        public async Task SetUp()
        {
            ApplicationId = Guid.NewGuid();
            SectionId = Guid.NewGuid();
            ActivePageId = Guid.NewGuid().ToString();
            InactivePageId = Guid.NewGuid().ToString();

            var dataContext = DataContextHelpers.GetInMemoryDataContext();

            dataContext.Applications.Add(new Data.Entities.Application()
            {
                Id = ApplicationId,
            });

            dataContext.ApplicationSections.Add(new ApplicationSection()
            {
                Id = SectionId,
                ApplicationId = ApplicationId,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page { PageId = ActivePageId, Active = true },
                        new Page { PageId = InactivePageId, Active = false },
                    }
                }
            });

            dataContext.SaveChanges();

            Handler = new CanUpdatePageHandler(dataContext);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Condition.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Condition.QuestionId
public string QuestionId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesHandler.SubmitPageOfFilesHandler
public SubmitPageOfFilesHandler(QnaDataContext dataContext, IOptions<FileStorageConfig> fileStorageConfig, IEncryptionService encryptionService, IAnswerValidator answerValidator, IFileContentValidator fileContentValidator, INotRequiredProcessor notRequiredProcessor, ITagProcessingService tagProcessingService) : base(dataContext, notRequiredProcessor, tagProcessingService, answerValidator)
        {
            _fileStorageConfig = fileStorageConfig;
            _encryptionService = encryptionService;
            _fileContentValidator = fileContentValidator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageTests\When_GetPage_handled_for_non_existent_page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageTests.When_GetPage_handled_for_non_existent_page.Then_unsuccessful_response_is_returned
[Test]
        public async Task Then_unsuccessful_response_is_returned()
        {
            var result = await Handler.Handle(new GetPageRequest(ApplicationId, SectionId, Guid.NewGuid().ToString()), CancellationToken.None);

            result.Success.Should().BeFalse();
            result.Value.Should().BeNull();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesHandler.Handle
public async Task<HandlerResponse<SetPageAnswersResponse>> Handle(SubmitPageOfFilesRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.ApplicationSections.SingleOrDefaultAsync(sec => sec.Id == request.SectionId && sec.ApplicationId == request.ApplicationId);
            var validationErrorResponse = ValidateRequest(request, section);

            if (validationErrorResponse != null)
            {
                return validationErrorResponse;
            }

            await SaveAnswersIntoPage(section, request, cancellationToken);
            var application = await _dataContext.Applications.SingleOrDefaultAsync(app => app.Id == request.ApplicationId);
            UpdateApplicationData(request, application, section);

            var nextAction = GetNextActionForPage(section, application, request.PageId);
            var checkboxListAllNexts = GetCheckboxListMatchingNextActionsForPage(section, application, request.PageId);

            SetStatusOfNextPagesBasedOnDeemedNextActions(section, request.PageId, nextAction, checkboxListAllNexts);

            await _dataContext.SaveChangesAsync(cancellationToken);

            return new HandlerResponse<SetPageAnswersResponse>(new SetPageAnswersResponse(nextAction.Action, nextAction.ReturnId));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\WorkflowSequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.WorkflowSequence.WorkflowId
public Guid WorkflowId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Next.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Next.Action
public string Action { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.ValidateSectionAnswersRequest
protected HandlerResponse<ResetSectionAnswersResponse> ValidateSectionAnswersRequest(ApplicationSection section)
        {
            if (section is null)
            {
                return new HandlerResponse<ResetSectionAnswersResponse>(success: false, message: "The section does not exist.");
            }

            return null;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\WorkflowSequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.WorkflowSequence.SequenceNo
public int SequenceNo { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Next.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Next.ReturnId
public string ReturnId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetApplicationData\SetApplicationDataRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetApplicationData.SetApplicationDataRequest.ApplicationData
public object ApplicationData { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\WorkflowSequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.WorkflowSequence.SectionNo
public int SectionNo { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Next.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Next.Conditions
public List<Condition> Conditions { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetApplicationData\SetApplicationDataRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetApplicationData.SetApplicationDataRequest.SetApplicationDataRequest
public SetApplicationDataRequest(Guid applicationId, object applicationData)
        {
            ApplicationId = applicationId;
            ApplicationData = applicationData;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\WorkflowSequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.WorkflowSequence.SectionId
public Guid SectionId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Next.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Next.ConditionMet
public bool ConditionMet { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_page_contains_only_fileupload_questions.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_page_contains_only_fileupload_questions.Then_validation_error_occurs
[Test]
        public async Task Then_validation_error_occurs()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId);

            var response = await Handler.Handle(new SetPageAnswersRequest(applicationId, sectionId, "100", new List<Answer>
            {
                new Answer { QuestionId = "Q1", Value = "File.txt" },
                new Answer { QuestionId = "Q2", Value = "File.txt" },
                new Answer { QuestionId = "Q3", Value = "File.txt" }
            }), CancellationToken.None);

            response.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\WorkflowSequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.WorkflowSequence.IsActive
public bool IsActive { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\CreateSnapshot\CreateSnapshotHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.CreateSnapshot.CreateSnapshotHandler.CopyFileInAzureStorage
private async Task CopyFileInAzureStorage(string source, string destination)
        {
            try
            {
                var account = CloudStorageAccount.Parse(_fileStorageConfig.Value.StorageConnectionString);
                var client = account.CreateCloudBlobClient();
                var container = client.GetContainerReference(_fileStorageConfig.Value.ContainerName);

                var sourceFileBlobReference = container.GetBlockBlobReference(source);

                if (sourceFileBlobReference.Exists())
                {
                    var destinationFileBlobReference = container.GetBlockBlobReference(destination);
                    await destinationFileBlobReference.StartCopyAsync(sourceFileBlobReference);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error copying file in snapshot: {destination} || Message: {ex.Message} || Stack trace: {ex.StackTrace}");
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Projects\UpsertProject\UpsertProjectHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Projects.UpsertProject.UpsertProjectHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Option.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Option.Value
public string Value { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Projects\UpsertProject\UpsertProjectHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Projects.UpsertProject.UpsertProjectHandler.UpsertProjectHandler
public UpsertProjectHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionHandler.RemoveInactivePages
private static void RemoveInactivePages(ApplicationSection section)
        {
            section.QnAData.Pages.RemoveAll(p => !p.Active);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_page_contains_only_fileupload_questions.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_page_contains_only_fileupload_questions.SetupQuestionData
private async Task SetupQuestionData(Guid applicationId, Guid sectionId)
        {
            await DataContext.ApplicationSections.AddAsync(new ApplicationSection()
            {
                ApplicationId = applicationId,
                Id = sectionId,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page()
                        {
                            PageId = "100",
                            Questions = new List<Question>
                            {
                                new Question { QuestionId = "Q1", Input = new Input { Type = "FileUpload" }},
                                new Question { QuestionId = "Q2", Input = new Input { Type = "FileUpload" }},
                                new Question { QuestionId = "Q3", Input = new Input { Type = "FileUpload" }},
                            },
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>(),
                            Active = true
                        }
                    }
                }
            });

            await DataContext.Applications.AddAsync(new Data.Entities.Application() { Id = applicationId, ApplicationData = "{}" });

            await DataContext.SaveChangesAsync();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\AzureTableStorageConfigurationProvider.cs
BlockTypes.METHOD, SFA.DAS.QnA.Configuration.Infrastructure.AzureTableStorageConfigurationProvider.GetOperation
private TableOperation GetOperation(string serviceName, string environmentName, string version)
        {
            return TableOperation.Retrieve<ConfigurationItem>(environmentName, $"{serviceName}_{version}");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\StorageMigrationController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.MigratedFile.From
public string From { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\StorageMigrationController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.MigratedFile.To
public string To { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Views\ViewHelpers.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Views.ViewHelpers.GetValidations
public static dynamic GetValidations(dynamic Model)
        {
            var validations = ViewHelpers.PropertyExists(Model, "Validations")
                ? Model.Validations
                : Model.Input.Validations;
            return validations;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\HandlerResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.HandlerResponse.HandlerResponse
public HandlerResponse(TResponseType value)
        {
            Value = value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesHandler.ValidateRequest
private HandlerResponse<SetPageAnswersResponse> ValidateRequest(SubmitPageOfFilesRequest request, ApplicationSection section)
        {
            var page = section?.QnAData?.Pages.SingleOrDefault(p => p.PageId == request.PageId);

            if (page is null)
            {
                return new HandlerResponse<SetPageAnswersResponse>(success: false, message: "Cannot find requested page.");
            }
            else if (request.Files is null)
            {
                return new HandlerResponse<SetPageAnswersResponse>(success: false, message: "No files specified.");
            }
            else if (request.Files.Any(f => f.Name is null))
            {
                return new HandlerResponse<SetPageAnswersResponse>(success: false, message: "All files must specify which question they are related to.");
            }
            else if (page.AllowMultipleAnswers)
            {
                return new HandlerResponse<SetPageAnswersResponse>(success: false, message: "This endpoint cannot be used for Multiple Answers pages. Use AddAnswer / RemoveAnswer instead.");
            }
            else if (page.Questions.Any())
            {
                if (page.Questions.Any(q => !"FileUpload".Equals(q.Input?.Type, StringComparison.InvariantCultureIgnoreCase)))
                {
                    return new HandlerResponse<SetPageAnswersResponse>(success: false, message: "Pages cannot contain a mixture of FileUploads and other Question Types.");
                }

                var answersToValidate = GetAnswersToValidate(request, page);

                var validationErrors = _answerValidator.Validate(answersToValidate, page);
                if (validationErrors.Any())
                {
                    return new HandlerResponse<SetPageAnswersResponse>(new SetPageAnswersResponse(validationErrors));
                }

                var fileContentValidationErrors = _fileContentValidator.Validate(request.Files);
                if (fileContentValidationErrors.Any())
                {
                    return new HandlerResponse<SetPageAnswersResponse>(new SetPageAnswersResponse(fileContentValidationErrors));
                }
            }

            return null;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\Workflows\UpsertWorkflowTests\When_upsert_called_with_new_workflow.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.Workflows.UpsertWorkflowTests.When_upsert_called_with_new_workflow.Then_Workflow_is_inserted_into_database
[Test]
        public async Task Then_Workflow_is_inserted_into_database()
        {
            var inMemoryDataContext = DataContextHelpers.GetInMemoryDataContext();

            var upsertWorkflowHandler = new UpsertWorkflowHandler(inMemoryDataContext);

            var projectId = Guid.NewGuid();
            var workflowId = Guid.NewGuid();
            await upsertWorkflowHandler.Handle(new UpsertWorkflowRequest(projectId, Guid.Empty, new Workflow { Id = workflowId }), CancellationToken.None);

            var createdWorkflow = await inMemoryDataContext.Workflows.SingleOrDefaultAsync(w => w.Id == workflowId);

            createdWorkflow.Should().NotBeNull();
            createdWorkflow.Id.Should().Be(workflowId);
            createdWorkflow.ProjectId.Should().Be(projectId);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\ProjectsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.ProjectsController.CreateProject
[HttpPost]
        public async Task<ActionResult<Project>> CreateProject([FromBody] Project project)
        {
            var createProjectResult = await _mediator.Send(new CreateProjectRequest(project));
            if (!createProjectResult.Success) return BadRequest(new BadRequestError(createProjectResult.Message));

            return createProjectResult.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequence\GetSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetSequence.GetSequenceRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.SetStatusOfAllPagesBasedOnUpdatedQuestionTags
protected void SetStatusOfAllPagesBasedOnUpdatedQuestionTags(Data.Entities.Application application, List<string> questionTags)
        {
            if (questionTags != null && questionTags.Count > 0)
            {
                var sections = _dataContext.ApplicationSections.Where(sec => sec.ApplicationId == application.Id);

                // Go through each section in the application
                foreach (var section in sections)
                {
                    // Get the list of pages that contain one of QuestionTags in the next condition
                    var pagesToProcess = new List<Page>();
                    foreach (var questionTag in questionTags.Distinct())
                    {
                        var questionTagPages = section.QnAData.Pages.Where(p => !p.AllowMultipleAnswers && p.Next.SelectMany(n => n.Conditions).Select(c => c.QuestionTag).Contains(questionTag));
                        pagesToProcess.AddRange(questionTagPages);
                    }

                    if (pagesToProcess.Any())
                    {
                        // Have to force QnAData a new object and reassign for Entity Framework to pick up changes
                        var qnaData = new QnAData(section.QnAData);

                        // Deactivate & Activate affected pages accordingly
                        foreach (var page in pagesToProcess)
                        {
                            if (page.PageOfAnswers != null && page.PageOfAnswers.Count > 0)
                            {
                                var nextAction = GetNextActionForPage(section, application, page.PageId);
                                if (nextAction?.Conditions != null)
                                {
                                    DeactivateDependentPages(nextAction, page.PageId, qnaData, page);
                                    ActivateDependentPages(nextAction, page.PageId, qnaData, page);
                                }
                            }
                        }

                        // Assign QnAData back so Entity Framework will pick up changes
                        section.QnAData = qnaData;
                    }
                }
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Infrastructure\SqlTokenGenerator.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Infrastructure.SqlTokenGenerator.AzureResource
private const string AzureResource = "https://database.windows.net/";
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetSectionAnswers\ResetSectionAnswersRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetSectionAnswersRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequence\GetSequenceBySequenceNoHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sequences.GetSequence.GetSequenceBySequenceNoHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_page_allows_multiple_answers.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_page_allows_multiple_answers.Then_validation_error_occurs
[Test]
        public async Task Then_validation_error_occurs()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId);

            var response = await Handler.Handle(new SubmitPageOfFilesRequest(applicationId, sectionId, "1", new FormFileCollection
            {
                GenerateFile("This is a dummy file", "Q1", "File.txt")
            }), CancellationToken.None);

            response.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPagesToIncomplete\ResetPagesToIncompleteHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPagesToIncomplete.ResetPagesToIncompleteHandler.ResetPagesToIncompleteHandler
public ResetPagesToIncompleteHandler(QnaDataContext dataContext, INotRequiredProcessor notRequiredProcessor, ITagProcessingService tagProcessingService, ILogger<ResetPagesToIncompleteHandler> logger) : base(dataContext, notRequiredProcessor, tagProcessingService, null)
        {
            _logger = logger;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequence\GetSequenceBySequenceNoHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sequences.GetSequence.GetSequenceBySequenceNoHandler._mapper
private readonly IMapper _mapper;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_page_allows_multiple_answers.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_page_allows_multiple_answers.SetupQuestionData
private async Task SetupQuestionData(Guid applicationId, Guid sectionId)
        {
            await DataContext.ApplicationSections.AddAsync(new ApplicationSection()
            {
                ApplicationId = applicationId,
                Id = sectionId,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page()
                        {
                            PageId = "1",
                            AllowMultipleAnswers = true,
                            Questions = new List<Question>
                            {
                                new Question { QuestionId = "Q1", Input = new Input { Type = "FileUpload" }}
                            },
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>(),
                            Active = true
                        }
                    }
                }
            });

            await DataContext.Applications.AddAsync(new Data.Entities.Application() { Id = applicationId, ApplicationData = "{}" });

            await DataContext.SaveChangesAsync();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowSectionsController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.Config.WorkflowSectionsController._mediator
private readonly IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPagesToIncomplete\ResetPagesToIncompleteHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPagesToIncomplete.ResetPagesToIncompleteHandler.Handle
public async Task<HandlerResponse<bool>> Handle(ResetPagesToIncompleteRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.ApplicationSections.SingleOrDefaultAsync(sec => sec.ApplicationId == request.ApplicationId && sec.SequenceNo == request.SequenceNo && sec.SectionNo == request.SectionNo, cancellationToken);
            if (section == null) return new HandlerResponse<bool>(true);
            var qnaData = new QnAData(section.QnAData);
            if (qnaData?.Pages == null) return new HandlerResponse<bool>(true);
            var updateMade = false;

            foreach (var page in qnaData.Pages)
            {
                if (request.PageIdsToExclude.Contains(page.PageId)) continue;
                if (!page.Complete) continue;
                page.Complete = false;
                _logger.LogInformation($"Reset applicationId {request.ApplicationId} PageId {page.PageId} to complete=false");
                updateMade = true;
            }

            if (!updateMade) return new HandlerResponse<bool>(true);

            section.QnAData = qnaData;
            await _dataContext.SaveChangesAsync(cancellationToken);

            return new HandlerResponse<bool>(true);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequence\GetSequenceBySequenceNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetSequence.GetSequenceBySequenceNoHandler.GetSequenceBySequenceNoHandler
public GetSequenceBySequenceNoHandler(QnaDataContext dataContext, IMapper mapper)
        {
            _dataContext = dataContext;
            _mapper = mapper;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowSectionsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.WorkflowSectionsController.WorkflowSectionsController
public WorkflowSectionsController(IMediator mediator)
        {
            _mediator = mediator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Views\ViewHelpers.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Views.ViewHelpers.GetOptions
public static dynamic GetOptions(dynamic Model)
        {
            var options = ViewHelpers.PropertyExists(Model, "Options")
                ? Model.Options
                : Model.Input.Options;
            return options;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequence\GetSequenceBySequenceNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetSequence.GetSequenceBySequenceNoHandler.Handle
public async Task<HandlerResponse<Sequence>> Handle(GetSequenceBySequenceNoRequest request, CancellationToken cancellationToken)
        {
            var application = await _dataContext.Applications.AsNoTracking().FirstOrDefaultAsync(app => app.Id == request.ApplicationId, cancellationToken: cancellationToken);
            if (application is null) return new HandlerResponse<Sequence>(false, "Application does not exist");

            var sequence = await _dataContext.ApplicationSequences.AsNoTracking().FirstOrDefaultAsync(seq => seq.SequenceNo == request.SequenceNo && seq.ApplicationId == request.ApplicationId, cancellationToken: cancellationToken);
            if (sequence is null) return new HandlerResponse<Sequence>(false, "Sequence does not exist");

            return new HandlerResponse<Sequence>(_mapper.Map<Sequence>(sequence));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowSectionsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.WorkflowSectionsController.GetWorkflowSections
[HttpGet("{projectId}/sections")]
        public async Task<ActionResult<List<WorkflowSection>>> GetWorkflowSections(Guid projectId)
        {
            var getWorkflowSectionsResponse = await _mediator.Send(new GetWorkflowSectionsRequest(projectId));
            if (!getWorkflowSectionsResponse.Success) return NotFound(new NotFoundError(getWorkflowSectionsResponse.Message));

            return getWorkflowSectionsResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Projects\CreateProject\CreateProjectRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Projects.CreateProject.CreateProjectRequest.Project
public Project Project { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowSectionsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.WorkflowSectionsController.GetWorkflowSection
[HttpGet("{projectId}/sections/{sectionId}")]
        public async Task<ActionResult<WorkflowSection>> GetWorkflowSection(Guid projectId, Guid sectionId)
        {
            var getWorkflowSectionResponse = await _mediator.Send(new GetWorkflowSectionRequest(projectId, sectionId));
            if (!getWorkflowSectionResponse.Success) return NotFound(new NotFoundError(getWorkflowSectionResponse.Message));

            return getWorkflowSectionResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\CreateSnapshotResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.CreateSnapshotResponse.ApplicationId
public Guid ApplicationId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\UpsertFeedback\UpsertFeedbackHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.PageFeedback.UpsertFeedback.UpsertFeedbackHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\UpsertFeedback\UpsertFeedbackHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.UpsertFeedback.UpsertFeedbackHandler.UpsertFeedbackHandler
public UpsertFeedbackHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\When_page_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_page_found.Then_successful_response
[Test]
        public async Task Then_successful_response()
        {
            var response = await Handler.Handle(new ResetPageAnswersRequest(ApplicationId, SectionId, "1"), CancellationToken.None);

            response.Value.HasPageAnswersBeenReset.Should().BeTrue();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\When_page_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_page_found.Then_page_answers_are_reset
[Test]
        public async Task Then_page_answers_are_reset()
        {
            await Handler.Handle(new ResetPageAnswersRequest(ApplicationId, SectionId, "1"), CancellationToken.None);

            var getPageResponse = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, "1"), CancellationToken.None);
            getPageResponse.Value.PageOfAnswers.Should().BeEmpty();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\ApplicationController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.ApplicationController._logger
private readonly ILogger<ApplicationController> _logger;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\UpsertFeedback\UpsertFeedbackHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.UpsertFeedback.UpsertFeedbackHandler.Handle
public async Task<HandlerResponse<Page>> Handle(UpsertFeedbackRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.ApplicationSections.SingleOrDefaultAsync(sec => sec.ApplicationId == request.ApplicationId && sec.Id == request.SectionId, cancellationToken);
            if (section is null) return new HandlerResponse<Page>(success: false, message: $"SectionId {request.SectionId} does not exist in ApplicationId {request.ApplicationId}");

            var qnaData = new QnAData(section.QnAData);

            var page = qnaData.Pages.SingleOrDefault(p => p.PageId == request.PageId);
            if (page is null) return new HandlerResponse<Page>(success: false, message: $"PageId {request.PageId} does not exist");

            if (page.Feedback is null)
            {
                page.Feedback = new List<Feedback>();
            }

            if (page.Feedback.All(f => f.Id != request.Feedback.Id))
            {
                request.Feedback.Date = SystemTime.UtcNow();
                request.Feedback.IsNew = true;
                page.Feedback.Add(request.Feedback);
            }
            else
            {
                var existingFeedback = page.Feedback.Single(f => f.Id == request.Feedback.Id);
                existingFeedback.Date = request.Feedback.Date;
                existingFeedback.From = request.Feedback.From;
                existingFeedback.Message = request.Feedback.Message;
                existingFeedback.IsCompleted = request.Feedback.IsCompleted;
                existingFeedback.IsNew = request.Feedback.IsNew;
            }

            section.QnAData = qnaData;
            await _dataContext.SaveChangesAsync(cancellationToken);

            return new HandlerResponse<Page>(page);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\When_page_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_page_found.Then_page_complete_is_false
[Test]
        public async Task Then_page_complete_is_false()
        {
            await Handler.Handle(new ResetPageAnswersRequest(ApplicationId, SectionId, "1"), CancellationToken.None);

            var getPageResponse = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, "1"), CancellationToken.None);
            getPageResponse.Value.Complete.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Authentication\AuthenticationExtensions.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Authentication.AuthenticationExtensions.AddApiAuthentication
public static IServiceCollection AddApiAuthentication(this IServiceCollection services, ServiceProvider serviceProvider)
        {
            var azureActiveDirectoryConfiguration = serviceProvider.GetService<IOptions<AzureActiveDirectoryConfiguration>>().Value;

            services.AddAuthentication(auth =>
            {
                auth.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;

            }).AddJwtBearer(auth =>
            {
                auth.Authority = $"https://login.microsoftonline.com/{azureActiveDirectoryConfiguration.Tenant}";
                auth.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters
                {
                    ValidAudiences = azureActiveDirectoryConfiguration.Identifier.Split(",")
                };
            });

            services.AddSingleton<IClaimsTransformation, AzureAdScopeClaimTransformation>();
            return services;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.PagesController._mediator
private readonly IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.PagesController._logger
private readonly ILogger<PagesController> _logger;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_a_branching_condition_is_question_tag.Then_the_condition_passes_if_answer_is_one_of_matching_values_when_contains_is_set
[Test]
#if (!DEBUG)
        [Ignore("Must be tested on local DEV machine as it uses local Azure storage")]
#endif
        public async Task Then_the_condition_passes_if_answer_is_one_of_matching_values_when_contains_is_set()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId, "Possibly,Maybe", "", "Possibly");

            var response = await Handler.Handle(new SubmitPageOfFilesRequest(applicationId, sectionId, "100", new FormFileCollection
            {
                GenerateFile("This is a dummy file", "Q1", "Possibly")
            }), CancellationToken.None);

            response.Value.NextActionId.Should().Be("103");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.PagesController.PagesController
public PagesController(ILogger<PagesController> logger, IMediator mediator)
        {
            _logger = logger;
            _mediator = mediator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Handlers\ResetPagesToIncompleteHandlerTests.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Handlers.ResetPagesToIncompleteHandlerTests.Handle_AllMatchingPageIds_ResetsNoPagesToIncomplete
[Test]
        public async Task Handle_AllMatchingPageIds_ResetsNoPagesToIncomplete()
        {
            var pages = new List<Page>
            {
                new Page { PageId = "Page1", Complete = true },
                new Page { PageId = "Page2", Complete = true },
                new Page { PageId = "Page3", Complete=true },
                new Page { PageId = "Page4", Complete = true},
                new Page { PageId = "Page5", Complete = true}
            };
            var pagesToExclude = new List<string>
            {
                "Page1",
                "Page2",
                "Page3",
                "Page4",
                "Page5"
            };

            var applicationSection = new ApplicationSection
            {
                ApplicationId = _applicationId,
                SequenceNo = SequenceNo,
                SectionNo = SectionNo,
                QnAData = new QnAData { Pages = pages }
            };

            await DataContext.ApplicationSections.AddAsync(applicationSection);
            await DataContext.SaveChangesAsync();
            var request = new ResetPagesToIncompleteRequest(_applicationId, SequenceNo, SectionNo, pagesToExclude);

            var result = await _handler.Handle(request, new CancellationToken());

            var updatedPages = DataContext.ApplicationSections.First().QnAData.Pages;

            Assert.AreEqual(5, updatedPages.Count);

            foreach (var page in updatedPages)
            {
                Assert.IsTrue(page.Complete);
            }

            Assert.IsTrue(result.Value);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\FileControllerTests\When_download_file_or_zip_of_files_is_called.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.FileControllerTests.When_download_file_or_zip_of_files_is_called._logger
private ILogger<FileController> _logger;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\AddPageAnswerHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.AddPageAnswer.AddPageAnswerHandler.Handle
public async Task<HandlerResponse<AddPageAnswerResponse>> Handle(AddPageAnswerRequest request, CancellationToken cancellationToken)
        {
            await GetSectionAndPage(request.ApplicationId, request.SectionId, request.PageId);

            if (Application == null || Section == null || Page == null)
            {
                return new HandlerResponse<AddPageAnswerResponse>(false, $"ApplicationId {request.ApplicationId}, Section {request.SectionId} or PageId {request.PageId} does not exist.");
            }

            if (Page.AllowMultipleAnswers == false)
            {
                return new HandlerResponse<AddPageAnswerResponse>(false, $"ApplicationId {request.ApplicationId}, Section {request.SectionId}, PageId {request.PageId} does not AllowMultipleAnswers");
            }

            if (Page.PageOfAnswers == null)
            {
                Page.PageOfAnswers = new List<PageOfAnswers>();
            }

            var validationErrors = _answerValidator.Validate(request.Answers, Page);
            if (validationErrors.Any())
            {
                return new HandlerResponse<AddPageAnswerResponse>(new AddPageAnswerResponse(validationErrors));
            }

            Page.PageOfAnswers.Add(new PageOfAnswers() { Id = Guid.NewGuid(), Answers = request.Answers });

            Page.Complete = true;

            MarkFeedbackComplete(Page);

            Section.QnAData = QnaData;

            await _dataContext.SaveChangesAsync(CancellationToken.None);

            return new HandlerResponse<AddPageAnswerResponse>(new AddPageAnswerResponse(Page));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\MonthAndYearNotInFutureValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.MonthAndYearNotInFutureValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", true)]
        [TestCase(",", true)]
        [TestCase("01,0001", true)]
        [TestCase("11,2019", true)]
        [TestCase("12,9999", false)]
        public void Then_correct_errors_are_returned(string input, bool isValid)
        {
            var validator = new MonthAndYearNotInFutureValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Date not in the future",
                    Name = "MonthAndYearNotInFuture"
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\NumberValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.NumberValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", true)]
        [TestCase("one", false)]
        [TestCase("invalid", false)]
        [TestCase("pi", false)]
        [TestCase("infinity", false)]
        [TestCase("NaN", false)]
        [TestCase("-1", true)]
        [TestCase("0", true)]
        [TestCase("1", true)]
        [TestCase(byte.MinValue, true)]
        [TestCase(byte.MaxValue, true)]
        [TestCase(int.MinValue, true)]
        [TestCase(int.MaxValue, true)]
        [TestCase(long.MinValue, true)]
        [TestCase(long.MaxValue, true)]
        [TestCase(ulong.MinValue, true)]
        [TestCase(ulong.MaxValue, true)]
        [TestCase("-987654321012345678987654321", true)]
        [TestCase("987654321012345678987654321", true)]
        public void Then_correct_errors_are_returned(object input, bool isValid)
        {
            var validator = new NumberValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Not a valid Number",
                    Name = "Number"
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input?.ToString(), QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowSectionsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.WorkflowSectionsController.UpsertWorkflowSection
[HttpPut("{projectId}/sections/{sectionId}")]
        public async Task<ActionResult<WorkflowSection>> UpsertWorkflowSection(Guid projectId, Guid sectionId, [FromBody] WorkflowSection section)
        {
            var upsertWorkflowSectionResponse = await _mediator.Send(new UpsertWorkflowSectionRequest(projectId, sectionId, section));
            if (!upsertWorkflowSectionResponse.Success) return BadRequest(new BadRequestError(upsertWorkflowSectionResponse.Message));

            return upsertWorkflowSectionResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\ValidationDefinition.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.ValidationDefinition.Name
public string Name { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\ValidationDefinition.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.ValidationDefinition.Value
public string Value { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\ValidationDefinition.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.ValidationDefinition.ErrorMessage
public string ErrorMessage { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Projects\GetProject\GetProjectRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Projects.GetProject.GetProjectRequest.GetProjectRequest
public GetProjectRequest(Guid projectId)
        {
            ProjectId = projectId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSections\GetWorkflowSections\GetWorkflowSectionsRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSections.GetWorkflowSections.GetWorkflowSectionsRequest.GetWorkflowSectionsRequest
public GetWorkflowSectionsRequest(Guid projectId)
        {
            ProjectId = projectId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\FeedbackController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.FeedbackController.FeedbackController
public FeedbackController(ILogger<FeedbackController> logger, IMediator mediator)
        {
            _logger = logger;
            _mediator = mediator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\FileTypeValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.FileTypeValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", "pdf", true)]
        [TestCase("test.txt", "pdf", false)]
        [TestCase("test.pdf.txt", "pdf", false)]
        [TestCase("test.pdf", "pdf", true)]
        [TestCase("test.txt.pdf", "pdf", true)]
        [TestCase("    Mary  had   a   little lamb .pdf", "pdf", true)]
        [TestCase("Mary had a little lamb, its fleece was white as snow.pdf", "pdf", true)]
        public void Then_correct_errors_are_returned(string input, string filetype, bool isValid)
        {
            var validator = new FileTypeValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Incorrect FileType",
                    Name = "FileType",
                    Value = filetype
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\PageHandlerBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.AddPageAnswer.PageHandlerBase._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\MinWordCountValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.MinWordCountValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", "10", true)]
        [TestCase("Mary had a little lamb", "10", false)]
        [TestCase("    Mary  had   a   little lamb ", "10", false)]
        [TestCase("Mary had a little lamb, its fleece was white as snow", "10", true)]
        [TestCase("   Mary had a     little lamb, its fleece was white as snow                   ", "10", true)]
        public void Then_correct_errors_are_returned(string input, string wordLimit, bool isValid)
        {
            var validator = new MinWordCountValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Word count not achieved",
                    Name = "MinWordCount",
                    Value = wordLimit
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\PageHandlerBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.AddPageAnswer.PageHandlerBase.Section
protected ApplicationSection Section;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\PageHandlerBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.AddPageAnswer.PageHandlerBase.Application
protected Data.Entities.Application Application;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.DeactivateDependentPages
protected void DeactivateDependentPages(Next chosenAction, string branchingPageId, QnAData qnaData, Page page, bool subPages = false)
        {
            if (chosenAction != null && page != null)
            {
                // process all sub pages or those which are not the chosen action
                foreach (var nextAction in page.Next.Where(n => subPages || !(n.Action == chosenAction.Action && n.ReturnId == chosenAction.ReturnId)))
                {
                    if ("NextPage".Equals(nextAction.Action, StringComparison.InvariantCultureIgnoreCase))
                    {
                        var nextPage = qnaData.Pages.FirstOrDefault(p => p.PageId == nextAction.ReturnId);
                        if (nextPage != null)
                        {
                            if (nextPage.ActivatedByPageId != null && nextPage.ActivatedByPageId.Split(",", StringSplitOptions.RemoveEmptyEntries).Contains(branchingPageId))
                            {
                                nextPage.Active = false;
                            }

                            foreach (var nextPagesAction in nextPage.Next)
                            {
                                DeactivateDependentPages(nextPagesAction, nextPage.PageId, qnaData, nextPage, true);
                            }
                        }
                    }
                }
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\EmailTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.EmailTypeValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\ApplicationDataController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.ApplicationDataController._mediator
private readonly IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\PageHandlerBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.AddPageAnswer.PageHandlerBase.QnaData
protected QnAData QnaData;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileService.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileService.GetFileStream
private async Task<Tuple<Stream, string>> GetFileStream(CancellationToken cancellationToken, CloudBlobDirectory directory, string blobName)
        {
            var blobReference = directory.GetBlobReference(blobName);
            var blobStream = new MemoryStream();

            await blobReference.DownloadToStreamAsync(blobStream, null, new BlobRequestOptions() { DisableContentMD5Validation = true }, null, cancellationToken);
            blobStream.Position = 0;

            var decryptedStream = _encryptionService.Decrypt(blobStream);

            return new Tuple<Stream, string>(decryptedStream, blobReference.Properties.ContentType);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\ApplicationDataController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.ApplicationDataController.ApplicationDataController
public ApplicationDataController(IMediator mediator)
        {
            _mediator = mediator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\PageHandlerBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.AddPageAnswer.PageHandlerBase.Page
protected Page Page;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\EmailTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.EmailTypeValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text) && !IsValidEmail(text))
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\PageHandlerBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.AddPageAnswer.PageHandlerBase.PageHandlerBase
public PageHandlerBase(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\AzureTableStorageConfigurationSource.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Configuration.Infrastructure.AzureTableStorageConfigurationSource._connection
private readonly string _connection;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.PagesController.GetPage
[HttpGet("{applicationId}/sections/{sectionId}/pages/{pageId}")]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<Page>> GetPage(Guid applicationId, Guid sectionId, string pageId)
        {
            var pageResponse = await _mediator.Send(new GetPageRequest(applicationId, sectionId, pageId), CancellationToken.None);
            if (!pageResponse.Success)
            {
                _logger.LogError($"Unable to find page {pageId} | Reason : {pageResponse.Message}");
                return NotFound();
            }

            return pageResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\PageHandlerBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.AddPageAnswer.PageHandlerBase.GetSectionAndPage
public async Task GetSectionAndPage(Guid applicationId, Guid sectionId, string pageId)
        {
            Application = await _dataContext.Applications.SingleOrDefaultAsync(app => app.Id == applicationId);
            Section = await _dataContext.ApplicationSections.SingleOrDefaultAsync(sec => sec.Id == sectionId && sec.ApplicationId == applicationId);
            if (Section != null)
            {
                QnaData = new QnAData(Section.QnAData);
                Page = QnaData.Pages.SingleOrDefault(p => p.PageId == pageId);
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\PageHandlerBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.AddPageAnswer.PageHandlerBase.MarkFeedbackComplete
protected void MarkFeedbackComplete(Page page)
        {
            if (page.HasFeedback)
            {
                page.Feedback.ForEach(f => f.IsCompleted = true);
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\AzureTableStorageConfigurationSource.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Configuration.Infrastructure.AzureTableStorageConfigurationSource._environment
private readonly string _environment;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\EmailTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.EmailTypeValidator.IsValidEmail
private static bool IsValidEmail(string email)
        {
            try
            {
                return Regex.IsMatch(email,
                    @"^[-!#$%&'*+/0-9=?A-Z^_a-z{|}~](\.?[-!#$%&'*+/0-9=?A-Z^_a-z{|}~])*@[a-zA-Z](-?[a-zA-Z0-9])*(\.[a-zA-Z](-?[a-zA-Z0-9])*)+$");
            }
            catch (ArgumentException)
            {
                return false;
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\DateTypeValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.DateTypeValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", false)]
        [TestCase(",,", false)]
        [TestCase("01,01,0001", true)]
        [TestCase("01,11,2019", true)]
        [TestCase("31,12,9999", true)]
        public void Then_correct_errors_are_returned(string input, bool isValid)
        {
            var validator = new DateTypeValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Answer must be a valid date",
                    Name = "Date"
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPageAnswers\ResetPageAnswersBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetPageAnswersBySectionNoRequest.SequenceNo
public int SequenceNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPageAnswers\ResetPageAnswersBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetPageAnswersBySectionNoRequest.SectionNo
public int SectionNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSequences\GetWorkflowSequences\GetWorkflowSequencesRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSequences.GetWorkflowSequences.GetWorkflowSequencesRequest.GetWorkflowSequencesRequest
public GetWorkflowSequencesRequest(Guid workflowId)
        {
            WorkflowId = workflowId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\AzureTableStorageConfigurationSource.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Configuration.Infrastructure.AzureTableStorageConfigurationSource._version
private readonly string _version;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPageAnswers\ResetPageAnswersBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetPageAnswersBySectionNoRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPageAnswers\ResetPageAnswersRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetPageAnswersRequest.SectionId
public Guid SectionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\CreateSnapshot\CreateSnapshotHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.CreateSnapshot.CreateSnapshotHandler.CopySequences
private async Task CopySequences(Data.Entities.Application currentApplication, Data.Entities.Application newApplication, CancellationToken cancellationToken)
        {
            var sequences = await _dataContext.ApplicationSequences.AsNoTracking()
                .Where(seq => seq.ApplicationId == currentApplication.Id).ToListAsync(cancellationToken);

            var newApplicationSequences = sequences.Select(seq => new ApplicationSequence
            {
                ApplicationId = newApplication.Id,
                SequenceNo = seq.SequenceNo,
                IsActive = seq.IsActive
            }).ToList();

            await _dataContext.ApplicationSequences.AddRangeAsync(newApplicationSequences, cancellationToken);
            await _dataContext.SaveChangesAsync(cancellationToken);
            _logger.LogInformation($"Created ApplicationSequence entities for Application: {newApplication.Id}");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPageAnswers\ResetPageAnswersBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetPageAnswersBySectionNoRequest.ResetPageAnswersBySectionNoRequest
public ResetPageAnswersBySectionNoRequest(Guid applicationId, int sequenceNo, int sectionNo, string pageId)
        {
            ApplicationId = applicationId;
            SequenceNo = sequenceNo;
            SectionNo = sectionNo;
            PageId = pageId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPageAnswers\ResetPageAnswersRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetPageAnswersRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPageAnswers\ResetPageAnswersRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetPageAnswersRequest.ResetPageAnswersRequest
public ResetPageAnswersRequest(Guid applicationId, Guid sectionId, string pageId)
        {
            ApplicationId = applicationId;
            SectionId = sectionId;
            PageId = pageId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\NumberTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.NumberTypeValidator.IsValidNumber
private static bool IsValidNumber(string number)
        {
            var isValid = long.TryParse(number, out var _);

            if (!isValid)
            {
                try
                {
                    // Fall back to RegEx in case it's a huge positive/negative number
                    isValid = Regex.IsMatch(number, @"^[+-]?[\d]*$");
                }
                catch (ArgumentException)
                {
                    isValid = false;
                }
            }

            return isValid;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationStatus.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Data.Entities.ApplicationStatus.Submitted
public const string Submitted = "Submitted";
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationStatus.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Data.Entities.ApplicationStatus.FeedbackAdded
public const string FeedbackAdded = "FeedbackAdded";
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Workflow.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Workflow.Status
public string Status { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\NumberValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.NumberValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_page_allows_multiple_answers.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_page_allows_multiple_answers.Then_validation_error_occurs
[Test]
        public async Task Then_validation_error_occurs()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId);

            var response = await Handler.Handle(new SetPageAnswersRequest(applicationId, sectionId, "100", new List<Answer>
            {
                new Answer { QuestionId = "Q1", Value = "['1', '2']" }
            }), CancellationToken.None);

            response.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Workflow.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Workflow.Description
public string Description { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.ResetPageAnswers
protected async Task ResetPageAnswers(string pageId, Guid applicationId, ApplicationSection section, CancellationToken cancellationToken, bool completeFeedback = true, bool removeFeedback = false)
        {
            if (section != null)
            {
                var page = section.QnAData?.Pages.SingleOrDefault(p => p.PageId == pageId);

                if (page != null)
                {
                    page.PageOfAnswers = new List<PageOfAnswers>();
                    page.Complete = false;

                    if (removeFeedback)
                    {
                        RemovePageFeedback(page);
                    }
                    else if (completeFeedback)
                    {
                        MarkPageFeedbackAsComplete(page);
                    }

                    // Assign QnAData using a new object so Entity Framework will pick up changes
                    section.QnAData = new QnAData(section.QnAData);
                }

                var application = await _dataContext.Applications.SingleOrDefaultAsync(app => app.Id == applicationId, cancellationToken);
                UpdateApplicationData(pageId, new List<Answer>(), section, application);

                var nextAction = GetNextActionForPage(section, application, pageId);
                var checkboxListAllNexts = GetCheckboxListMatchingNextActionsForPage(section, application, pageId);

                SetStatusOfNextPagesBasedOnDeemedNextActions(section, pageId, nextAction, checkboxListAllNexts);
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\NumberValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.NumberValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text) && !IsValidNumber(text))
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\ApplicationController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.ApplicationController.StartApplication
[HttpPost("start")]
        [ProducesResponseType((int)HttpStatusCode.Created)]
        [ProducesResponseType((int)HttpStatusCode.BadRequest)]
        public async Task<ActionResult> StartApplication([FromBody] StartApplicationRequest request)
        {
            var newApplicationResponse = await _mediator.Send(request);

            if (!newApplicationResponse.Success)
            {
                _logger.LogError($"Unable to start application | Reason : {newApplicationResponse.Message}");
                return BadRequest(new BadRequestError(newApplicationResponse.Message));
            }

            return Ok(new { newApplicationResponse.Value.ApplicationId });
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Workflow.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Workflow.Version
public string Version { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\NumberValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.NumberValidator.IsValidNumber
private static bool IsValidNumber(string number)
        {
            var isValid = long.TryParse(number, out var _);

            if (!isValid)
            {
                try
                {
                    // Fall back to RegEx in case it's a huge positive/negative number
                    isValid = Regex.IsMatch(number, @"^[+-]?[\d]*$");
                }
                catch (ArgumentException)
                {
                    isValid = false;
                }
            }

            return isValid;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Workflow.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Workflow.Type
public string Type { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\SectionsControllerTests\GetSection\When_GetSection_is_called_with_a_sectionNo.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.SectionsControllerTests.GetSection.When_GetSection_is_called_with_a_sectionNo.And_Section_exists_Then_Section_is_returned
[Test]
        public async Task And_Section_exists_Then_Section_is_returned()
        {
            var applicationId = Guid.NewGuid();
            var sequenceNo = 1;
            var sectionNo = 1;

            var mediator = Substitute.For<IMediator>();

            mediator.Send(Arg.Any<GetSectionBySectionNoRequest>()).Returns(new HandlerResponse<Section>(new Section()
            {
                Id = Guid.NewGuid(),
                SequenceNo = sequenceNo,
                SectionNo = sectionNo,
                ApplicationId = applicationId
            }));

            var sectionController = new SectionsController(mediator);

            var result = await sectionController.GetSectionBySectionNo(applicationId, sequenceNo, sectionNo);

            result.Value.Should().BeOfType<Section>();
            result.Value.SequenceNo.Should().Be(sequenceNo);
            result.Value.SectionNo.Should().Be(sectionNo);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_page_allows_multiple_answers.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_page_allows_multiple_answers.SetupQuestionData
private async Task SetupQuestionData(Guid applicationId, Guid sectionId)
        {
            await DataContext.ApplicationSections.AddAsync(new ApplicationSection()
            {
                ApplicationId = applicationId,
                Id = sectionId,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page()
                        {
                            PageId = "100",
                            AllowMultipleAnswers = true,
                            Questions = new List<Question>
                            {
                                new Question { QuestionId = "Q1", Input = new Input { Type = "TextArea" }}
                            },
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>(),
                            Active = true
                        }
                    }
                }
            }); ;

            await DataContext.Applications.AddAsync(new Data.Entities.Application() { Id = applicationId, ApplicationData = "{}" });

            await DataContext.SaveChangesAsync();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Infrastructure\ApiError.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Infrastructure.ApiError.StatusDescription
public string StatusDescription { get; private set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Workflow.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Workflow.ProjectId
public Guid ProjectId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\CreateSnapshot\CreateSnapshotHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.CreateSnapshot.CreateSnapshotHandler.CreateNewApplication
private async Task<Data.Entities.Application> CreateNewApplication(Data.Entities.Application application, CancellationToken cancellationToken)
        {
            var newApplication = new Data.Entities.Application
            {
                ApplicationStatus = application.ApplicationStatus,
                WorkflowId = application.WorkflowId,
                Reference = application.Reference,
                CreatedAt = SystemTime.UtcNow(),
                ApplicationData = application.ApplicationData
            };

            _dataContext.Applications.Add(newApplication);
            await _dataContext.SaveChangesAsync(cancellationToken);
            _logger.LogInformation($"Created Application entity: {newApplication.Id}");

            return newApplication;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Infrastructure\ApiError.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Infrastructure.ApiError.Message
[JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        [JsonInclude]
        public string Message { get; private set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Workflow.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Workflow.ApplicationDataSchema
public string ApplicationDataSchema { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\AzureTableStorageConfigurationSource.cs
BlockTypes.METHOD, SFA.DAS.QnA.Configuration.Infrastructure.AzureTableStorageConfigurationSource.AzureTableStorageConfigurationSource
public AzureTableStorageConfigurationSource(string connection, string appName, string environment, string version)
        {
            _appName = appName;
            _connection = connection;
            _environment = environment;
            _version = version;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Infrastructure\ApiError.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Infrastructure.ApiError.ApiError
public ApiError(int statusCode, string statusDescription)
        {
            this.StatusCode = statusCode;
            this.StatusDescription = statusDescription;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\ApplicationData\GetApplicationData\GetQuestionTagDataRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.ApplicationData.GetApplicationData.GetQuestionTagDataRequest.QuestionTag
public string QuestionTag { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\StartApplicationTests\StartApplicationTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.StartApplicationTests.StartApplicationTestBase.Handler
protected StartApplicationHandler Handler;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Authorization\AuthorizationPolicyBuilderExtensions.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Authorization.AuthorizationPolicyBuilderExtensions.AllowAnonymousUser
public static AuthorizationPolicyBuilder AllowAnonymousUser(this AuthorizationPolicyBuilder builder)
        {
            builder.Requirements.Add(new NoneRequirement());
            return builder;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Infrastructure\ApiError.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Infrastructure.ApiError.ApiError
public ApiError(int statusCode, string statusDescription, string message)
            : this(statusCode, statusDescription)
        {
            this.Message = message;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\ApplicationData\GetApplicationData\GetQuestionTagDataRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.ApplicationData.GetApplicationData.GetQuestionTagDataRequest.GetQuestionTagDataRequest
public GetQuestionTagDataRequest(Guid applicationId, string questionTag)
        {
            ApplicationId = applicationId;
            QuestionTag = questionTag;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Mappings\ApplicationsProfile.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Mappings.ApplicationsProfile.ApplicationsProfile
public ApplicationsProfile()
        {
            CreateMap<ApplicationSequence, Sequence>();
            CreateMap<ApplicationSection, Section>();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\AddressTownOrCityRequiredValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.AddressTownOrCityRequiredValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetWorkflowsHandlerTests\When_GetWorkflows_handled.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetWorkflowsHandlerTests.When_GetWorkflows_handled.Then_only_live_workflows_are_returned
[Test]
        public async Task Then_only_live_workflows_are_returned()
        {
            var dbContextOptions = new DbContextOptionsBuilder<QnaDataContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;

            var context = new QnaDataContext(dbContextOptions);

            var projectId = Guid.NewGuid();

            context.Workflows.AddRange(new[]
            {
                new Workflow(){Id = Guid.NewGuid(), Status = WorkflowStatus.Live, ProjectId = projectId},
                new Workflow(){Id = Guid.NewGuid(), ProjectId = projectId},
                new Workflow(){Id = Guid.NewGuid(), Status = WorkflowStatus.Live, ProjectId = projectId},
            });

            await context.SaveChangesAsync();

            var mapper = new Mapper(new MapperConfiguration(config => { config.AddMaps(AppDomain.CurrentDomain.GetAssemblies()); }));

            var handler = new GetWorkflowsHandler(context, mapper);

            var results = await handler.Handle(new GetWorkflowsRequest(projectId), CancellationToken.None);

            results.Value.Should().BeOfType<List<Workflow>>();
            results.Value.Count.Should().Be(2);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Infrastructure\ServiceCollectionExtensions.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Infrastructure.ServiceCollectionExtensions.RegisterAllTypes
public static void RegisterAllTypes<T>(this IServiceCollection services, Assembly[] assemblies,
            ServiceLifetime lifetime = ServiceLifetime.Transient)
        {
            var typesFromAssemblies = assemblies.SelectMany(a => a.DefinedTypes.Where(x => x.GetInterfaces().Contains(typeof(T))));
            foreach (var type in typesFromAssemblies)
                services.Add(new ServiceDescriptor(typeof(T), type, lifetime));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetPageAnswersBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetPageAnswersBySectionNoRequest.SequenceNo
public int SequenceNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequence\GetSequenceBySequenceNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetSequence.GetSequenceBySequenceNoRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetPageAnswersBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetPageAnswersBySectionNoRequest.SectionNo
public int SectionNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\StartApplicationTests\StartApplicationTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.StartApplicationTests.StartApplicationTestBase.WorkflowId
protected Guid WorkflowId;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\NumberTypeValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.NumberTypeValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", true)]
        [TestCase("one", false)]
        [TestCase("invalid", false)]
        [TestCase("pi", false)]
        [TestCase("infinity", false)]
        [TestCase("NaN", false)]
        [TestCase("-1", true)]
        [TestCase("0", true)]
        [TestCase("1", true)]
        [TestCase(byte.MinValue, true)]
        [TestCase(byte.MaxValue, true)]
        [TestCase(int.MinValue, true)]
        [TestCase(int.MaxValue, true)]
        [TestCase(long.MinValue, true)]
        [TestCase(long.MaxValue, true)]
        [TestCase(ulong.MinValue, true)]
        [TestCase(ulong.MaxValue, true)]
        [TestCase("-987654321012345678987654321", true)]
        [TestCase("987654321012345678987654321", true)]
        public void Then_correct_errors_are_returned(object input, bool isValid)
        {
            var validator = new NumberTypeValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Answer must be a valid number",
                    Name = "Number"
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input?.ToString(), QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetPageAnswersBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetPageAnswersBySectionNoRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowSectionsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.WorkflowSectionsController.CreateWorkflowSection
[HttpPost("{projectId}/sections")]
        public async Task<ActionResult<WorkflowSection>> CreateWorkflowSection(Guid projectId, [FromBody] WorkflowSection section)
        {
            var createWorkflowSectionResponse = await _mediator.Send(new CreateWorkflowSectionRequest(projectId, section));
            if (!createWorkflowSectionResponse.Success) return BadRequest(new BadRequestError(createWorkflowSectionResponse.Message));

            return createWorkflowSectionResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetPageAnswersBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetPageAnswersBySectionNoRequest.Answers
public List<Answer> Answers { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\When_application_exists.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.When_application_exists.Then_snapshot_is_created
[Test]
#if (!DEBUG)
        [Ignore("Must be tested on local DEV machine as it uses local Azure storage")]
#endif
        public async Task Then_snapshot_is_created()
        {
            var snapshot = await Handler.Handle(new CreateSnapshotRequest(ApplicationId), new System.Threading.CancellationToken());

            Assert.IsTrue(snapshot.Success);
            Assert.AreNotEqual(ApplicationId, snapshot.Value.ApplicationId);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetPageAnswersBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetPageAnswersBySectionNoRequest.SetPageAnswersBySectionNoRequest
public SetPageAnswersBySectionNoRequest(Guid applicationId, int sequenceNo, int sectionNo, string pageId, List<Answer> answers)
        {
            ApplicationId = applicationId;
            PageId = pageId;
            Answers = answers;
            SequenceNo = sequenceNo;
            SectionNo = sectionNo;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\When_application_exists.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.When_application_exists.Then_snapshot_has_copied_over_files_successfully
[Test]
#if (!DEBUG)
        [Ignore("Must be tested on local DEV machine as it uses local Azure storage")]
#endif
        public async Task Then_snapshot_has_copied_over_files_successfully()
        {
            var snapshot = await Handler.Handle(new CreateSnapshotRequest(ApplicationId), new System.Threading.CancellationToken());
            Assert.IsTrue(snapshot.Success);

            var section = DataContext.ApplicationSections.SingleOrDefault(sec => sec.ApplicationId == snapshot.Value.ApplicationId);
            var page = section?.QnAData.Pages.SingleOrDefault(p => p.PageId == PageId);
            var answer = page?.PageOfAnswers.SelectMany(pao => pao.Answers).SingleOrDefault(ans => ans.QuestionId == QuestionId);

            Assert.IsNotNull(answer);
            Assert.AreEqual(Filename, answer.Value);
            Assert.IsTrue(FileExists(section.ApplicationId, section.SequenceId, section.Id, page.PageId, answer.QuestionId, answer.Value, Container));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.ActivateDependentPages
protected void ActivateDependentPages(Next chosenAction, string branchingPageId, QnAData qnaData, Page page)
        {
            if (chosenAction != null && page != null)
            {
                // process sub pages which are the chosen action
                foreach (var nextAction in page.Next.Where(n => n.Action == chosenAction.Action && n.ReturnId == chosenAction.ReturnId))
                {
                    if ("NextPage".Equals(nextAction.Action, StringComparison.InvariantCultureIgnoreCase))
                    {
                        var nextPage = qnaData.Pages.FirstOrDefault(p => p.PageId == nextAction.ReturnId);
                        if (nextPage != null)
                        {
                            if (nextPage.ActivatedByPageId != null && nextPage.ActivatedByPageId.Split(",", StringSplitOptions.RemoveEmptyEntries).Contains(branchingPageId))
                            {
                                nextPage.Active = true;

                                foreach (var nextPagesAction in nextPage.Next)
                                {
                                    ActivateDependentPages(nextPagesAction, branchingPageId, qnaData, nextPage);
                                }
                            }
                        }
                    }
                }
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetCurrentSequence\GetCurrentSequenceHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sequences.GetCurrentSequence.GetCurrentSequenceHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\StartApplicationTests\StartApplicationTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.StartApplicationTests.StartApplicationTestBase.SetUp
[SetUp]
        public async Task SetUp()
        {
            DataContext = DataContextHelpers.GetInMemoryDataContext();

            var applicationDataValidator = Substitute.For<IApplicationDataValidator>();
            applicationDataValidator.IsValid("", "").ReturnsForAnyArgs(true);
            var logger = Substitute.For<ILogger<StartApplicationHandler>>();
            Handler = new StartApplicationHandler(DataContext, applicationDataValidator, logger);

            WorkflowId = Guid.NewGuid();

            var projectId = Guid.NewGuid();
            await DataContext.Workflows.AddAsync(
                new Workflow() { Type = "EPAO", Status = WorkflowStatus.Live, Id = WorkflowId, ProjectId = projectId });

            var workflowSections = new[]
            {
                new WorkflowSection {Id = Guid.NewGuid(), Title = "Section 1", QnAData = new QnAData(){Pages = new List<Page>()
                {
                    new Page() {Title = "[PageTitleToken1]"},
                    new Page() {Title = "[PageTitleToken2]"}
                }}},
                new WorkflowSection {Id = Guid.NewGuid(), Title = "Section 2", QnAData = new QnAData(){Pages = new List<Page>()}},
                new WorkflowSection {Id = Guid.NewGuid(), Title = "Section 3", QnAData = new QnAData(){Pages = new List<Page>()}},
                new WorkflowSection {Id = Guid.NewGuid(), Title = "Section 4", QnAData = new QnAData(){Pages = new List<Page>()}},
                new WorkflowSection {Id = Guid.NewGuid(), Title = "Invalid section", QnAData = new QnAData(){Pages = new List<Page>()}}
            };

            await DataContext.WorkflowSections.AddRangeAsync(workflowSections);

            await DataContext.WorkflowSequences.AddRangeAsync(new[]
            {
                new WorkflowSequence {WorkflowId = WorkflowId, SectionId = workflowSections[0].Id, SectionNo = 1, SequenceNo = 1, IsActive = true},
                new WorkflowSequence {WorkflowId = WorkflowId, SectionId = workflowSections[1].Id, SectionNo = 2, SequenceNo = 1, IsActive = true},
                new WorkflowSequence {WorkflowId = WorkflowId, SectionId = workflowSections[2].Id, SectionNo = 3, SequenceNo = 1, IsActive = true},
                new WorkflowSequence {WorkflowId = WorkflowId, SectionId = workflowSections[3].Id, SectionNo = 4, SequenceNo = 2, IsActive = false},
                new WorkflowSequence {WorkflowId = Guid.NewGuid()},
                new WorkflowSequence {WorkflowId = Guid.NewGuid()},
            });

            await DataContext.Projects.AddAsync(new Project { Id = projectId, ApplicationDataSchema = "" });

            await DataContext.SaveChangesAsync();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetCurrentSequence\GetCurrentSequenceHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sequences.GetCurrentSequence.GetCurrentSequenceHandler._mapper
private readonly IMapper _mapper;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_a_branching_condition_is_question_tag.GetSection
private ApplicationSection GetSection(Guid applicationId, Guid sectionId)
        {
            return DataContext.ApplicationSections.FirstOrDefault(sec => sec.ApplicationId == applicationId && sec.Id == sectionId);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\ApplicationData\GetApplicationData\GetQuestionTagDataRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.ApplicationData.GetApplicationData.GetQuestionTagDataRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetCurrentSequence\GetCurrentSequenceHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetCurrentSequence.GetCurrentSequenceHandler.GetCurrentSequenceHandler
public GetCurrentSequenceHandler(QnaDataContext dataContext, IMapper mapper)
        {
            _dataContext = dataContext;
            _mapper = mapper;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetCurrentSequence\GetCurrentSequenceHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetCurrentSequence.GetCurrentSequenceHandler.Handle
public async Task<HandlerResponse<Sequence>> Handle(GetCurrentSequenceRequest request, CancellationToken cancellationToken)
        {
            var application = await _dataContext.Applications.AsNoTracking().SingleOrDefaultAsync(app => app.Id == request.ApplicationId, cancellationToken);
            if (application is null) return new HandlerResponse<Sequence>(false, "Application does not exist");

            var currentSequence = await _dataContext.ApplicationSequences.AsNoTracking().FirstOrDefaultAsync(seq => seq.ApplicationId == request.ApplicationId && seq.IsActive, cancellationToken);

            return new HandlerResponse<Sequence>(_mapper.Map<Sequence>(currentSequence));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\ResetSectionAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.ResetSectionAnswersResponse.ResetSectionAnswersResponse
public ResetSectionAnswersResponse(bool hasSectionAnswersBeenReset)
        {
            ValidationPassed = true;
            HasSectionAnswersBeenReset = hasSectionAnswersBeenReset;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\ResetSectionAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.ResetSectionAnswersResponse.ValidationErrors
public List<KeyValuePair<string, string>> ValidationErrors { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\ResetSectionAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.ResetSectionAnswersResponse.ValidationPassed
public bool ValidationPassed { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\SequencesControllerTests\GetSequence\When_GetSequence_is_called_with_a_sectionNo.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.SequenceControllerTests.GetSequence.When_GetSequence_is_called_with_a_sectionNo.And_Sequence_exists_Then_Sequence_is_returned
[Test]
        public async Task And_Sequence_exists_Then_Sequence_is_returned()
        {
            var applicationId = Guid.NewGuid();
            var sequenceNo = 1;

            var mediator = Substitute.For<IMediator>();

            mediator.Send(Arg.Any<GetSequenceBySequenceNoRequest>()).Returns(new HandlerResponse<Sequence>(new Sequence()
            {
                Id = Guid.NewGuid(),
                SequenceNo = sequenceNo,
                ApplicationId = applicationId
            }));

            var sequenceController = new SequencesController(mediator);

            var result = await sequenceController.GetSequenceBySequenceNo(applicationId, sequenceNo);

            result.Value.Should().BeOfType<Sequence>();
            result.Value.SequenceNo.Should().Be(sequenceNo);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\ResetSectionAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.ResetSectionAnswersResponse.HasSectionAnswersBeenReset
public bool HasSectionAnswersBeenReset { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\ResetSectionAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.ResetSectionAnswersResponse.ResetSectionAnswersResponse
public ResetSectionAnswersResponse(List<KeyValuePair<string, string>> validationErrors)
        {
            ValidationErrors = validationErrors;
            ValidationPassed = false;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesHandler.SaveAnswersIntoPage
private async Task SaveAnswersIntoPage(ApplicationSection section, SubmitPageOfFilesRequest request, CancellationToken cancellationToken)
        {
            if (section != null)
            {
                // Have to force QnAData a new object and reassign for Entity Framework to pick up changes
                var qnaData = new QnAData(section.QnAData);
                var page = qnaData?.Pages.SingleOrDefault(p => p.PageId == request.PageId);

                if (page != null)
                {
                    var container = await ContainerHelpers.GetContainer(_fileStorageConfig.Value.StorageConnectionString, _fileStorageConfig.Value.ContainerName);

                    foreach (var file in request.Files)
                    {
                        var questionIdFromFileName = file.Name;
                        var questionFolder = ContainerHelpers.GetDirectory(request.ApplicationId, section.SequenceId, request.SectionId, request.PageId, questionIdFromFileName, container);

                        var blob = questionFolder.GetBlockBlobReference(file.FileName);
                        blob.Properties.ContentType = file.ContentType;

                        var encryptedFileStream = _encryptionService.Encrypt(file.OpenReadStream());

                        await blob.UploadFromStreamAsync(encryptedFileStream, cancellationToken);

                        if (page.PageOfAnswers is null)
                        {
                            page.PageOfAnswers = new List<PageOfAnswers>();
                        }

                        var foundExistingOnPage = page.PageOfAnswers.SelectMany(a => a.Answers).Any(answer => answer.QuestionId == file.Name && answer.Value == file.FileName);

                        if (!foundExistingOnPage)
                        {
                            page.PageOfAnswers.Add(new PageOfAnswers
                            {
                                Id = Guid.NewGuid(),
                                Answers = new List<Answer>
                                {
                                    new Answer
                                    {
                                        QuestionId = file.Name,
                                        Value = file.FileName
                                    }
                                }
                            });
                        }
                    }

                    MarkPageAsComplete(page);
                    MarkPageFeedbackAsComplete(page);

                    // Assign QnAData back so Entity Framework will pick up changes
                    section.QnAData = qnaData;
                }
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_file_doesnt_relate_to_a_question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_file_doesnt_relate_to_a_question.Then_validation_error_occurs
[Test]
        public async Task Then_validation_error_occurs()
        {
            var response = await Handler.Handle(new SubmitPageOfFilesRequest(ApplicationId, SectionId, "1", new FormFileCollection
            {
                GenerateFile("This is a dummy file", null, "File.txt")
            }), CancellationToken.None);

            response.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Sequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Sequence.Status
public string Status { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Sequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Sequence.ApplicationId
public Guid ApplicationId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationControllerTests\StartApplication\When_StartApplication_is_called.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.ApplicationControllerTests.StartApplication.When_StartApplication_is_called_for_nonexistant_workflowtype.Logger
protected ILogger<ApplicationController> Logger;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Sequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Sequence.SequenceNo
public int SequenceNo { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\TabularDataRow.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.TabularDataRow.Id
public string Id { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationControllerTests\StartApplication\When_StartApplication_is_called.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.ApplicationControllerTests.StartApplication.When_StartApplication_is_called_for_nonexistant_workflowtype.Mediator
protected IMediator Mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Sequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Sequence.IsActive
public bool IsActive { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationControllerTests\StartApplication\When_StartApplication_is_called.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.ApplicationControllerTests.StartApplication.When_StartApplication_is_called_for_nonexistant_workflowtype.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Sequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Sequence.NotRequired
public bool NotRequired { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationControllerTests\StartApplication\When_StartApplication_is_called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.ApplicationControllerTests.StartApplication.When_StartApplication_is_called_for_nonexistant_workflowtype.SetUp
[SetUp]
        public void SetUp()
        {
            Logger = Substitute.For<ILogger<ApplicationController>>();
            Mediator = Substitute.For<IMediator>();

            Controller = new ApplicationController(Logger, Mediator);

            ApplicationId = Guid.NewGuid();
            Mediator.Send(Arg.Any<StartApplicationRequest>()).Returns(new HandlerResponse<StartApplicationResponse>() { Success = false });
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationControllerTests\StartApplication\When_StartApplication_is_called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.ApplicationControllerTests.StartApplication.When_StartApplication_is_called_for_nonexistant_workflowtype.Then_BadRequest_is_returned
[Test]
        public void Then_BadRequest_is_returned()
        {
            var result = Controller.StartApplication(new StartApplicationRequest() { UserReference = "dave", WorkflowType = "EPAO" });
            result.Result.Should().BeOfType<BadRequestObjectResult>();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\RegexValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.RegexValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", "", true)]
        [TestCase("", @"^[\d]*$", true)]
        [TestCase("Must contain digits", @"^[\d]*$", false)]
        [TestCase("12345", @"^[\d]*$", true)]
        [TestCase("Invalid regex", @"^[", false)]
        public void Then_correct_errors_are_returned(string input, string regex, bool isValid)
        {
            var validator = new RegexValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Regex match failed",
                    Name = "Regex",
                    Value = regex
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Projects\GetProject\GetProjectRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Projects.GetProject.GetProjectRequest.ProjectId
public Guid ProjectId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Question.QuestionId
public string QuestionId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.PageId
public string PageId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Question.QuestionTag
public string QuestionTag { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\PageOfAnswers.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.PageOfAnswers.Id
public Guid Id { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\GetWorkflows\GetWorkflowsHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.GetWorkflows.GetWorkflowsHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Question.Label
public string Label { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\GetWorkflows\GetWorkflowsHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.GetWorkflows.GetWorkflowsHandler._mapper
private readonly IMapper _mapper;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Question.ShortLabel
public string ShortLabel { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\GetWorkflows\GetWorkflowsHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.GetWorkflows.GetWorkflowsHandler.GetWorkflowsHandler
public GetWorkflowsHandler(QnaDataContext dataContext, IMapper mapper)
        {
            _dataContext = dataContext;
            _mapper = mapper;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSequencesTests\When_GetSequences_handled_for_non_existant_application.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSequencesTests.When_GetSequences_handled_for_non_existant_application.Act
[SetUp]
        public async Task Act()
        {
            _results = await Handler.Handle(new GetSequencesRequest(Guid.NewGuid()), CancellationToken.None);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Question.InputClasses
public string InputClasses { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\GetWorkflows\GetWorkflowsHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.GetWorkflows.GetWorkflowsHandler.Handle
public async Task<HandlerResponse<List<Workflow>>> Handle(GetWorkflowsRequest request, CancellationToken cancellationToken)
        {
            var workflows = await _dataContext.Workflows.AsNoTracking().Where(w => w.Status == WorkflowStatus.Live).ToListAsync(cancellationToken: cancellationToken);

            var responses = _mapper.Map<List<Workflow>>(workflows);

            return new HandlerResponse<List<Workflow>>(responses);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSequencesTests\When_GetSequences_handled_for_non_existant_application.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSequencesTests.When_GetSequences_handled_for_non_existant_application.Then_no_sequences_are_returned
[Test]
        public void Then_no_sequences_are_returned()
        {
            _results.Value.Should().BeNull();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\NotRequiredCondition.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.NotRequiredCondition.Field
public string Field { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Question.InputPrefix
public string InputPrefix { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Question.InputSuffix
public string InputSuffix { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\NotRequiredCondition.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.NotRequiredCondition.IsOneOf
public string[] IsOneOf { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\StartApplication\IApplicationDataValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.StartApplication.ApplicationDataValidator.IsValid
public bool IsValid(string projectApplicationDataSchema, string applicationData)
        {
            var schema = JSchema.Parse(projectApplicationDataSchema);

            var applicationDataObject = JObject.Parse(applicationData);

            return applicationDataObject.IsValid(schema);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\NotRequiredCondition.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.NotRequiredCondition.ContainsAllOf
public string[] ContainsAllOf { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Question.QuestionBodyText
public string QuestionBodyText { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Workflows\UpsertWorkflow\UpsertWorkflowRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Workflows.UpsertWorkflow.UpsertWorkflowRequest.ProjectId
public Guid ProjectId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.PagesController.GetPageBySectionNo
[HttpGet("{applicationId}/sequences/{sequenceNo}/sections/{sectionNo}/pages/{pageId}")]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<Page>> GetPageBySectionNo(Guid applicationId, int sequenceNo, int sectionNo, string pageId)
        {
            var pageResponse = await _mediator.Send(new GetPageBySectionNoRequest(applicationId, sequenceNo, sectionNo, pageId), CancellationToken.None);
            if (!pageResponse.Success)
            {
                _logger.LogError($"Unable to find page {pageId} | Reason : {pageResponse.Message}");
                return NotFound();
            }

            return pageResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\NotRequiredCondition.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.NotRequiredCondition.DoesNotContain
public string[] DoesNotContain { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Question.Hint
public string Hint { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Question.Input
public Input Input { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Question.Order
public int? Order { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Question.Value
public string Value { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Question.ErrorMessages
public IEnumerable<dynamic> ErrorMessages { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Workflows\CreateWorkflow\CreateWorkflowHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Workflows.CreateWorkflow.CreateWorkflowHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Workflows\CreateWorkflow\CreateWorkflowHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Workflows.CreateWorkflow.CreateWorkflowHandler.CreateWorkflowHandler
public CreateWorkflowHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Workflows\CreateWorkflow\CreateWorkflowHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Workflows.CreateWorkflow.CreateWorkflowHandler.Handle
public async Task<HandlerResponse<Workflow>> Handle(CreateWorkflowRequest request, CancellationToken cancellationToken)
        {
            var project = await _dataContext.Projects.SingleOrDefaultAsync(p => p.Id == request.ProjectId, cancellationToken: cancellationToken);

            request.Workflow.ApplicationDataSchema = project.ApplicationDataSchema;

            await _dataContext.Workflows.AddAsync(request.Workflow, cancellationToken);
            await _dataContext.SaveChangesAsync(cancellationToken);
            return new HandlerResponse<Workflow>(request.Workflow);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSectionsTests\When_GetSections_handled_for_non_existant_application.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSectionsTests.When_GetSections_handled_for_non_existant_applicationn.Then_success_is_false
[Test]
        public void Then_success_is_false()
        {
            _results.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Answer.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Answer.QuestionId
public string QuestionId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ApplicationDataValidatorTests\When_valid_applicationData_is_missing_a_property.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ApplicationDataValidatorTests.When_valid_applicationData_is_missing_a_property.Then_returns_false
[Test]
        public void Then_returns_false()
        {
            var validator = new ApplicationDataValidator();

            var schema = @"{   '$schema': 'http://json-schema.org/draft-04/schema#',   'definitions': {},   'id': 'http://example.com/example.json',   'properties': {     'TradingName': {       'anyOf': [             {'type':'string'},             {'type':'null'}         ]     },     'UseTradingName': {       'minLength': 1,       'type': 'boolean'     },     'ContactGivenName': {       'anyOf': [             {'type':'string'},             {'type':'null'}         ]     },     'ReferenceNumber': {        'anyOf': [             {'type':'string'},             {'type':'null'}         ]     },     'StandardCode': {       'anyOf': [             {'type':'string'},             {'type':'null'}         ]     },      'StandardName': {       'anyOf': [             {'type':'string'},             {'type':'null'}         ]     },     'OrganisationReferenceId': {       'minLength': 1,       'type': 'string'     },     'OrganisationName': {       'minLength': 1,       'type': 'string'     }   },   'additionalProperties': false,   'required': [     'OrganisationReferenceId',     'OrganisationName'   ],   'type': 'object'  }";

            var result = validator.IsValid(schema, "{'OrganisationReferenceId':'123'}");

            result.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\MaxLengthValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.MaxLengthValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", "25", true)]
        [TestCase("Mary had a little lamb", "25", true)]
        [TestCase("    Mary had a little lamb", "25", true)]
        [TestCase("Mary had a little lamb, its fleece was white as snow", "25", false)]
        [TestCase("   Mary had a little lamb, its fleece was white as snow", "25", false)]
        public void Then_correct_errors_are_returned(string input, string maxLength, bool isValid)
        {
            var validator = new MaxLengthValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Length exceeded",
                    Name = "MaxLength",
                    Value = maxLength
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\When_page_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_page_found.Then_all_pages_have_their_active_status_set_correctly
[Test]
        public async Task Then_all_pages_have_their_active_status_set_correctly()
        {
            await Handler.Handle(new ResetPageAnswersRequest(ApplicationId, SectionId, "1"), CancellationToken.None);

            var page1Response = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, "1"), CancellationToken.None);
            page1Response.Value.Active.Should().BeTrue();

            var page2Response = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, "2"), CancellationToken.None);
            page2Response.Value.Active.Should().BeFalse();

            var page3Response = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, "3"), CancellationToken.None);
            page3Response.Value.Active.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_incorrect_amount_of_answers_specified.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_incorrect_amount_of_answers_specified.Then_validation_error_occurs_if_no_answers_specified
[Test]
        public async Task Then_validation_error_occurs_if_no_answers_specified()
        {
            var response = await Handler.Handle(new SetPageAnswersRequest(ApplicationId, SectionId, "1", null), CancellationToken.None);

            response.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_incorrect_amount_of_answers_specified.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_incorrect_amount_of_answers_specified.Then_validation_error_occurs_if_less_than_expected_answers_specified
[Test]
        public async Task Then_validation_error_occurs_if_less_than_expected_answers_specified()
        {
            var response = await Handler.Handle(new SetPageAnswersRequest(ApplicationId, SectionId, "1", new List<Answer>
            {
            }), CancellationToken.None);

            response.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\TabularDataRow.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.TabularDataRow.Columns
public List<string> Columns { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSections\GetWorkflowSection\GetWorkflowSectionRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSections.GetWorkflowSection.GetWorkflowSectionRequest.ProjectId
public Guid ProjectId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSectionsTests\When_GetSections_handled_for_non_existant_application.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSectionsTests.When_GetSections_handled_for_non_existant_applicationn._results
private HandlerResponse<List<Section>> _results;
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\ConfigurationItem.cs
BlockTypes.METHOD, SFA.DAS.QnA.Configuration.Infrastructure.ConfigurationItem.Data
public string Data { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageTests\When_GetPage_handled_for_non_existent_section.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageTests.When_GetPage_handled_for_non_existent_section.Then_unsuccessful_response_is_returned
[Test]
        public async Task Then_unsuccessful_response_is_returned()
        {
            var result = await Handler.Handle(new GetPageRequest(ApplicationId, Guid.NewGuid(), PageId), CancellationToken.None);

            result.Success.Should().BeFalse();
            result.Value.Should().BeNull();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_answer_doesnt_relate_to_a_question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_answer_doesnt_relate_to_a_question.Then_validation_error_occurs
[Test]
        public async Task Then_validation_error_occurs()
        {
            var response = await Handler.Handle(new SetPageAnswersRequest(ApplicationId, SectionId, "1", new List<Answer>
            {
                new Answer { QuestionId = null, Value = "Yes" }
            }), CancellationToken.None);

            response.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\CreateSnapshot\CreateSnapshotHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.CreateSnapshot.CreateSnapshotHandler.CopySections
private async Task CopySections(Data.Entities.Application currentApplication, Data.Entities.Application newApplication, CancellationToken cancellationToken)
        {
            var sections = await _dataContext.ApplicationSections.AsNoTracking()
                .Where(sec => sec.ApplicationId == currentApplication.Id).ToListAsync(cancellationToken: cancellationToken);

            var newApplicationSequences = await _dataContext.ApplicationSequences.AsNoTracking()
                .Where(seq => seq.ApplicationId == newApplication.Id).ToListAsync(cancellationToken);

            var newApplicationSections = new List<ApplicationSection>();

            foreach (var sequence in newApplicationSequences)
            {
                // Copy over all sections into the new Application Sequence
                foreach (var section in sections.Where(sec => sec.SequenceNo == sequence.SequenceNo))
                {
                    var newSection = new ApplicationSection
                    {
                        Id = Guid.NewGuid(),
                        SequenceId = sequence.Id,
                        Title = section.Title,
                        LinkTitle = section.LinkTitle,
                        ApplicationId = newApplication.Id,
                        DisplayType = section.DisplayType,
                        QnAData = section.QnAData,
                        SectionNo = section.SectionNo,
                        SequenceNo = section.SequenceNo
                    };

                    // Adjust page info appropriately
                    foreach (var page in newSection.QnAData.Pages)
                    {
                        page.SectionId = newSection.Id;
                        page.SequenceId = newSection.SequenceId;
                    }

                    newApplicationSections.Add(newSection);
                }
            }

            await _dataContext.ApplicationSections.AddRangeAsync(newApplicationSections, cancellationToken);
            await _dataContext.SaveChangesAsync(cancellationToken);
            _logger.LogInformation($"Created ApplicationSection entities for Application: {newApplication.Id}");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_files_specified_is_empty.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_files_specified_is_empty.Then_validation_passes
[Test]
#if (!DEBUG)
        [Ignore("Must be tested on local DEV machine as it uses local Azure storage")]
#endif
        public async Task Then_validation_passes()
        {
            var files = new FormFileCollection();
            var response = await Handler.Handle(new SubmitPageOfFilesRequest(ApplicationId, SectionId, "1", files), CancellationToken.None);

            response.Value.ValidationPassed.Should().BeTrue();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\EncryptionService.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.EncryptionService.Encrypt
public Stream Encrypt(Stream fileStream)
        {
            var key = _keyProvider.GetKey();

            var memoryStream = new MemoryStream();
            fileStream.CopyTo(memoryStream);

            var originalBytes = memoryStream.ToArray();

            var encryptedBytes = AES_Encrypt(originalBytes, Encoding.ASCII.GetBytes(key));

            return new MemoryStream(encryptedBytes);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\EncryptionService.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.EncryptionService._keyProvider
private readonly IKeyProvider _keyProvider;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_a_branching_condition_is_question_tag.SetupQuestionData
private async Task SetupQuestionData(Guid applicationId, Guid sectionId, string questionValue, string conditionValue, string containsValue = "")
        {

            await DataContext.ApplicationSections.AddAsync(new ApplicationSection()
            {
                ApplicationId = applicationId,
                Id = sectionId,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page()
                        {
                            PageId = "100",
                            Questions = new List<Question>{new Question(){QuestionId = "Q1", QuestionTag = "TagName", Input = new Input { Type = "FileUpload" } }},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "101", Conditions = new List<Condition>(){  new Condition{QuestionTag = "TagName", MustEqual = conditionValue } }},
                                new Next(){Action = "NextPage", ReturnId = "103", Conditions = new List<Condition>(){  new Condition{QuestionTag = "TagName", Contains = containsValue }}},
                                new Next(){Action = "NextPage", ReturnId = "102", Conditions = new List<Condition>()}
                            },
                            Active = true
                        },
                        new Page()
                        {
                            PageId = "101",
                            Questions = new List<Question>{new Question(){QuestionId = "Q2", QuestionTag = "TagName2", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "102", Conditions = new List<Condition>()}
                            },
                            Active = false,
                            ActivatedByPageId = "100"
                        },
                        new Page()
                        {
                            PageId = "102",
                            Questions = new List<Question>{new Question(){QuestionId = "Q3", QuestionTag = "TagName3", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>(){
                                new Next(){Action = "NextPage", ReturnId = "103", Conditions = new List<Condition>()}
                            },
                            Active = false,
                            ActivatedByPageId = "100"
                        },
                        new Page()
                        {
                            PageId = "103",
                            Questions = new List<Question>{new Question(){QuestionId = "Q4", QuestionTag = "TagName103", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>(),
                            Active = false,
                            ActivatedByPageId = "100"
                        }
                    }
                }
            });

            var json = "{ \"TagName\" : \"" + questionValue + "\"}";

            await DataContext.Applications.AddAsync(new Data.Entities.Application() { Id = applicationId, ApplicationData = json });

            await DataContext.SaveChangesAsync();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\EncryptionService.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.EncryptionService.Decrypt
public Stream Decrypt(Stream encryptedFileStream)
        {
            var key = _keyProvider.GetKey();

            var memoryStream = new MemoryStream();
            encryptedFileStream.CopyTo(memoryStream);

            var encryptedBytes = memoryStream.ToArray();

            var originalBytes = AES_Decrypt(encryptedBytes, Encoding.ASCII.GetBytes(key));

            return new MemoryStream(originalBytes);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\MonthAndYearTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.MonthAndYearTypeValidator.MonthAndYearTypeValidator
public MonthAndYearTypeValidator()
        {
            ValidationDefinition = new ValidationDefinition() { ErrorMessage = "Answer must be a valid month and year" };
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetPage\GetPageBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetPage.GetPageBySectionNoRequest.SequenceNo
public int SequenceNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetPage\GetPageBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetPage.GetPageBySectionNoRequest.SectionNo
public int SectionNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\DateValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.DateValidator.Validate
public virtual List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            if (IsEmpty(answer, out string[] dateParts) || !TryParseExact(dateParts, out _))
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\SectionsController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.SectionsController._mediator
private readonly IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Infrastructure\NotFoundError.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Infrastructure.NotFoundError.NotFoundError
public NotFoundError()
            : base(404, HttpStatusCode.NotFound.ToString())
        {
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSections\CreateWorkflowSection\CreateWorkflowSectionRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSections.CreateWorkflowSection.CreateWorkflowSectionRequest.Section
public WorkflowSection Section { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\SectionsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.SectionsController.SectionsController
public SectionsController(IMediator mediator)
        {
            _mediator = mediator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSections\CreateWorkflowSection\CreateWorkflowSectionRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSections.CreateWorkflowSection.CreateWorkflowSectionRequest.CreateWorkflowSectionRequest
public CreateWorkflowSectionRequest(Guid projectId, WorkflowSection section)
        {
            ProjectId = projectId;
            Section = section;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetPage\GetPageBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetPage.GetPageBySectionNoRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetPage\GetPageBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetPage.GetPageBySectionNoRequest.GetPageBySectionNoRequest
public GetPageBySectionNoRequest(Guid applicationId, int sequenceNo, int sectionNo, string pageId)
        {
            ApplicationId = applicationId;
            SequenceNo = sequenceNo;
            SectionNo = sectionNo;
            PageId = pageId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\DateValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.DateValidator.IsEmpty
protected bool IsEmpty(Answer answer, out string[] dateParts)
        {
            var text = answer?.Value?.Trim();
            dateParts = text?.Split(new[] { "," }, StringSplitOptions.RemoveEmptyEntries);
            return string.IsNullOrEmpty(text) || dateParts is null || dateParts.Length != 3;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageTests\CanUpdatePageTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdateTests.CanUpdatePageTestBase.Handler
protected CanUpdatePageHandler Handler;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\When_section_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_section_found.Then_successful_response
[Test]
        public async Task Then_successful_response()
        {
            var response = await Handler.Handle(new ResetSectionAnswersRequest(ApplicationId, SequenceNo, SectionNo), CancellationToken.None);

            response.Value.HasSectionAnswersBeenReset.Should().BeTrue();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\When_section_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_section_found.Then_page_answers_are_reset
[TestCase("1")]
        [TestCase("2")]
        [TestCase("3")]
        public async Task Then_page_answers_are_reset(string pageId)
        {
            await Handler.Handle(new ResetSectionAnswersRequest(ApplicationId, SequenceNo, SectionNo), CancellationToken.None);

            var getPageResponse = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, pageId), CancellationToken.None);
            getPageResponse.Value.PageOfAnswers.Should().BeEmpty();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\NumberTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.NumberTypeValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text) && !IsValidNumber(text))
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\When_section_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_section_found.Then_page_complete_is_false
[TestCase("1")]
        [TestCase("2")]
        [TestCase("3")]
        public async Task Then_page_complete_is_false(string pageId)
        {
            await Handler.Handle(new ResetSectionAnswersRequest(ApplicationId, SequenceNo, SectionNo), CancellationToken.None);

            var getPageResponse = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, pageId), CancellationToken.None);
            getPageResponse.Value.Complete.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowsController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.Config.WorkflowsController._mediator
private readonly IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.WorkflowsController.WorkflowsController
public WorkflowsController(IMediator mediator)
        {
            _mediator = mediator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\DateInFutureValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.DateInFutureValidator.Validate
public override List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            if (!IsEmpty(answer, out string[] dateParts) && (!TryParseExact(dateParts, out DateTime dateEntered) || dateEntered <= DateTime.Today))
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.WorkflowsController.GetWorkflows
[HttpGet("{projectId}/workflows")]
        public async Task<ActionResult<List<Workflow>>> GetWorkflows(Guid projectId)
        {
            var getWorkflowResponse = await _mediator.Send(new GetWorkflowsRequest(projectId));
            if (!getWorkflowResponse.Success) return NotFound(new NotFoundError(getWorkflowResponse.Message));

            return getWorkflowResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\QnAData.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.QnAData.RequestedFeedbackAnswered
public bool? RequestedFeedbackAnswered => (Pages is null || Pages.All(p => !p.HasFeedback)) ? null : (bool?)Pages.All(p => p.AllFeedbackIsCompleted);
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.WorkflowsController.GetWorkflow
[HttpGet("{projectId}/workflows/{workflowId}")]
        public async Task<ActionResult<Workflow>> GetWorkflow(Guid projectId, Guid workflowId)
        {
            var getWorkflowResponse = await _mediator.Send(new GetWorkflowRequest(projectId, workflowId));
            if (!getWorkflowResponse.Success) return NotFound(new NotFoundError(getWorkflowResponse.Message));

            return getWorkflowResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.SequenceId
public Guid? SequenceId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\MonthAndYearValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.MonthAndYearValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.SectionId
public Guid? SectionId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\MonthAndYearValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.MonthAndYearValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();
            var dateParts = text?.Split(new[] { "," }, StringSplitOptions.RemoveEmptyEntries);

            if (string.IsNullOrEmpty(text) || dateParts is null || dateParts.Length != 2)
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }
            else
            {
                var month = dateParts[0];
                var year = dateParts[1];

                if (string.IsNullOrWhiteSpace(month) || string.IsNullOrWhiteSpace(year))
                {
                    errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
                }
                else
                {
                    var dateString = $"1/{month}/{year}";
                    var formatStrings = new string[] { "d/M/yyyy" };

                    if (!DateTime.TryParseExact(dateString, formatStrings, null, DateTimeStyles.None, out _))
                    {
                        errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
                    }
                }
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.ShowTitleAsCaption
public bool ShowTitleAsCaption { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSequences\UpsertWorkflowSequence\UpsertWorkflowSequenceHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSequences.UpsertWorkflowSequence.UpsertWorkflowSequenceHandler.Handle
public async Task<HandlerResponse<WorkflowSequence>> Handle(UpsertWorkflowSequenceRequest request, CancellationToken cancellationToken)
        {
            var existingSequence = await _dataContext.WorkflowSequences.SingleOrDefaultAsync(sequence => sequence.Id == request.SequenceId && sequence.WorkflowId == request.WorkflowId, cancellationToken: cancellationToken);
            if (existingSequence == null)
            {
                await _dataContext.WorkflowSequences.AddAsync(request.Sequence, cancellationToken);
            }
            else
            {
                existingSequence.IsActive = request.Sequence.IsActive;
                existingSequence.SectionId = request.Sequence.SectionId;
                existingSequence.SectionNo = request.Sequence.SectionNo;
                existingSequence.SequenceNo = request.Sequence.SequenceNo;
            }

            await _dataContext.SaveChangesAsync(cancellationToken);

            return new HandlerResponse<WorkflowSequence>(existingSequence);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSections\GetWorkflowSection\GetWorkflowSectionRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSections.GetWorkflowSection.GetWorkflowSectionRequest.SectionId
public Guid SectionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.Title
public string Title { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSections\GetWorkflowSection\GetWorkflowSectionRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSections.GetWorkflowSection.GetWorkflowSectionRequest.GetWorkflowSectionRequest
public GetWorkflowSectionRequest(Guid projectId, Guid sectionId)
        {
            ProjectId = projectId;
            SectionId = sectionId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\DateTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.DateTypeValidator.DateTypeValidator
public DateTypeValidator()
        {
            ValidationDefinition = new ValidationDefinition() { ErrorMessage = "Answer must be a valid date" };
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.LinkTitle
public string LinkTitle { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPagesToIncomplete\ResetPagesToIncompleteHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.ResetPagesToIncomplete.ResetPagesToIncompleteHandler._logger
private readonly ILogger<ResetPagesToIncompleteHandler> _logger;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\DateTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.DateTypeValidator.Validate
public override List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            if (IsEmpty(answer, out string[] dateParts) || !TryParseExact(dateParts, out _))
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.PagesController.CanUpdatePage
[HttpGet("{applicationId}/sections/{sectionId}/pages/{pageId}/canupdate")]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<bool>> CanUpdatePage(Guid applicationId, Guid sectionId, string pageId)
        {
            var canUpdateResponse = await _mediator.Send(new CanUpdatePageRequest(applicationId, sectionId, pageId), CancellationToken.None);
            if (!canUpdateResponse.Success)
            {
                _logger.LogError($"Unable to find page {pageId} | Reason : {canUpdateResponse.Message}");
                return NotFound();
            }

            return canUpdateResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.InfoText
public string InfoText { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSections\UpsertWorkflowSection\UpsertWorkflowSectionRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSections.UpsertWorkflowSection.UpsertWorkflowSectionRequest.SectionId
public Guid SectionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\SectionsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.SectionsController.GetSections
[HttpGet("{applicationId}/sections")]
        [ProducesResponseType(200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<List<Section>>> GetSections(Guid applicationId)
        {
            var sections = await _mediator.Send(new GetSectionsRequest(applicationId), CancellationToken.None);
            if (!sections.Success) return NotFound(new NotFoundError(sections.Message));
            if (sections.Value.Count == 0) return NoContent();

            return sections.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.Questions
public List<Question> Questions { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSections\UpsertWorkflowSection\UpsertWorkflowSectionRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSections.UpsertWorkflowSection.UpsertWorkflowSectionRequest.Section
public WorkflowSection Section { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.PageOfAnswers
public List<PageOfAnswers> PageOfAnswers { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSections\UpsertWorkflowSection\UpsertWorkflowSectionRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSections.UpsertWorkflowSection.UpsertWorkflowSectionRequest.UpsertWorkflowSectionRequest
public UpsertWorkflowSectionRequest(Guid projectId, Guid sectionId, WorkflowSection section)
        {
            ProjectId = projectId;
            SectionId = sectionId;
            Section = section;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\ValidationErrorDetail.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.ValidationErrorDetail.ValidationErrorDetail
public ValidationErrorDetail()
        {
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.Next
public List<Next> Next { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\EncryptionService.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.EncryptionService.AES_Encrypt
private byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
        {
            byte[] encryptedBytes;
            using (var ms = new MemoryStream())
            {
                using (var aes = Aes.Create())
                {
                    ConfigureAes(passwordBytes, aes);
                    using (var cs = new CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write))
                    {
                        cs.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
                        cs.Close();
                    }
                    encryptedBytes = ms.ToArray();
                }
            }
            return encryptedBytes;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\HandlerResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.HandlerResponse.HandlerResponse
public HandlerResponse(bool success, string message)
        {
            Success = success;
            Message = message;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.Complete
public bool Complete { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\NullValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.NullValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.AllowMultipleAnswers
public bool AllowMultipleAnswers { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\MinLengthValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.MinLengthValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\NullValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.NullValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            return new List<KeyValuePair<string, string>>();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\HandlerResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.HandlerResponse.HandlerResponse
public HandlerResponse() { }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.Order
public int? Order { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\MinLengthValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.MinLengthValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text) && text.Length < long.Parse(ValidationDefinition.Value))
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.Active
public bool Active { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.NotRequired
public bool NotRequired { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\CreateSnapshot\CreateSnapshotHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.CreateSnapshot.CreateSnapshotHandler.Handle
public async Task<HandlerResponse<CreateSnapshotResponse>> Handle(CreateSnapshotRequest request, CancellationToken cancellationToken)
        {
            var application = await _dataContext.Applications.AsNoTracking().FirstOrDefaultAsync(app => app.Id == request.ApplicationId, cancellationToken);
            if (application is null) return new HandlerResponse<CreateSnapshotResponse>(false, "Application does not exist");

            var newapplication = await CreateNewApplication(application, cancellationToken);
            await CopySequences(application, newapplication, cancellationToken);
            await CopySections(application, newapplication, cancellationToken);
            await CopyFileUploads(application, newapplication, cancellationToken);

            return new HandlerResponse<CreateSnapshotResponse>(new CreateSnapshotResponse { ApplicationId = newapplication.Id });
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.NotRequiredConditions
public List<NotRequiredCondition> NotRequiredConditions { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\WorkflowControllerTests\When_GetWorkflows_is_called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.WorkflowControllerTests.When_GetWorkflows_is_called.Should_return_a_list_of_workflowresults
[Test]
        public async Task Should_return_a_list_of_workflowresults()
        {
            var mediator = Substitute.For<IMediator>();

            var workflowId = Guid.NewGuid();

            var workflowResponse = new Workflow()
            {
                Description = "Workflow 1",
                Id = workflowId,
                Type = "EPAO",
                Version = "1"
            };
            mediator.Send(Arg.Any<GetWorkflowsRequest>(), Arg.Any<CancellationToken>())
                .Returns(new HandlerResponse<List<Workflow>>(new List<Workflow>
                {
                    workflowResponse
                }));

            var workflowController = new WorkflowsController(mediator);

            var result = await workflowController.GetWorkflows(Guid.NewGuid());

            result.Value.Should().BeOfType<List<Workflow>>();
            result.Value.Count.Should().Be(1);
            result.Value.First().Should().BeEquivalentTo(workflowResponse);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.BodyText
public string BodyText { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.Details
public PageDetails Details { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.MarkPageFeedbackAsComplete
protected void MarkPageFeedbackAsComplete(Page page)
        {
            if (page.HasFeedback)
            {
                page.Feedback.ForEach(f => f.IsCompleted = true);
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.DisplayType
public string DisplayType { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.WorkflowsController.UpsertWorkflow
[HttpPut("{projectId}/workflows/{workflowId}")]
        public async Task<ActionResult<Workflow>> UpsertWorkflow(Guid projectId, Guid workflowId, [FromBody] Workflow workflow)
        {
            var upsertWorkflowResponse = await _mediator.Send(new UpsertWorkflowRequest(projectId, workflowId, workflow));
            if (!upsertWorkflowResponse.Success) return BadRequest(new BadRequestError(upsertWorkflowResponse.Message));

            return upsertWorkflowResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.IsQuestionAnswered
public bool IsQuestionAnswered(string questionId)
        {
            var allAnswers = PageOfAnswers.SelectMany(poa => poa.Answers).ToList();
            return allAnswers.Any(a => a.QuestionId == questionId);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.Feedback
public List<Feedback> Feedback { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.HasFeedback
[JsonIgnore]
        public bool HasFeedback => Feedback?.Any() ?? false;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\DateValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.DateValidator.TryParseExact
protected bool TryParseExact(string[] dateParts, out DateTime result)
        {
            var day = dateParts[0];
            var month = dateParts[1];
            var year = dateParts[2];

            if (string.IsNullOrWhiteSpace(day) || string.IsNullOrWhiteSpace(month) || string.IsNullOrWhiteSpace(year))
            {
                result = DateTime.MinValue;
                return false;
            }
            else
            {
                var dateString = $"{day}/{month}/{year}";
                var formatStrings = new string[] { "d/M/yyyy" };

                return DateTime.TryParseExact(dateString, formatStrings, null, DateTimeStyles.None, out result);
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\RegexValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.RegexValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Workflows\CreateWorkflow\CreateWorkflowRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Workflows.CreateWorkflow.CreateWorkflowRequest.ProjectId
public Guid ProjectId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\RegexValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.RegexValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text) && !IsValidRegexMatch(text, ValidationDefinition.Value.ToString()))
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\RegexValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.RegexValidator.IsValidRegexMatch
private static bool IsValidRegexMatch(string input, string pattern)
        {
            try
            {
                return Regex.IsMatch(input, pattern);
            }
            catch (ArgumentException)
            {
                return false;
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\ResetSectionAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetSectionAnswersTestBase.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\UpsertFeedbackTests\When_Feedback_is_new.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.UpsertFeedbackTests.When_Feedback_is_new.Then_feedback_entry_is_inserted
[Test]
        public async Task Then_feedback_entry_is_inserted()
        {
            var createdDateTime = new DateTime(2018, 2, 3);
            SystemTime.UtcNow = () => createdDateTime;

            var dataContext = DataContextHelpers.GetInMemoryDataContext();

            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();

            var section = new ApplicationSection
            {
                ApplicationId = applicationId,
                Id = sectionId,
                QnAData = new QnAData
                {
                    Pages = new List<Page>
                    {
                        new Page
                        {
                            PageId = "1"
                        }
                    }
                }
            };

            await dataContext.ApplicationSections.AddAsync(section);
            await dataContext.SaveChangesAsync();

            var handler = new UpsertFeedbackHandler(dataContext);

            var newFeedbackId = Guid.NewGuid();
            await handler.Handle(new UpsertFeedbackRequest(applicationId, sectionId, "1",
                new Feedback
                {
                    Date = DateTime.UtcNow,
                    From = "Dave",
                    Id = newFeedbackId,
                    Message = "Feedback message"
                }), CancellationToken.None);

            var updatedSection = await dataContext.ApplicationSections.SingleAsync();

            var updatedPage = updatedSection.QnAData.Pages[0];
            updatedPage.Feedback.Should().NotBeNullOrEmpty();
            updatedPage.Feedback.Count.Should().Be(1);

            var insertedFeedback = updatedPage.Feedback[0];
            insertedFeedback.Date.Should().Be(createdDateTime);
            insertedFeedback.From.Should().Be("Dave");
            insertedFeedback.Id.Should().Be(newFeedbackId);
            insertedFeedback.Message.Should().Be("Feedback message");
            insertedFeedback.IsNew.Should().BeTrue();
            insertedFeedback.IsCompleted.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SkipPage\SkipPageHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SkipPage.SkipPageHandler.SkipPageHandler
public SkipPageHandler(QnaDataContext dataContext, INotRequiredProcessor notRequiredProcessor, ITagProcessingService tagProcessingService) : base(dataContext, notRequiredProcessor, tagProcessingService, null)
        {
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequences\GetSequencesRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetSequences.GetSequencesRequest.GetSequencesRequest
public GetSequencesRequest(Guid applicationId)
        {
            ApplicationId = applicationId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Authentication\AzureAdScopeClaimTransformation.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Authentication.AzureAdScopeClaimTransformation.TransformAsync
public Task<ClaimsPrincipal> TransformAsync(ClaimsPrincipal principal)
        {
            var scopeClaims = principal.FindAll(Constants.ScopeClaimType).ToList();
            if (scopeClaims.Count != 1 || !scopeClaims[0].Value.Contains(' '))
            {
                // Caller has no scopes or has multiple scopes (already split)
                // or they have only one scope
                return Task.FromResult(principal);
            }

            Claim claim = scopeClaims[0];
            string[] scopes = claim.Value.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            IEnumerable<Claim> claims = scopes.Select(s => new Claim(Constants.ScopeClaimType, s));

            return Task.FromResult(new ClaimsPrincipal(new ClaimsIdentity(principal.Identity, claims)));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SkipPage\SkipPageHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SkipPage.SkipPageHandler.Handle
public async Task<HandlerResponse<SkipPageResponse>> Handle(SkipPageRequest request, CancellationToken cancellationToken)
        {
            var application = await _dataContext.Applications.SingleOrDefaultAsync(app => app.Id == request.ApplicationId, cancellationToken: cancellationToken);
            if (application is null) return new HandlerResponse<SkipPageResponse>(false, "Application does not exist");

            var section = await _dataContext.ApplicationSections.SingleOrDefaultAsync(sec => sec.Id == request.SectionId && sec.ApplicationId == request.ApplicationId, cancellationToken);
            if (section is null) return new HandlerResponse<SkipPageResponse>(false, "Section does not exist");

            var qnaData = new QnAData(section.QnAData);
            var page = qnaData.Pages.SingleOrDefault(p => p.PageId == request.PageId);
            if (page is null) return new HandlerResponse<SkipPageResponse>(false, "Page does not exist");

            try
            {
                var nextAction = GetNextActionForPage(section, application, page.PageId);
                var checkboxListAllNexts = GetCheckboxListMatchingNextActionsForPage(section, application, page.PageId);

                SetStatusOfNextPagesBasedOnDeemedNextActions(section, page.PageId, nextAction, checkboxListAllNexts);

                await _dataContext.SaveChangesAsync(cancellationToken);

                return new HandlerResponse<SkipPageResponse>(new SkipPageResponse(nextAction.Action, nextAction.ReturnId));
            }
            catch (ApplicationException)
            {
                if (page.Next is null || !page.Next.Any())
                {
                    return new HandlerResponse<SkipPageResponse>(new SkipPageResponse());
                }
                else
                {
                    return new HandlerResponse<SkipPageResponse>(false, "Cannot find a matching 'Next' instruction");
                }
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\CreateSnapshot\CreateSnapshotHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.CreateSnapshot.CreateSnapshotHandler.CopyFileUploads
private async Task CopyFileUploads(Data.Entities.Application currentApplication, Data.Entities.Application newApplication, CancellationToken cancellationToken)
        {
            var sections = await _dataContext.ApplicationSections.AsNoTracking().Where(sec => sec.ApplicationId == currentApplication.Id).ToListAsync();
            var newSections = await _dataContext.ApplicationSections.AsNoTracking().Where(sec => sec.ApplicationId == newApplication.Id).ToListAsync();

            foreach (var section in sections)
            {
                var newSection = newSections.FirstOrDefault(s => s.SectionNo == section.SectionNo && s.SequenceNo == section.SequenceNo);
                if (newSection is null) continue;

                // Go through each page that has a FileUpload question and copy any files across
                foreach (var pageWithFileUpload in section.QnAData.Pages.Where(p => p.Questions.Any(q => "FileUpload".Equals(q.Input?.Type))))
                {
                    foreach (var pageOfAnswer in pageWithFileUpload.PageOfAnswers)
                    {
                        foreach (var answer in pageOfAnswer.Answers)
                        {
                            if (!string.IsNullOrWhiteSpace(answer.Value))
                            {
                                var originalFileUrl = $"{section.ApplicationId.ToString().ToLower()}/{section.SequenceId.ToString().ToLower()}/{section.Id.ToString().ToLower()}/{pageWithFileUpload.PageId.ToLower()}/{answer.QuestionId.ToLower()}/{answer.Value}";
                                var snapshotFileUrl = $"{newSection.ApplicationId.ToString().ToLower()}/{newSection.SequenceId.ToString().ToLower()}/{newSection.Id.ToString().ToLower()}/{pageWithFileUpload.PageId.ToLower()}/{answer.QuestionId.ToLower()}/{answer.Value}";

                                await CopyFileInAzureStorage(originalFileUrl, snapshotFileUrl);
                            }
                        }
                    }
                }
            }

            _logger.LogInformation($"Copied over file uploads for Application: {newApplication.Id}");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\HandlerResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.HandlerResponse.Value
public TResponseType Value { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\FileControllerTests\When_download_file_or_zip_of_files_is_called.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.FileControllerTests.When_download_file_or_zip_of_files_is_called._mediator
private IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\FileControllerTests\When_download_file_or_zip_of_files_is_called.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.FileControllerTests.When_download_file_or_zip_of_files_is_called._fileController
private FileController _fileController;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.RemovePageFeedback
protected void RemovePageFeedback(Page page)
        {
            if (page.HasFeedback)
            {
                page.Feedback = new List<Feedback>();
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.HasNewFeedback
[JsonIgnore]
        public bool HasNewFeedback => HasFeedback && Feedback.Any(f => f.IsNew || !f.IsCompleted);
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\FileControllerTests\When_download_file_or_zip_of_files_is_called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.FileControllerTests.When_download_file_or_zip_of_files_is_called.SetUp
[SetUp]
        public void SetUp()
        {
            _logger = Substitute.For<ILogger<FileController>>(); ;
            _mediator = Substitute.For<IMediator>();
            _fileController = new FileController(_logger, _mediator);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.PagesController.AddPageAnswer
[HttpPost("{applicationId}/sections/{sectionId}/pages/{pageId}/multiple")]
        [ProducesResponseType((int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.BadRequest)]
        public async Task<ActionResult<AddPageAnswerResponse>> AddPageAnswer(Guid applicationId, Guid sectionId, string pageId, [FromBody] List<Answer> answers)
        {
            var addPageAnswerResponse = await _mediator.Send(new AddPageAnswerRequest(applicationId, sectionId, pageId, answers), CancellationToken.None);
            if (!addPageAnswerResponse.Success)
            {
                _logger.LogError($"Unable to add answer to page {pageId} | Reason : {addPageAnswerResponse.Message}");
                return BadRequest(new BadRequestError(addPageAnswerResponse.Message));
            }

            return addPageAnswerResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiConfig.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiConfig.GetBearerToken
public string GetBearerToken()
        {
            if (DisableBearerHeader)
            {
                return "";
            }

            var authority = $"https://login.microsoftonline.com/{TenantId}";
            var clientCredential = new ClientCredential(ClientId, ClientSecret);
            var context = new AuthenticationContext(authority, true);
            var result = context.AcquireTokenAsync(ResourceId, clientCredential).Result;

            return result.AccessToken;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\FileControllerTests\When_download_file_or_zip_of_files_is_called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.FileControllerTests.When_download_file_or_zip_of_files_is_called.Then_the_file_is_returned
[Test]
        public async Task Then_the_file_is_returned()
        {
            var expectedApplicationId = Guid.NewGuid();
            var expectedSequenceNo = 123;
            var expectedSectionNo = 456;
            var expectedPageId = "pageId";
            var expectedQuestionId = "questionId";

            var expectedResponse = new DownloadFile
            {
                ContentType = "application/pdf",
                FileName = "fileName",
                Stream = new MemoryStream()
            };

            _mediator.Send(Arg.Is<DownloadFileBySectionNoRequest>(x =>
                    x.ApplicationId == expectedApplicationId && x.SectionNo == expectedSectionNo &&
                    x.SequenceNo == expectedSequenceNo && x.PageId == expectedPageId &&
                    x.QuestionId == expectedQuestionId))
                .Returns(new HandlerResponse<DownloadFile>(expectedResponse));

            var result = await _fileController.DownloadFileOrZipOfFiles(expectedApplicationId, expectedSequenceNo, expectedSectionNo, expectedPageId, expectedQuestionId) as FileStreamResult;

            result.FileStream.Should().BeSameAs(expectedResponse.Stream);
            result.ContentType.Should().Be(expectedResponse.ContentType);
            result.FileDownloadName.Should().Be(expectedResponse.FileName);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationControllerTests\StartApplication\When_StartApplication_is_called.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.ApplicationControllerTests.StartApplication.When_StartApplication_is_called.Controller
protected ApplicationController Controller;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersBySectionNoHandlerTests\When_page_not_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersBySectionNoHandlerTests.When_page_not_found.Then_validation_error_occurs
[Test]
        public async Task Then_validation_error_occurs()
        {
            var response = await Handler.Handle(new ResetPageAnswersBySectionNoRequest(ApplicationId, SequenceNo, SectionNo, "NOT_FOUND"), CancellationToken.None);

            response.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\HandlerResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.HandlerResponse.Success
public bool Success { get; set; } = true;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSequences\CreateWorkflowSequence\CreateWorkflowSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSequences.CreateWorkflowSequence.CreateWorkflowSequenceRequest.WorkflowId
public Guid WorkflowId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\FindNextRequiredActionTests\FindNextRequiredActionTestsBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.FindNextRequiredActionTests.FindNextRequiredActionTestsBase.QnaDataContext
protected QnaDataContext QnaDataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiClient.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiClient.StartApplication
public async Task<StartApplicationResponse> StartApplication(StartApplicationRequest request)
        {
            return await HttpCall<StartApplicationResponse>(async () => await _httpClient.PostAsJsonAsync(new Uri("applications/start", UriKind.Relative), request));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\HandlerResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.HandlerResponse.Message
public string Message { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.AllFeedbackIsCompleted
[JsonIgnore]
        public bool AllFeedbackIsCompleted => !HasFeedback || Feedback.All(f => f.IsCompleted);
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiClient.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Client.QnaApiClient._httpClient
private readonly HttpClient _httpClient;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\FindNextRequiredActionTests\FindNextRequiredActionTestsBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.FindNextRequiredActionTests.FindNextRequiredActionTestsBase.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\FindNextRequiredActionTests\FindNextRequiredActionTestsBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.FindNextRequiredActionTests.FindNextRequiredActionTestsBase.NextAction
protected Next NextAction;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\EncryptionService.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.EncryptionService.AES_Decrypt
private byte[] AES_Decrypt(byte[] bytesToBeDecrypted, byte[] passwordBytes)
        {
            byte[] decryptedBytes;
            using (var ms = new MemoryStream())
            {
                using (var aes = Aes.Create())
                {
                    ConfigureAes(passwordBytes, aes);
                    using (var cs = new CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Write))
                    {
                        cs.Write(bytesToBeDecrypted, 0, bytesToBeDecrypted.Length);
                        cs.Close();
                    }
                    decryptedBytes = ms.ToArray();
                }
            }
            return decryptedBytes;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\FindNextRequiredActionTests\FindNextRequiredActionTestsBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.FindNextRequiredActionTests.FindNextRequiredActionTestsBase.ApplicationDataJson
protected string ApplicationDataJson;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetCurrentSequenceTests\GetCurrentSequenceTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetCurrentSequenceTests.GetCurrentSequenceTestBase.Handler
protected GetCurrentSequenceHandler Handler;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSections\UpsertWorkflowSection\UpsertWorkflowSectionHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.WorkflowSections.UpsertWorkflowSection.UpsertWorkflowSectionHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\FindNextRequiredActionTests\FindNextRequiredActionTestsBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.FindNextRequiredActionTests.FindNextRequiredActionTestsBase.NotRequiredProcessor
protected INotRequiredProcessor NotRequiredProcessor;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Page.ActivatedByPageId
public string ActivatedByPageId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\SectionsControllerTests\GetSection\When_GetSection_is_called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.SectionsControllerTests.GetSection.When_GetSection_is_called.And_Section_exists_Then_Section_is_returned
[Test]
        public async Task And_Section_exists_Then_Section_is_returned()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();

            var mediator = Substitute.For<IMediator>();

            mediator.Send(Arg.Any<GetSectionRequest>()).Returns(new HandlerResponse<Section>(new Section()
            {
                Id = sectionId,
                SequenceNo = 1,
                SectionNo = 1,
                ApplicationId = applicationId
            }));

            var sectionController = new SectionsController(mediator);

            var result = await sectionController.GetSection(applicationId, sectionId);

            result.Value.Should().BeOfType<Section>();
            result.Value.Id.Should().Be(sectionId);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSections\UpsertWorkflowSection\UpsertWorkflowSectionHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSections.UpsertWorkflowSection.UpsertWorkflowSectionHandler.UpsertWorkflowSectionHandler
public UpsertWorkflowSectionHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\FindNextRequiredActionTests\FindNextRequiredActionTestsBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.FindNextRequiredActionTests.FindNextRequiredActionTestsBase.TagProcessingService
protected ITagProcessingService TagProcessingService;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\Workflows\CreateWorkflowTests\When_workflow_is_created.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.Workflows.CreateWorkflowTests.When_workflow_is_created.Then_ApplicationDataSchema_is_copied_from_Project_to_Workflow
[Test]
        public async Task Then_ApplicationDataSchema_is_copied_from_Project_to_Workflow()
        {
            var inMemoryDataContext = DataContextHelpers.GetInMemoryDataContext();

            var projectId = Guid.NewGuid();

            var project = new Project
            {
                ApplicationDataSchema = "schema{}",
                Id = projectId
            };

            await inMemoryDataContext.Projects.AddAsync(project);
            await inMemoryDataContext.SaveChangesAsync();

            var createWorkflowHandler = new CreateWorkflowHandler(inMemoryDataContext);
            await createWorkflowHandler.Handle(new CreateWorkflowRequest(projectId, new Workflow() { ProjectId = projectId, Description = "Desc", Version = "1" }), CancellationToken.None);

            var savedWorkflow = await inMemoryDataContext.Workflows.SingleOrDefaultAsync();

            savedWorkflow.Should().NotBeNull();

            savedWorkflow.ApplicationDataSchema.Should().Be(project.ApplicationDataSchema);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageBySectionNoTests\When_CanUpdatePageBySectionNo_handled_for_non_existent_section.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdatePageBySectionNoTests.When_CanUpdatePageBySectionNo_handled_for_non_existent_section.Then_unsuccessful_response_is_returned
[Test]
        public async Task Then_unsuccessful_response_is_returned()
        {
            var result = await Handler.Handle(new CanUpdatePageBySectionNoRequest(ApplicationId, SequenceNo, int.MinValue, ActivePageId), CancellationToken.None);

            result.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\When_page_not_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_page_not_found.Then_validation_error_occurs
[Test]
        public async Task Then_validation_error_occurs()
        {
            var response = await Handler.Handle(new ResetPageAnswersRequest(ApplicationId, SectionId, "NOT_FOUND"), CancellationToken.None);

            response.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiClient.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiClient.QnaApiClient
public QnaApiClient(HttpClient httpClient, QnaApiConfig apiConfig)
        {
            _httpClient = httpClient;

            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", apiConfig.GetBearerToken());
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiClient.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiClient.GetApplicationData
public async Task<object> GetApplicationData(Guid applicationId)
        {
            return await HttpCall<object>(async () => await _httpClient.GetAsync(new Uri($"applications/{applicationId}/applicationData", UriKind.Relative)));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\PagesControllerTests\PagesControllerTests.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.PagesControllerTests.PagesControllerTests._mediator
private Mock<IMediator> _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\PagesControllerTests\PagesControllerTests.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.PagesControllerTests.PagesControllerTests._controller
private PagesController _controller;
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\PagesControllerTests\PagesControllerTests.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.PagesControllerTests.PagesControllerTests._applicationId
private Guid _applicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\CanUpdatePage\CanUpdatePageBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.CanUpdatePage.CanUpdatePageBySectionNoRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\MinWordCountValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.MinWordCountValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\PagesControllerTests\PagesControllerTests.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.PagesControllerTests.PagesControllerTests.TestSetup
[SetUp]
        public void TestSetup()
        {
            _applicationId = Guid.NewGuid();
            _mediator = new Mock<IMediator>();
            _controller = new PagesController(Mock.Of<ILogger<PagesController>>(), _mediator.Object)
            {
                ControllerContext = new ControllerContext()
                {
                    HttpContext = new DefaultHttpContext()
                }
            };
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileService.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileService.ZippedMultipleFiles
private async Task<HandlerResponse<DownloadFile>> ZippedMultipleFiles(string questionId, CancellationToken cancellationToken, Page page, CloudBlobDirectory directory)
        {
            using (var zipStream = new MemoryStream())
            {
                await ZipUploadedFiles(questionId, cancellationToken, zipStream, page, directory);
                zipStream.Position = 0;
                var newStream = new MemoryStream();
                zipStream.CopyTo(newStream);
                newStream.Position = 0;
                return new HandlerResponse<DownloadFile>(new DownloadFile() { ContentType = "application/zip", FileName = $"{questionId}_uploads.zip", Stream = newStream });
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\MinWordCountValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.MinWordCountValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text))
            {
                var wordCount = text.Split(new[] { " " }, StringSplitOptions.RemoveEmptyEntries).Length;

                if (wordCount < long.Parse(ValidationDefinition.Value))
                {
                    errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
                }
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\WorkflowSection.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.WorkflowSection.ProjectId
public Guid ProjectId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\PagesControllerTests\PagesControllerTests.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.PagesControllerTests.PagesControllerTests.SetPagesToIncomplete_HandlerIsCalled
[Test]
        public async Task SetPagesToIncomplete_HandlerIsCalled()
        {
            const int sequenceNo = 1;
            const int sectionNo = 5;
            var pageIdsToExclude = new List<string>();

            _mediator.Setup(x => x.Send(It.Is<ResetPagesToIncompleteRequest>(y => y.ApplicationId == _applicationId && y.SequenceNo == sequenceNo && y.SectionNo == sectionNo), It.IsAny<CancellationToken>()));

            await _controller.SetPagesToIncomplete(_applicationId, sequenceNo, sectionNo, pageIdsToExclude);

            _mediator.Verify(x => x.Send(It.Is<ResetPagesToIncompleteRequest>(y => y.ApplicationId == _applicationId && y.SequenceNo == sequenceNo && y.SectionNo == sectionNo), It.IsAny<CancellationToken>()), Times.Once);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_page_not_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_page_not_found.Then_validation_error_occurs
[Test]
        public async Task Then_validation_error_occurs()
        {
            var response = await Handler.Handle(new SetPageAnswersRequest(ApplicationId, SectionId, "NOT_FOUND", new List<Answer>
            {
                new Answer { QuestionId = "Q1", Value = "NOT_FOUND" }
            }), CancellationToken.None);

            response.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\WorkflowSection.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.WorkflowSection.Title
public string Title { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\AzureTableStorageConfigurationProvider.cs
BlockTypes.METHOD, SFA.DAS.QnA.Configuration.Infrastructure.AzureTableStorageConfigurationProvider.AzureTableStorageConfigurationProvider
public AzureTableStorageConfigurationProvider(string connection, string appName, string environment, string version)
        {
            _connection = connection;
            _environment = environment;
            _version = version;
            _appName = appName;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\WorkflowSection.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.WorkflowSection.LinkTitle
public string LinkTitle { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\WorkflowSection.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.WorkflowSection.DisplayType
public string DisplayType { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\TabularData.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.TabularData.HeadingTitles
public List<string> HeadingTitles { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Projects\GetProject\GetProjectHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Projects.GetProject.GetProjectHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\WorkflowSection.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.WorkflowSection.QnAData
public QnAData QnAData { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\TabularData.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.TabularData.DataRows
public List<TabularDataRow> DataRows { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Projects\GetProject\GetProjectHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Projects.GetProject.GetProjectHandler.GetProjectHandler
public GetProjectHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.WorkflowsController.CreateWorkflow
[HttpPost("{projectId}/workflows")]
        public async Task<ActionResult<Workflow>> CreateWorkflow(Guid projectId, [FromBody] Workflow workflow)
        {
            var createWorkflowResponse = await _mediator.Send(new CreateWorkflowRequest(projectId, workflow));
            if (!createWorkflowResponse.Success) return BadRequest(new BadRequestError(createWorkflowResponse.Message));

            return createWorkflowResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\EncryptionService.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.EncryptionService.ConfigureAes
private static void ConfigureAes(byte[] passwordBytes, Aes aes)
        {
            aes.KeySize = 256;
            aes.BlockSize = 128;
            var key = new Rfc2898DeriveBytes(passwordBytes, new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, 1000);
            aes.Key = key.GetBytes(aes.KeySize / 8);
            aes.IV = key.GetBytes(aes.BlockSize / 8);
            aes.Mode = CipherMode.CBC;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Projects\GetProject\GetProjectHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Projects.GetProject.GetProjectHandler.Handle
public async Task<HandlerResponse<Project>> Handle(GetProjectRequest request, CancellationToken cancellationToken)
        {
            var project = await _dataContext.Projects.AsNoTracking().SingleOrDefaultAsync(proj => proj.Id == request.ProjectId, cancellationToken);
            return project is null
                ? new HandlerResponse<Project>(success: false, message: "Project does not exist")
                : new HandlerResponse<Project>(project);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\ValidationErrorDetail.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.ValidationErrorDetail.ValidationErrorDetail
public ValidationErrorDetail(string field, string errorMessage)
        {
            Field = field;
            ErrorMessage = errorMessage;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\ValidationErrorDetail.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.ValidationErrorDetail.ValidationErrorDetail
public ValidationErrorDetail(string errorMessage)
        {
            ErrorMessage = errorMessage;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFile.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFile.ContentType
public string ContentType { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\EntityBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.EntityBase.Status
public string Status { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiClient.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiClient.GetCurrentSequence
public async Task<Sequence> GetCurrentSequence(Guid applicationId)
        {
            return await HttpCall<Sequence>(async () => await _httpClient.GetAsync(new Uri($"applications/{applicationId}/sequences/current", UriKind.Relative)));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFile.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFile.Stream
public Stream Stream { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\EntityBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.EntityBase.CreatedAt
public DateTime CreatedAt { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.PagesController.CanUpdatePageBySectionNo
[HttpGet("{applicationId}/sequences/{sequenceNo}/sections/{sectionNo}/pages/{pageId}/canupdate")]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<bool>> CanUpdatePageBySectionNo(Guid applicationId, int sequenceNo, int sectionNo, string pageId)
        {
            var canUpdateResponse = await _mediator.Send(new CanUpdatePageBySectionNoRequest(applicationId, sequenceNo, sectionNo, pageId), CancellationToken.None);
            if (!canUpdateResponse.Success)
            {
                _logger.LogError($"Unable to find page {pageId} | Reason : {canUpdateResponse.Message}");
                return NotFound();
            }

            return canUpdateResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFile.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFile.FileName
public string FileName { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\EntityBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.EntityBase.CreatedBy
public string CreatedBy { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\SetPageAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.SetPageAnswersTestBase.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSectionsTests\GetSectionsTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSectionsTests.GetSectionsTestBase.Handler
protected GetSectionsHandler Handler;
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\EntityBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.EntityBase.UpdatedAt
public DateTime? UpdatedAt { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\EntityBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.EntityBase.UpdatedBy
public string UpdatedBy { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase.GetFileStorageConfig
private IOptions<FileStorageConfig> GetFileStorageConfig()
        {
            return Options.Create(new FileStorageConfig { ContainerName = _fileStorageContainerName, StorageConnectionString = _fileStorageConnectionString });
        }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\EntityBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.EntityBase.DeletedAt
public DateTime? DeletedAt { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\ValidationErrorDetail.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.ValidationErrorDetail.Field
public string Field { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\EntityBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.EntityBase.DeletedBy
public string DeletedBy { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\FileController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.FileController._logger
private readonly ILogger<FileController> _logger;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageBySectionNoTests\When_GetPageBySectionNo_handled_for_non_existent_section.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageBySectionNoTests.When_GetPageBySectionNo_handled_for_non_existent_section.Then_unsuccessful_response_is_returned
[Test]
        public async Task Then_unsuccessful_response_is_returned()
        {
            var result = await Handler.Handle(new GetPageBySectionNoRequest(ApplicationId, SequenceNo, int.MinValue, PageId), CancellationToken.None);

            result.Success.Should().BeFalse();
            result.Value.Should().BeNull();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\FileController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.FileController._mediator
private readonly IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\FileController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.FileController.FileController
public FileController(ILogger<FileController> logger, IMediator mediator)
        {
            _logger = logger;
            _mediator = mediator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\DeleteFeedback\DeleteFeedbackRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.DeleteFeedback.DeleteFeedbackRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\FileController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.FileController.Upload
[HttpPost("{applicationId}/sections/{sectionId}/pages/{pageId}/upload")]
        public async Task<ActionResult<SetPageAnswersResponse>> Upload(Guid applicationId, Guid sectionId, string pageId)
        {
            IFormFileCollection files;
            try
            {
                files = HttpContext.Request.Form.Files;
            }
            catch
            {
                files = null;
            }

            var uploadResult = await _mediator.Send(new SubmitPageOfFilesRequest(applicationId, sectionId, pageId, files));

            if (!uploadResult.Success)
            {
                _logger.LogError($"Unable to upload file for page {pageId} | Reason : {uploadResult.Message}");
                return BadRequest(new BadRequestError(uploadResult.Message));
            }

            return uploadResult.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\SectionsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.SectionsController.GetSequenceSections
[HttpGet("{applicationId}/sequences/{sequenceId}/sections")]
        [ProducesResponseType(200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<List<Section>>> GetSequenceSections(Guid applicationId, Guid sequenceId)
        {
            var sectionsResponse = await _mediator.Send(new GetSequenceSectionsRequest(applicationId, sequenceId), CancellationToken.None);
            if (!sectionsResponse.Success) return NotFound();
            if (sectionsResponse.Value == null) return NoContent();

            return sectionsResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\CompleteFeedbackWithinSequence\CompleteFeedbackWithinSequenceHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.PageFeedback.CompleteFeedbackWithinSequence.CompleteFeedbackWithinSequenceHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\CompleteFeedbackWithinSequence\CompleteFeedbackWithinSequenceHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.CompleteFeedbackWithinSequence.CompleteFeedbackWithinSequenceHandler.CompleteFeedbackWithinSequenceHandler
public CompleteFeedbackWithinSequenceHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\CompleteFeedbackWithinSequence\CompleteFeedbackWithinSequenceHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.CompleteFeedbackWithinSequence.CompleteFeedbackWithinSequenceHandler.Handle
public async Task<HandlerResponse<bool>> Handle(CompleteFeedbackWithinSequenceRequest request, CancellationToken cancellationToken)
        {
            var application = await _dataContext.Applications.FirstOrDefaultAsync(app => app.Id == request.ApplicationId, cancellationToken: cancellationToken);
            if (application is null) return new HandlerResponse<bool>(false, "Application does not exist");

            var sequence = await _dataContext.ApplicationSequences.FirstOrDefaultAsync(seq => seq.Id == request.SequenceId, cancellationToken: cancellationToken);
            if (sequence is null) return new HandlerResponse<bool>(false, "Sequence does not exist");

            var sections = await _dataContext.ApplicationSections.Where(section => section.SequenceId == request.SequenceId).ToListAsync(cancellationToken);

            foreach (var section in sections)
            {
                var qnaData = new QnAData(section.QnAData);

                foreach (var page in qnaData.Pages)
                {
                    if (page.HasNewFeedback)
                    {
                        page.Feedback.ForEach(f => f.IsNew = false);
                        page.Feedback.ForEach(f => f.IsCompleted = true);
                    }
                }

                section.QnAData = qnaData;
            }

            await _dataContext.SaveChangesAsync(cancellationToken);

            return new HandlerResponse<bool>(true);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\ValidationErrorDetail.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.ValidationErrorDetail.ErrorMessage
public string ErrorMessage { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\ApplicationData\GetApplicationData\GetApplicationDataRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.ApplicationData.GetApplicationData.GetApplicationDataRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\FileController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.FileController.DownloadPageZipOfFiles
[HttpGet("{applicationId}/sections/{sectionId}/pages/{pageId}/download")]
        public async Task<IActionResult> DownloadPageZipOfFiles(Guid applicationId, Guid sectionId, string pageId)
        {
            var downloadResult = await _mediator.Send(new DownloadFileRequest(applicationId, sectionId, pageId, null, null));

            if (!downloadResult.Success)
            {
                _logger.LogError($"Unable to download files for page {pageId} | Reason : {downloadResult.Message}");
                return BadRequest(new BadRequestError(downloadResult.Message));
            }

            var downloadResultValue = downloadResult.Value;

            return File(downloadResultValue.Stream, downloadResultValue.ContentType, downloadResultValue.FileName);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\ContainerHelpers.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.ContainerHelpers.GetContainer
public static async Task<CloudBlobContainer> GetContainer(string connectionString, string containerName)
        {
            var account = CloudStorageAccount.Parse(connectionString);
            var client = account.CreateCloudBlobClient();
            var container = client.GetContainerReference(containerName);
            await container.CreateIfNotExistsAsync();
            return container;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\ContainerHelpers.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.ContainerHelpers.GetDirectory
public static CloudBlobDirectory GetDirectory(Guid applicationId, Guid sequenceId, Guid sectionId, string pageId, string questionId, CloudBlobContainer container)
        {
            var applicationFolder = container.GetDirectoryReference(applicationId.ToString());
            var sequenceFolder = applicationFolder.GetDirectoryReference(sequenceId.ToString());
            var sectionFolder = sequenceFolder.GetDirectoryReference(sectionId.ToString());
            var pageFolder = sectionFolder.GetDirectoryReference(pageId.ToLower());
            if (questionId is null)
            {
                return pageFolder;
            }
            var questionFolder = pageFolder.GetDirectoryReference(questionId.ToLower());
            return questionFolder;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationControllerTests\StartApplication\When_StartApplication_is_called.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.ApplicationControllerTests.StartApplication.When_StartApplication_is_called.Logger
protected ILogger<ApplicationController> Logger;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Handlers\ResetPagesToIncompleteHandlerTests.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Handlers.ResetPagesToIncompleteHandlerTests.Handle_NoPagesInSection_RequestSucceeds
[Test]
        public async Task Handle_NoPagesInSection_RequestSucceeds()
        {
            var pagesToExclude = new List<string>
            {
                "Page1",
                "Page2",
                "Page3"
            };

            var applicationSection = new ApplicationSection
            {
                ApplicationId = _applicationId,
                SequenceNo = SequenceNo,
                SectionNo = SectionNo,
                QnAData = new QnAData { Pages = null }
            };

            await DataContext.ApplicationSections.AddAsync(applicationSection);
            await DataContext.SaveChangesAsync();
            var request = new ResetPagesToIncompleteRequest(_applicationId, SequenceNo, SectionNo, pagesToExclude);

            var result = await _handler.Handle(request, new CancellationToken());

            var qnaData = DataContext.ApplicationSections.First().QnAData;
            Assert.IsNull(qnaData.Pages);
            Assert.IsTrue(result.Value);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSections\GetSectionsRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSections.GetSectionsRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiConfig.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiConfig.ClientId
public string ClientId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionHandler._mapper
private readonly IMapper _mapper;
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationDataControllerTests\WhenPostingApplicationData.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.ApplicationDataControllerTests.WhenPostingApplicationData.And_MediatorCallFails_ThenNotFoundResultReturned
[Test]
        public async Task And_MediatorCallFails_ThenNotFoundResultReturned()
        {
            var mediator = Substitute.For<IMediator>();
            var controller = new ApplicationDataController(mediator);
            var applicationData = @"{""OrganisationReferenceId"": ""c3333b62-a07c-415e-8778-84222231b0s1""}";
            mediator.Send(Arg.Any<SetApplicationDataRequest>()).Returns(new HandlerResponse<string>() { Success = false, Message = "ApplicationData does not validated against the Project's Schema." });

            var result = await controller.Post(Guid.NewGuid(), applicationData);

            result.Result.Should().BeOfType<NotFoundObjectResult>();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionHandler._notRequiredProcessor
private readonly INotRequiredProcessor _notRequiredProcessor;
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationDataControllerTests\WhenPostingApplicationData.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.ApplicationDataControllerTests.WhenPostingApplicationData.And_MediatorCallIsSuccessful_ThenDeserializedResultReturned
[Test]
        public async Task And_MediatorCallIsSuccessful_ThenDeserializedResultReturned()
        {
            var mediator = Substitute.For<IMediator>();
            var controller = new ApplicationDataController(mediator);
            var applicationData = @"{""OrganisationReferenceId"": ""c3333b62-a07c-415e-8778-84222231b0s1""}";
            var handlerResponseValue = new HandlerResponse<string>() { Value = applicationData, Message = "Test Message", Success = true };
            mediator.Send(Arg.Any<SetApplicationDataRequest>()).Returns(handlerResponseValue);

            var actionResult = await controller.Post(Guid.NewGuid(), handlerResponseValue);

            actionResult.Should().BeOfType<ActionResult<object>>();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionHandler.GetSectionHandler
public GetSectionHandler(QnaDataContext dataContext, IMapper mapper, INotRequiredProcessor notRequiredProcessor)
        {
            _dataContext = dataContext;
            _mapper = mapper;
            _notRequiredProcessor = notRequiredProcessor;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\When_section_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_section_found.Then_pages_has_active_status_set_correctly
[TestCase("1", true)]
        [TestCase("2", false)]
        [TestCase("3", false)]
        public async Task Then_pages_has_active_status_set_correctly(string pageId, bool active)
        {
            await Handler.Handle(new ResetSectionAnswersRequest(ApplicationId, SequenceNo, SectionNo), CancellationToken.None);

            var pageResponse = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, pageId), CancellationToken.None);
            pageResponse.Value.Active.Should().Be(active);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiClient.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiClient.GetSequence
public async Task<List<Section>> GetSequence(Guid applicationId, Guid sequenceId)
        {
            return await HttpCall<List<Section>>(async () => await _httpClient.GetAsync(new Uri($"applications/{applicationId}/sequences/{sequenceId}", UriKind.Relative)));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionHandler.Handle
public async Task<HandlerResponse<Section>> Handle(GetSectionRequest request, CancellationToken cancellationToken)
        {
            var application = await _dataContext.Applications.AsNoTracking().FirstOrDefaultAsync(app => app.Id == request.ApplicationId, cancellationToken: cancellationToken);
            if (application is null) return new HandlerResponse<Section>(false, "Application does not exist");

            var section = await _dataContext.ApplicationSections.AsNoTracking().FirstOrDefaultAsync(sec => sec.Id == request.SectionId && sec.ApplicationId == request.ApplicationId, cancellationToken);
            if (section is null) return new HandlerResponse<Section>(false, "Section does not exist");

            RemovePages(application, section);

            return new HandlerResponse<Section>(_mapper.Map<Section>(section));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationControllerTests\StartApplication\When_StartApplication_is_called.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.ApplicationControllerTests.StartApplication.When_StartApplication_is_called.Mediator
protected IMediator Mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.CheckAllConditionsSatisfied
private static bool CheckAllConditionsSatisfied(Condition condition, string questionTag)
        {
            bool allConditionsSatisified = true;

            if ((string.IsNullOrEmpty(condition.Contains)) && ((!string.IsNullOrEmpty(condition.MustEqual) && questionTag != condition.MustEqual)
                || (string.IsNullOrEmpty(condition.MustEqual) && !string.IsNullOrEmpty(questionTag))))
            {
                allConditionsSatisified = false;
            }

            if (!string.IsNullOrEmpty(condition.Contains))
            {
                var listOfAnswers = string.IsNullOrWhiteSpace(questionTag) ? new string[] { } : questionTag.Split(",", StringSplitOptions.RemoveEmptyEntries);
                if (!listOfAnswers.Contains(condition.Contains))
                {
                    allConditionsSatisified = false;
                }
            }

            return allConditionsSatisified;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationControllerTests\StartApplication\When_StartApplication_is_called.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.ApplicationControllerTests.StartApplication.When_StartApplication_is_called.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationControllerTests\StartApplication\When_StartApplication_is_called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.ApplicationControllerTests.StartApplication.When_StartApplication_is_called.SetUp
[SetUp]
        public void SetUp()
        {
            Logger = Substitute.For<ILogger<ApplicationController>>();
            Mediator = Substitute.For<IMediator>();

            Controller = new ApplicationController(Logger, Mediator);

            ApplicationId = Guid.NewGuid();
            Mediator.Send(Arg.Any<StartApplicationRequest>()).Returns(new HandlerResponse<StartApplicationResponse>() { Value = new StartApplicationResponse() { ApplicationId = ApplicationId } });
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationControllerTests\StartApplication\When_StartApplication_is_called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.ApplicationControllerTests.StartApplication.When_StartApplication_is_called.Then_OkActionResult_is_returned
[Test]
        public void Then_OkActionResult_is_returned()
        {
            var result = Controller.StartApplication(new StartApplicationRequest() { UserReference = "dave", WorkflowType = "EPAO" });
            result.Result.Should().BeOfType<OkObjectResult>();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Projects\UpsertProject\UpsertProjectRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Projects.UpsertProject.UpsertProjectRequest.Project
public Project Project { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersBySectionNoHandlerTests\ResetPageAnswersBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersBySectionNoHandlerTests.ResetPageAnswersBySectionNoTestBase.SectionId
protected Guid SectionId;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Projects\UpsertProject\UpsertProjectRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Projects.UpsertProject.UpsertProjectRequest.UpsertProjectRequest
public UpsertProjectRequest(Guid projectId, Project project)
        {
            ProjectId = projectId;
            Project = project;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersBySectionNoHandlerTests\ResetPageAnswersBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersBySectionNoHandlerTests.ResetPageAnswersBySectionNoTestBase.SequenceNo
protected int SequenceNo;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSequencesTests\When_GetSequences_handled_for_non_existant_application.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSequencesTests.When_GetSequences_handled_for_non_existant_application.Then_success_is_false
[Test]
        public void Then_success_is_false()
        {
            _results.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Infrastructure\SqlTokenGenerator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Infrastructure.SqlTokenGenerator.GenerateTokenAsync
public static async Task<string> GenerateTokenAsync()
        {
            var azureServiceTokenProvider = new AzureServiceTokenProvider();
            var accessToken = await azureServiceTokenProvider.GetAccessTokenAsync(AzureResource);

            return accessToken;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersBySectionNoHandlerTests\ResetPageAnswersBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersBySectionNoHandlerTests.ResetPageAnswersBySectionNoTestBase.SectionNo
protected int SectionNo;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Authentication\AzureAdScopeClaimTransformation.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Authentication.AzureAdScopeClaimTransformation.Constants.ScopeClaimType
public const string ScopeClaimType = "http://schemas.microsoft.com/identity/claims/scope";
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersBySectionNoHandlerTests\ResetPageAnswersBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersBySectionNoHandlerTests.ResetPageAnswersBySectionNoTestBase.Handler
protected ResetPageAnswersBySectionNoHandler Handler;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\CreateSnapshot\CreateSnapshotRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.CreateSnapshot.CreateSnapshotRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersBySectionNoHandlerTests\ResetPageAnswersBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersBySectionNoHandlerTests.ResetPageAnswersBySectionNoTestBase.GetApplicationDataHandler
protected GetApplicationDataHandler GetApplicationDataHandler;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Handlers\ResetPagesToIncompleteHandlerTests.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Handlers.ResetPagesToIncompleteHandlerTests.Handle_NoMatchingSection_RequestSucceeds
[Test]
        public async Task Handle_NoMatchingSection_RequestSucceeds()
        {
            var alternativeSectionNo = 6;

            var pagesToExclude = new List<string>
            {
                "Page1",
                "Page2",
                "Page3"
            };

            var applicationSection = new ApplicationSection
            {
                ApplicationId = _applicationId,
                SequenceNo = SequenceNo,
                SectionNo = alternativeSectionNo,
                QnAData = new QnAData { Pages = null }
            };

            await DataContext.ApplicationSections.AddAsync(applicationSection);
            await DataContext.SaveChangesAsync();
            var request = new ResetPagesToIncompleteRequest(_applicationId, SequenceNo, SectionNo, pagesToExclude);

            var result = await _handler.Handle(request, new CancellationToken());
            var sectionPresent = DataContext.ApplicationSections.Any(x => x.ApplicationId == _applicationId && x.SequenceNo == SequenceNo && x.SectionNo == SectionNo);
            Assert.IsFalse(sectionPresent);
            Assert.IsTrue(result.Value);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersBySectionNoHandlerTests\ResetPageAnswersBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersBySectionNoHandlerTests.ResetPageAnswersBySectionNoTestBase.GetPageHandler
protected GetPageHandler GetPageHandler;
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\Application.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.Application.Id
public Guid Id { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\PagesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.PagesController.RemovePageAnswer
[HttpDelete("{applicationId}/sections/{sectionId}/pages/{pageId}/multiple/{answerId}")]
        [ProducesResponseType((int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.BadRequest)]
        public async Task<ActionResult<Page>> RemovePageAnswer(Guid applicationId, Guid sectionId, string pageId, Guid answerId)
        {
            var removePageAnswerResponse = await _mediator.Send(new RemovePageAnswerRequest(applicationId, sectionId, pageId, answerId), CancellationToken.None);
            if (!removePageAnswerResponse.Success)
            {
                _logger.LogError($"Unable to remove answer for page {pageId} | Reason : {removePageAnswerResponse.Message}");
                return BadRequest(new BadRequestError(removePageAnswerResponse.Message));
            }

            return removePageAnswerResponse.Value.Page;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersBySectionNoHandlerTests\ResetPageAnswersBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersBySectionNoHandlerTests.ResetPageAnswersBySectionNoTestBase.DataContext
protected QnaDataContext DataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Authentication\AzureAdScopeClaimTransformation.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Authentication.AzureAdScopeClaimTransformation.Constants.ObjectIdClaimType
public const string ObjectIdClaimType = "http://schemas.microsoft.com/identity/claims/objectidentifier";
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersBySectionNoHandlerTests\ResetPageAnswersBySectionNoTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersBySectionNoHandlerTests.ResetPageAnswersBySectionNoTestBase.SetUp
[SetUp]
        public async Task SetUp()
        {
            DataContext = DataContextHelpers.GetInMemoryDataContext();
            Handler = new ResetPageAnswersBySectionNoHandler(DataContext, new NotRequiredProcessor(), new TagProcessingService(DataContext));
            GetApplicationDataHandler = new GetApplicationDataHandler(DataContext);
            GetPageHandler = new GetPageHandler(DataContext);

            ApplicationId = Guid.NewGuid();
            SectionId = Guid.NewGuid();
            SequenceNo = 1;
            SectionNo = 2;


            await DataContext.ApplicationSections.AddAsync(new ApplicationSection()
            {
                ApplicationId = ApplicationId,
                Id = SectionId,
                SequenceNo = SequenceNo,
                SectionNo = SectionNo,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page()
                        {
                            PageId = "1",
                            Questions = new List<Question>{new Question(){QuestionId = "Q1", QuestionTag = "Q1", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>{ new PageOfAnswers { Answers = new List<Answer> { new Answer { QuestionId = "Q1", Value = "Yes" } } } },
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "2", Conditions = new List<Condition>(){ new Condition{QuestionId = "Q1", MustEqual = "Yes"}}},
                                new Next(){Action = "NextPage", ReturnId = "3", Conditions = new List<Condition>(){ new Condition{QuestionId = "Q1", MustEqual = "No"}}}
                            },
                            Feedback = new List<Feedback>{ new Feedback { IsCompleted = true } },
                            Active = true,
                            Complete = true
                        },
                        new Page()
                        {
                            PageId = "2",
                            Questions = new List<Question>{new Question(){QuestionId = "Q2", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "ReturnToSequence", Conditions = new List<Condition>() },
                            },
                            Active = true,
                            ActivatedByPageId = "1"
                        },
                        new Page()
                        {
                            PageId = "3",
                            Questions = new List<Question>{new Question(){QuestionId = "Q3", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "ReturnToSequence", Conditions = new List<Condition>()}
                            },
                            Active = false,
                            ActivatedByPageId = "1"
                        }
                    }
                }
            });

            await DataContext.Applications.AddAsync(new Data.Entities.Application() { Id = ApplicationId, ApplicationData = "{ \"Q1\" : \"Yes\" }" });

            await DataContext.SaveChangesAsync();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetPageAnswersRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetPageAnswersRequest.SectionId
public Guid SectionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequence\GetSequenceBySequenceNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetSequence.GetSequenceBySequenceNoRequest.SequenceNo
public int SequenceNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\Application.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.Application.WorkflowId
public Guid WorkflowId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiConfig.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiConfig.TenantId
public string TenantId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetPageAnswersRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetPageAnswersRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequence\GetSequenceBySequenceNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetSequence.GetSequenceBySequenceNoRequest.GetSequenceBySequenceNoRequest
public GetSequenceBySequenceNoRequest(Guid applicationId, int sequenceNo)
        {
            ApplicationId = applicationId;
            SequenceNo = sequenceNo;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetPageAnswersRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetPageAnswersRequest.Answers
public List<Answer> Answers { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\ApplicationData\GetApplicationData\GetApplicationDataHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.ApplicationData.GetApplicationData.GetApplicationDataHandler.GetApplicationDataHandler
public GetApplicationDataHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\MinLengthValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.MinLengthValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", "25", true)]
        [TestCase("Mary had a little lamb", "25", false)]
        [TestCase("    Mary had a little lamb", "25", false)]
        [TestCase("Mary had a little lamb, its fleece was white as snow", "25", true)]
        [TestCase("   Mary had a little lamb, its fleece was white as snow", "25", true)]
        public void Then_correct_errors_are_returned(string input, string minLength, bool isValid)
        {
            var validator = new MinLengthValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Length not achieved",
                    Name = "MinLength",
                    Value = minLength
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetPageAnswersRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetPageAnswersRequest.SetPageAnswersRequest
public SetPageAnswersRequest(Guid applicationId, Guid sectionId, string pageId, List<Answer> answers)
        {
            ApplicationId = applicationId;
            SectionId = sectionId;
            PageId = pageId;
            Answers = answers;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\FileContentValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.FileContentValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("test.jpg", new byte[] { 0xFF, 0xD8, 0xFF }, true)]
        [TestCase("test.JPG", new byte[] { 0xFF, 0xD8, 0xFF }, true)]
        [TestCase("test.JPg", new byte[] { 0xFF, 0xD8, 0xFF }, true)]
        [TestCase("test.jPG", new byte[] { 0xFF, 0xD8, 0xFF }, true)]
        [TestCase("test.JpG", new byte[] { 0xFF, 0xD8, 0xFF }, true)]
        [TestCase("test.jPg", new byte[] { 0xFF, 0xD8, 0xFF }, true)]
        [TestCase("test.jpg.jpg", new byte[] { 0xFF, 0xD8, 0xFF }, true)]
        [TestCase("test.pdf.jpg", new byte[] { 0x25, 0x50, 0x44, 0x46 }, false)]
        [TestCase("pdf-file.jpg", new byte[] { 0x25, 0x50, 0x44, 0x46 }, false)]
        [TestCase("corrupted-file.jpg", new byte[] { 0x0A, 0xD9, 0xEE }, false)]
        public void Then_correct_errors_are_returned(string filename, byte[] fileContent, bool isValid)
        {
            var file = new FormFile(new MemoryStream(fileContent), 0, fileContent.Length, "Q1", filename);
            var formFileCollection = new FormFileCollection { file };

            var validator = new FileContentValidator();
            var errors = validator.Validate(formFileCollection);

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\DeserializerTests\WhenDeserializingApplicationData.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.HandlerResponseDeserializerTests.WhenDeserializingApplicationData.Expected_Properties_And_Values_Are_Returned
[Test]
        public void Expected_Properties_And_Values_Are_Returned()
        {
            var handlerResponse = new HandlerResponse<string>() { Value = File.ReadAllText("DeserializerTests/test.json") };

            var sut = HandlerResponseDeserializer.Deserialize(handlerResponse);

            var value = JsonDocument.Parse(sut.ToString()).RootElement;

            Assert.Multiple(() =>
            {
                Assert.That(value.GetProperty("OrganisationReferenceId")
                                 .GetString(),
                                 Is.EqualTo("c3333b62-a07c-415e-8778-84222231b0s1"));

                Assert.That(value.GetProperty("TradingName")
                                 .ValueKind,
                                 Is.EqualTo(JsonValueKind.Null));

                Assert.That(value.GetProperty("UseTradingName")
                                 .GetBoolean(),
                                 Is.False);

                Assert.That(value.GetProperty("company_number")
                                 .GetString(),
                                 Is.Empty);

                Assert.That(value.GetProperty("CompanySummary")
                                 .GetProperty("CompanyNumber")
                                 .GetString(),
                                 Is.EqualTo("RC123456"));

                Assert.That(value.GetProperty("CharitySummary")
                                 .GetProperty("Trustees")
                                 .EnumerateArray()
                                 .First()
                                 .GetProperty("Name")
                                 .GetString(),
                                 Is.EqualTo("test name 1"));
            });
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\GetWorkflows\GetWorkflowsRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.GetWorkflows.GetWorkflowsRequest.GetWorkflowsRequest
public GetWorkflowsRequest(Guid projectId)
        {
            ProjectId = projectId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\PageDetails.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.PageDetails.Title
public string Title { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\SequencesControllerTests\GetSequence\When_GetSequence_is_called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.SequenceControllerTests.GetSequence.When_GetSequence_is_called.And_Sequence_exists_Then_Sequence_is_returned
[Test]
        public async Task And_Sequence_exists_Then_Sequence_is_returned()
        {
            var applicationId = Guid.NewGuid();
            var sequenceId = Guid.NewGuid();

            var mediator = Substitute.For<IMediator>();

            mediator.Send(Arg.Any<GetSequenceRequest>()).Returns(new HandlerResponse<Sequence>(new Sequence()
            {
                Id = sequenceId,
                SequenceNo = 1,
                ApplicationId = applicationId
            }));

            var sequenceController = new SequencesController(mediator);

            var result = await sequenceController.GetSequence(applicationId, sequenceId);

            result.Value.Should().BeOfType<Sequence>();
            result.Value.Id.Should().Be(sequenceId);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\PageDetails.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.PageDetails.Body
public string Body { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\WorkflowsController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.WorkflowsController._mediator
private readonly IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiConfig.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiConfig.BaseUri
public Uri BaseUri { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Option.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Option.Label
public string Label { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\WorkflowsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.WorkflowsController.WorkflowsController
public WorkflowsController(IMediator mediator)
        {
            _mediator = mediator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiConfig.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiConfig.DisableBearerHeader
public bool DisableBearerHeader { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Option.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Option.HintText
public string HintText { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Option.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Option.HasHintText
public bool HasHintText => !string.IsNullOrWhiteSpace(HintText);
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionRequest.SectionId
public Guid SectionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionRequest.GetSectionRequest
public GetSectionRequest(Guid applicationId, Guid sectionId)
        {
            ApplicationId = applicationId;
            SectionId = sectionId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Option.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Option.ConditionalContentText
public string ConditionalContentText { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetCurrentSequence\GetCurrentSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetCurrentSequence.GetCurrentSequenceRequest.GetCurrentSequenceRequest
public GetCurrentSequenceRequest(Guid applicationId)
        {
            ApplicationId = applicationId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Option.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Option.HasConditionalContentText
public bool HasConditionalContentText => !string.IsNullOrWhiteSpace(ConditionalContentText);
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AnswerValidator.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.AnswerValidator._validatorFactory
private readonly IValidatorFactory _validatorFactory;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSections\GetSectionsRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSections.GetSectionsRequest.GetSectionsRequest
public GetSectionsRequest(Guid applicationId)
        {
            ApplicationId = applicationId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\RegisteredCharityNumberValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.RegisteredCharityNumberValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\RegisteredCharityNumberValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.RegisteredCharityNumberValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text) && !IsValidRegisteredCharityNumber(text))
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase._dataContext
protected readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\RegisteredCharityNumberValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.RegisteredCharityNumberValidator.IsValidRegisteredCharityNumber
private static bool IsValidRegisteredCharityNumber(string registeredCharityNumber)
        {
            try
            {
                // MFC 28/01/2019 left in cos specific rules unclear
                //var rx = new Regex(@"^[0-9]{7}$");
                //if (registeredCharityNumber.Length==8)
                //    registeredCharityNumber = registeredCharityNumber.Replace("-","");

                return Regex.IsMatch(registeredCharityNumber, @"^[0-9-]{1,}$");
            }
            catch (FormatException)
            {
                return false;
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase._notRequiredProcessor
protected readonly INotRequiredProcessor _notRequiredProcessor;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSequences\UpsertWorkflowSequence\UpsertWorkflowSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSequences.UpsertWorkflowSequence.UpsertWorkflowSequenceRequest.SequenceId
public Guid SequenceId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Views\ViewHelpers.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Views.ViewHelpers.PropertyExists
private static bool PropertyExists(dynamic dynamicObject, string name)
        {
            if (dynamicObject is ExpandoObject)
                return ((IDictionary<string, object>)dynamicObject).ContainsKey(name);

            return dynamicObject.GetType().GetProperty(name) != null;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase._tagProcessingService
protected readonly ITagProcessingService _tagProcessingService;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSequences\UpsertWorkflowSequence\UpsertWorkflowSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSequences.UpsertWorkflowSequence.UpsertWorkflowSequenceRequest.Sequence
public WorkflowSequence Sequence { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DeleteFile\DeleteFileRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DeleteFile.DeleteFileHandler.Handle
public async Task<HandlerResponse<bool>> Handle(DeleteFileRequest request, CancellationToken cancellationToken)
        {

            var section = await _dataContext.ApplicationSections.FirstOrDefaultAsync(sec => sec.Id == request.SectionId && sec.ApplicationId == request.ApplicationId, cancellationToken);

            if (section == null)
            {
                return new HandlerResponse<bool>(success: false, message: $"Section {request.SectionId} in Application {request.ApplicationId} does not exist.");
            }

            var qnaData = new QnAData(section.QnAData);
            var page = qnaData.Pages.FirstOrDefault(p => p.PageId == request.PageId);

            if (page == null)
            {
                return new HandlerResponse<bool>(success: false, message: $"Page {request.PageId} in Application {request.ApplicationId} does not exist.");
            }

            if (page.Questions.All(q => q.Input.Type != "FileUpload"))
            {
                return new HandlerResponse<bool>(success: false, message: $"Page {request.PageId} in Application {request.ApplicationId} does not contain any File Upload questions.");
            }

            if (page.PageOfAnswers == null || !page.PageOfAnswers.Any())
            {
                return new HandlerResponse<bool>(success: false, message: $"Page {request.PageId} in Application {request.ApplicationId} does not contain any uploads.");
            }

            var container = await ContainerHelpers.GetContainer(_fileStorageConfig.Value.StorageConnectionString, _fileStorageConfig.Value.ContainerName);
            var directory = ContainerHelpers.GetDirectory(request.ApplicationId, section.SequenceId, request.SectionId, request.PageId, request.QuestionId, container);

            var answer = page.PageOfAnswers.SingleOrDefault(poa => poa.Answers.Any(a => a.QuestionId == request.QuestionId && a.Value == request.FileName));
            if (answer is null)
            {
                return new HandlerResponse<bool>(success: false, message: $"Question {request.QuestionId} on Page {request.PageId} in Application {request.ApplicationId} does not contain an upload named {request.FileName}.");
            }

            page.PageOfAnswers.Remove(answer);

            if (page.PageOfAnswers.Count == 0)
            {
                page.Complete = false;
                if (page.HasFeedback)
                {
                    foreach (var feedback in page.Feedback.Where(feedback => feedback.IsNew).Select(feedback => feedback))
                    {
                        feedback.IsCompleted = false;
                    }
                }
            }
            else
            {
                var answers = page.PageOfAnswers?.SelectMany(p => p.Answers);
                if (answers != null)
                {
                    var validationErrors = _answerValidator.Validate(answers.ToList(), page);
                    if (validationErrors != null && validationErrors.Any())
                        page.Complete = false;
                }
            }

            section.QnAData = qnaData;
            await _dataContext.SaveChangesAsync(cancellationToken);

            var blobRef = directory.GetBlobReference(request.FileName);
            await blobRef.DeleteAsync(cancellationToken);

            await RemoveApplicationDataForThisQuestion(request.ApplicationId, request.QuestionId, page);

            return new HandlerResponse<bool>(true);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileService.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileService.ZipUploadedFiles
private async Task ZipUploadedFiles(string questionId, CancellationToken cancellationToken, MemoryStream zipStream, Page page, CloudBlobDirectory directory)
        {
            using (var zipArchive = new ZipArchive(zipStream, ZipArchiveMode.Create, true))
            {
                foreach (var answer in page.PageOfAnswers.SelectMany(poa => poa.Answers).Where(a => a.QuestionId == questionId))
                {
                    var blobStream = await GetFileStream(cancellationToken, directory, answer.Value);

                    var zipEntry = zipArchive.CreateEntry(answer.Value);
                    using (var entryStream = zipEntry.Open())
                    {
                        blobStream.Item1.CopyTo(entryStream);
                    }
                }
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase._answerValidator
protected readonly IAnswerValidator _answerValidator;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.SetAnswersBase
public SetAnswersBase(QnaDataContext dataContext, INotRequiredProcessor notRequiredProcessor, ITagProcessingService tagProcessingService, IAnswerValidator answerValidator)
        {
            _dataContext = dataContext;
            _notRequiredProcessor = notRequiredProcessor;
            _tagProcessingService = tagProcessingService;
            _answerValidator = answerValidator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSequences\UpsertWorkflowSequence\UpsertWorkflowSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSequences.UpsertWorkflowSequence.UpsertWorkflowSequenceRequest.UpsertWorkflowSequenceRequest
public UpsertWorkflowSequenceRequest(Guid workflowId, Guid sequenceId, WorkflowSequence sequence)
        {
            WorkflowId = workflowId;
            SequenceId = sequenceId;
            Sequence = sequence;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Config\AzureActiveDirectoryConfiguration.cs
BlockTypes.METHOD, SFA.DAS.QnA.Configuration.Config.AzureActiveDirectoryConfiguration.Tenant
public string Tenant { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.SaveAnswersIntoPage
protected void SaveAnswersIntoPage(ApplicationSection section, string pageId, List<Answer> submittedAnswers)
        {
            if (section != null)
            {
                // Have to force QnAData a new object and reassign for Entity Framework to pick up changes
                var qnaData = new QnAData(section.QnAData);
                var page = qnaData?.Pages.SingleOrDefault(p => p.PageId == pageId);

                if (page != null)
                {
                    var answers = GetAnswersFromRequest(submittedAnswers);
                    page.PageOfAnswers = new List<PageOfAnswers>(new[] { new PageOfAnswers() { Answers = answers } });

                    MarkPageAsComplete(page);
                    MarkPageFeedbackAsComplete(page);

                    // Assign QnAData back so Entity Framework will pick up changes
                    section.QnAData = qnaData;
                }
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\WorkflowsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.WorkflowsController.GetWorkflows
[HttpGet("{projectId}")]
        [ProducesResponseType(200)]
        public async Task<ActionResult<List<Workflow>>> GetWorkflows(Guid projectId)
        {
            var getWorkflowsResponse = await _mediator.Send(new GetWorkflowsRequest(projectId));
            return getWorkflowsResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\SectionsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.SectionsController.GetSection
[HttpGet("{applicationId}/sections/{sectionId}")]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<Section>> GetSection(Guid applicationId, Guid sectionId)
        {
            var sectionsResponse = await _mediator.Send(new GetSectionRequest(applicationId, sectionId), CancellationToken.None);
            if (!sectionsResponse.Success) return NotFound();

            return sectionsResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\QnAData.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.QnAData.Pages
public List<Page> Pages { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetPageAnswersHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetPageAnswersHandler.SetPageAnswersHandler
public SetPageAnswersHandler(QnaDataContext dataContext, IAnswerValidator answerValidator, INotRequiredProcessor notRequiredProcessor, ITagProcessingService tagProcessingService) : base(dataContext, notRequiredProcessor, tagProcessingService, answerValidator)
        {
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\UrlValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.UrlValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetPageAnswersHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetPageAnswersHandler.Handle
public async Task<HandlerResponse<SetPageAnswersResponse>> Handle(SetPageAnswersRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.ApplicationSections.SingleOrDefaultAsync(sec => sec.Id == request.SectionId && sec.ApplicationId == request.ApplicationId, cancellationToken);
            var validationErrorResponse = ValidateSetPageAnswersRequest(request.PageId, request.Answers, section);

            if (validationErrorResponse != null)
            {
                return validationErrorResponse;
            }

            SaveAnswersIntoPage(section, request.PageId, request.Answers);

            var application = await _dataContext.Applications.SingleOrDefaultAsync(app => app.Id == request.ApplicationId, cancellationToken);
            UpdateApplicationData(request.PageId, request.Answers, section, application);

            var nextAction = GetNextActionForPage(section, application, request.PageId);
            var checkboxListAllNexts = GetCheckboxListMatchingNextActionsForPage(section, application, request.PageId);

            SetStatusOfNextPagesBasedOnDeemedNextActions(section, request.PageId, nextAction, checkboxListAllNexts);

            await _dataContext.SaveChangesAsync(cancellationToken);

            return new HandlerResponse<SetPageAnswersResponse>(new SetPageAnswersResponse(nextAction.Action, nextAction.ReturnId));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\UrlValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.UrlValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text) && !IsValidUrl(text))
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\ResetPageAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.ResetPageAnswersResponse.ResetPageAnswersResponse
public ResetPageAnswersResponse()
        { }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\StartApplication\StartApplicationHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.StartApplication.StartApplicationHandler._applicationDataValidator
private readonly IApplicationDataValidator _applicationDataValidator;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\UrlValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.UrlValidator.IsValidUrl
private static bool IsValidUrl(string url)
        {
            bool isValid;

            try
            {
                // This is intended for HTTPS & HTTP protocol only
                isValid = Regex.IsMatch(url,
                    @"^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$");
            }
            catch (FormatException)
            {
                isValid = false;
            }

            if (!isValid)
            {
                // This is backup plan, but only validate against an Absolute Uri!
                isValid = Uri.IsWellFormedUriString(url, UriKind.Absolute);
            }

            return isValid;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\StartApplication\StartApplicationHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.StartApplication.StartApplicationHandler._logger
private readonly ILogger<StartApplicationHandler> _logger;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\StartApplication\StartApplicationHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.StartApplication.StartApplicationHandler._applicationDataIsInvalid
private bool _applicationDataIsInvalid;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\FileController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.FileController.DownloadFileOrZipOfFiles
[HttpGet("{applicationId}/sections/{sectionId}/pages/{pageId}/questions/{questionId}/download")]
        public async Task<IActionResult> DownloadFileOrZipOfFiles(Guid applicationId, Guid sectionId, string pageId, string questionId)
        {
            var downloadResult = await _mediator.Send(new DownloadFileRequest(applicationId, sectionId, pageId, questionId, null));

            if (!downloadResult.Success)
            {
                _logger.LogError($"Unable to download files for question {questionId} | Reason : {downloadResult.Message}");
                return BadRequest(new BadRequestError(downloadResult.Message));
            }

            var downloadResultValue = downloadResult.Value;

            return File(downloadResultValue.Stream, downloadResultValue.ContentType, downloadResultValue.FileName);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\StartApplication\StartApplicationHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.StartApplication.StartApplicationHandler.StartApplicationHandler
public StartApplicationHandler(QnaDataContext dataContext, IApplicationDataValidator applicationDataValidator, ILogger<StartApplicationHandler> logger)
        {
            _dataContext = dataContext;
            _applicationDataValidator = applicationDataValidator;
            _logger = logger;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\StartApplication\StartApplicationHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.StartApplication.StartApplicationHandler.Handle
public async Task<HandlerResponse<StartApplicationResponse>> Handle(StartApplicationRequest request, CancellationToken cancellationToken)
        {
            var latestWorkflow = await _dataContext.Workflows.AsNoTracking()
                .SingleOrDefaultAsync(w => w.Type == request.WorkflowType && w.Status == "Live", cancellationToken);

            if (latestWorkflow is null)
            {
                _logger.LogError($"Workflow type {request.WorkflowType} does not exist");
                return new HandlerResponse<StartApplicationResponse>(false, $"Workflow Type does not exist.");
            }

            try
            {
                _applicationDataIsInvalid = !_applicationDataValidator.IsValid(latestWorkflow.ApplicationDataSchema, request.ApplicationData);
            }
            catch (JsonException)
            {
                _logger.LogError("Supplied ApplicationData is not valid JSON");
                return new HandlerResponse<StartApplicationResponse>(false, $"Supplied ApplicationData is not valid JSON.");
            }

            if (_applicationDataIsInvalid)
            {
                _logger.LogError("Supplied ApplicationData is not valid using Project's Schema");
                return new HandlerResponse<StartApplicationResponse>(false, $"Supplied ApplicationData is not valid using Project's Schema.");
            }

            var newApplication = await CreateNewApplication(request, latestWorkflow, cancellationToken, request.ApplicationData);

            if (newApplication is null)
            {
                _logger.LogError($"Workflow type {request.WorkflowType} does not exist");
                return new HandlerResponse<StartApplicationResponse>(false, $"WorkflowType '{request.WorkflowType}' does not exist.");
            }

            await CopyWorkflows(cancellationToken, newApplication);
            await _dataContext.SaveChangesAsync(cancellationToken);

            _logger.LogInformation($"Successfully created new Application. Application Id = {newApplication.Id} | Workflow = {request.WorkflowType}");
            return new HandlerResponse<StartApplicationResponse>(new StartApplicationResponse { ApplicationId = newApplication.Id });
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesHandler.GetAnswersToValidate
private static List<Answer> GetAnswersToValidate(SubmitPageOfFilesRequest request, Page page)
        {
            var answers = GetAnswersFromRequest(request);

            foreach (var existingAnswer in GetExistingAnswersFromPage(page))
            {
                if (answers.All(a => a.QuestionId != existingAnswer.QuestionId))
                {
                    answers.Add(existingAnswer);
                }
            }

            return answers;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Config\FileStorageConfig.cs
BlockTypes.METHOD, SFA.DAS.QnA.Configuration.Config.FileStorageConfig.FileEncryptionKey
public string FileEncryptionKey { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\DeleteFeedback\DeleteFeedbackRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.DeleteFeedback.DeleteFeedbackRequest.SectionId
public Guid SectionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\FindNextRequiredActionTests\FindNextRequiredActionTestsBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.FindNextRequiredActionTests.FindNextRequiredActionTestsBase.SetAnswersBase
protected SetAnswersBase SetAnswersBase;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\DeleteFeedback\DeleteFeedbackRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.DeleteFeedback.DeleteFeedbackRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\QnAData.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.QnAData.QnAData
public QnAData() { }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\DeleteFeedback\DeleteFeedbackRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.DeleteFeedback.DeleteFeedbackRequest.FeedbackId
public Guid FeedbackId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\AddPageAnswerRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.AddPageAnswer.AddPageAnswerRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\DeleteFeedback\DeleteFeedbackRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.DeleteFeedback.DeleteFeedbackRequest.DeleteFeedbackRequest
public DeleteFeedbackRequest(Guid applicationId, Guid sectionId, string pageId, Guid feedbackId)
        {
            ApplicationId = applicationId;
            SectionId = sectionId;
            PageId = pageId;
            FeedbackId = feedbackId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Data\QnaDataContext.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.QnaDataContext.Workflows
public DbSet<Workflow> Workflows { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\SetPageAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.SetPageAnswersResponse.ValidationErrors
public List<KeyValuePair<string, string>> ValidationErrors { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Project.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Project.Id
public Guid Id { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ApplicationDataValidatorTests\When_valid_applicationData_supplied.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ApplicationDataValidatorTests.When_valid_applicationData_supplied.Then_returns_true
[Test]
        public void Then_returns_true()
        {
            var validator = new ApplicationDataValidator();

            var schema = @"{   '$schema': 'http://json-schema.org/draft-04/schema#',   'definitions': {},   'id': 'http://example.com/example.json',   'properties': {     'TradingName': {       'anyOf': [             {'type':'string'},             {'type':'null'}         ]     },     'UseTradingName': {       'minLength': 1,       'type': 'boolean'     },     'ContactGivenName': {       'anyOf': [             {'type':'string'},             {'type':'null'}         ]     },     'ReferenceNumber': {        'anyOf': [             {'type':'string'},             {'type':'null'}         ]     },     'StandardCode': {       'anyOf': [             {'type':'string'},             {'type':'null'}         ]     },      'StandardName': {       'anyOf': [             {'type':'string'},             {'type':'null'}         ]     },     'OrganisationReferenceId': {       'minLength': 1,       'type': 'string'     },     'OrganisationName': {       'minLength': 1,       'type': 'string'     }   },   'additionalProperties': false,   'required': [     'OrganisationReferenceId',     'OrganisationName'   ],   'type': 'object'  }";

            var result = validator.IsValid(schema, "{'OrganisationReferenceId':'123', 'OrganisationName':'Org1'}");

            result.Should().BeTrue();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSectionsTests\When_GetSections_handled_for_non_existant_application.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSectionsTests.When_GetSections_handled_for_non_existant_applicationn.Act
[SetUp]
        public async Task Act()
        {
            _results = await Handler.Handle(new GetSectionsRequest(Guid.NewGuid()), CancellationToken.None);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Project.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Project.Name
public string Name { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\SetPageAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.SetPageAnswersResponse.SetPageAnswersResponse
public SetPageAnswersResponse(string nextAction, string nextActionId)
        {
            ValidationPassed = true;
            NextAction = nextAction;
            NextActionId = nextActionId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\SubmitPageOfFilesTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.SubmitPageOfFilesTestBase.GenerateFile
protected static FormFile GenerateFile(string content, string questionId, string filename)
        {
            return new FormFile(new MemoryStream(Encoding.UTF8.GetBytes(content)), 0, 0, questionId, filename)
            {
                Headers = new HeaderDictionary(),
                ContentType = "application/octet-stream"
            };
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Project.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Project.ApplicationDataSchema
public string ApplicationDataSchema { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\SetPageAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.SetPageAnswersResponse.NextAction
public string NextAction { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSectionsTests\When_GetSections_handled_for_non_existant_application.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSectionsTests.When_GetSections_handled_for_non_existant_applicationn.Then_no_sections_are_returned
[Test]
        public void Then_no_sections_are_returned()
        {
            _results.Value.Should().BeNull();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiClient.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiClient.GetSequenceBySequenceNo
public async Task<List<Section>> GetSequenceBySequenceNo(Guid applicationId, int sequenceNo)
        {
            return await HttpCall<List<Section>>(async () => await _httpClient.GetAsync(new Uri($"applications/{applicationId}/sequences/{sequenceNo}", UriKind.Relative)));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Project.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Project.CreatedAt
public DateTime CreatedAt { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\SetPageAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.SetPageAnswersResponse.NextActionId
public string NextActionId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Project.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Project.CreatedBy
public string CreatedBy { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Section.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Section.Id
public Guid Id { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\SetPageAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.SetPageAnswersResponse.SetPageAnswersResponse
public SetPageAnswersResponse(List<KeyValuePair<string, string>> validationErrors)
        {
            ValidationErrors = validationErrors;
            ValidationPassed = false;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Section.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Section.ApplicationId
public Guid ApplicationId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\AddPageAnswerRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.AddPageAnswer.AddPageAnswerRequest.SectionId
public Guid SectionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\AddPageAnswerRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.AddPageAnswer.AddPageAnswerRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Section.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Section.SequenceNo
public int SequenceNo { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\AddPageAnswerRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.AddPageAnswer.AddPageAnswerRequest.Answers
public List<Answer> Answers { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\CreateSnapshot\CreateSnapshotHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.CreateSnapshot.CreateSnapshotHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Section.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Section.SectionNo
public int SectionNo { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\AddPageAnswerRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.AddPageAnswer.AddPageAnswerRequest.AddPageAnswerRequest
public AddPageAnswerRequest(Guid applicationId, Guid sectionId, string pageId, List<Answer> answers)
        {
            ApplicationId = applicationId;
            SectionId = sectionId;
            PageId = pageId;
            Answers = answers;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\CreateSnapshot\CreateSnapshotHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.CreateSnapshot.CreateSnapshotHandler._fileStorageConfig
private readonly IOptions<FileStorageConfig> _fileStorageConfig;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Section.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Section.QnAData
public QnAData QnAData { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\CreateSnapshot\CreateSnapshotHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.CreateSnapshot.CreateSnapshotHandler._logger
private readonly ILogger<CreateSnapshotHandler> _logger;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\StartApplication\StartApplicationHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.StartApplication.StartApplicationHandler.CreateNewApplication
private async Task<Data.Entities.Application> CreateNewApplication(StartApplicationRequest request, Workflow latestWorkflow, CancellationToken cancellationToken, string applicationData)
        {
            var newApplication = new Data.Entities.Application
            {
                ApplicationStatus = ApplicationStatus.InProgress,
                WorkflowId = latestWorkflow.Id,
                Reference = request.UserReference,
                CreatedAt = SystemTime.UtcNow(),
                ApplicationData = applicationData
            };

            _dataContext.Applications.Add(newApplication);
            _logger.LogInformation($"Created Application entity: {newApplication.Id}");

            return newApplication;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Section.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Section.Status
public string Status { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\CreateSnapshot\CreateSnapshotHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.CreateSnapshot.CreateSnapshotHandler.CreateSnapshotHandler
public CreateSnapshotHandler(QnaDataContext dataContext, IOptions<FileStorageConfig> fileStorageConfig, ILogger<CreateSnapshotHandler> logger)
        {
            _dataContext = dataContext;
            _fileStorageConfig = fileStorageConfig;
            _logger = logger;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileBySectionNoRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageBySectionNoTests\When_CanUpdatePageBySectionNo_handled_for_non_existent_page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdatePageBySectionNoTests.When_CanUpdatePageBySectionNo_handled_for_non_existent_page.Then_unsuccessful_response_is_returned
[Test]
        public async Task Then_unsuccessful_response_is_returned()
        {
            var result = await Handler.Handle(new CanUpdatePageBySectionNoRequest(ApplicationId, SequenceNo, SectionNo, Guid.NewGuid().ToString()), CancellationToken.None);

            result.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\AzureTableStorageConfigurationSource.cs
BlockTypes.METHOD, SFA.DAS.QnA.Configuration.Infrastructure.AzureTableStorageConfigurationSource.Build
public IConfigurationProvider Build(IConfigurationBuilder builder)
        {
            return new AzureTableStorageConfigurationProvider(_connection, _appName, _environment, _version);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\RemovePageAnswer\RemovePageAnswerRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.RemovePageAnswer.RemovePageAnswerRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.ValidateSetPageAnswersRequest
protected HandlerResponse<SetPageAnswersResponse> ValidateSetPageAnswersRequest(string pageId, List<Answer> submittedAnswers, ApplicationSection section)
        {
            var page = section?.QnAData?.Pages.SingleOrDefault(p => p.PageId == pageId);

            if (page is null)
            {
                return new HandlerResponse<SetPageAnswersResponse>(success: false, message: "Cannot find requested page.");
            }
            else if (submittedAnswers is null)
            {
                return new HandlerResponse<SetPageAnswersResponse>(success: false, message: "No answers specified.");
            }
            else if (submittedAnswers.Any(a => a.QuestionId is null))
            {
                return new HandlerResponse<SetPageAnswersResponse>(success: false, message: "All answers must specify which question they are related to.");
            }
            else if (page.AllowMultipleAnswers)
            {
                return new HandlerResponse<SetPageAnswersResponse>(success: false, message: "This endpoint cannot be used for Multiple Answers pages. Use AddAnswer / RemoveAnswer instead.");
            }
            else if (page.Questions.Any())
            {
                var answers = GetAnswersFromRequest(submittedAnswers);

                if (page.Questions.All(q => "FileUpload".Equals(q.Input?.Type, StringComparison.InvariantCultureIgnoreCase)))
                {
                    return new HandlerResponse<SetPageAnswersResponse>(success: false, message: "This endpoint cannot be used for FileUpload questions. Use Upload / DeleteFile instead.");
                }
                else if (page.Questions.Any(q => "FileUpload".Equals(q.Input?.Type, StringComparison.InvariantCultureIgnoreCase)))
                {
                    return new HandlerResponse<SetPageAnswersResponse>(success: false, message: "Pages cannot contain a mixture of FileUploads and other Question Types.");
                }
                else if (page.Questions.Count > answers.Count)
                {
                    return new HandlerResponse<SetPageAnswersResponse>(success: false, message: $"Number of Answers supplied ({answers.Count}) does not match number of first level Questions on page ({page.Questions.Count}).");
                }

                var validationErrors = _answerValidator.Validate(answers, page);
                if (validationErrors.Any())
                {
                    return new HandlerResponse<SetPageAnswersResponse>(new SetPageAnswersResponse(validationErrors));
                }
            }

            return null;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AnswerValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.AnswerValidator.AnswerValidator
public AnswerValidator(IValidatorFactory validatorFactory)
        {
            _validatorFactory = validatorFactory;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageTests\GetPageTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageTests.GetPageTestBase.Handler
protected GetPageHandler Handler;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Infrastructure\NotFoundError.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Infrastructure.NotFoundError.NotFoundError
public NotFoundError(string message)
            : base(404, HttpStatusCode.NotFound.ToString(), message)
        {
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetPageAnswersRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetPageAnswersRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesRequest.SectionId
public Guid SectionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageTests\GetPageTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageTests.GetPageTestBase.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageTests\GetPageTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageTests.GetPageTestBase.SectionId
protected Guid SectionId;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\SectionsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.SectionsController.GetSectionBySectionNo
[HttpGet("{applicationId}/sequences/{sequenceNo}/sections/{sectionNo}")]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<Section>> GetSectionBySectionNo(Guid applicationId, int sequenceNo, int sectionNo)
        {
            var sectionsResponse = await _mediator.Send(new GetSectionBySectionNoRequest(applicationId, sequenceNo, sectionNo), CancellationToken.None);
            if (!sectionsResponse.Success) return NotFound();

            return sectionsResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesRequest.Files
public IFormFileCollection Files { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetCurrentSequence\GetCurrentSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetCurrentSequence.GetCurrentSequenceRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesRequest.SubmitPageOfFilesRequest
public SubmitPageOfFilesRequest(Guid applicationId, Guid sectionId, string pageId, IFormFileCollection files)
        {
            ApplicationId = applicationId;
            SectionId = sectionId;
            PageId = pageId;
            Files = files;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\StartApplicationTests\When_StartApplication_handled.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.StartApplicationTests.When_StartApplication_handled.Then_a_new_Application_record_is_created
[Test]
        public async Task Then_a_new_Application_record_is_created()
        {
            await Handler.Handle(new StartApplicationRequest() { UserReference = "dave", WorkflowType = "EPAO" }, CancellationToken.None);

            var newApplications = await DataContext.Applications.ToListAsync();

            newApplications.Count.Should().Be(1);
            newApplications.First().WorkflowId.Should().Be(WorkflowId);
            newApplications.First().ApplicationStatus.Should().Be(ApplicationStatus.InProgress);
            newApplications.First().Reference.Should().Be("dave");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetCurrentSequenceTests\When_GetCurrentSequence_handled_for_non_existent_applicationId.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetCurrentSequenceTests.When_GetCurrentSequence_handled_for_non_existent_applicationId.Then_the_current_sequence_is_returned
[Test]
        public async Task Then_the_current_sequence_is_returned()
        {
            var results = await Handler.Handle(new GetCurrentSequenceRequest(Guid.NewGuid()), CancellationToken.None);

            results.Value.Should().BeNull();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSequenceSections\GetSequenceSectionsHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sections.GetSequenceSections.GetSequenceSectionsHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\StartApplicationTests\When_StartApplication_handled.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.StartApplicationTests.When_StartApplication_handled.Then_the_correct_sequences_are_created
[Test]
        public async Task Then_the_correct_sequences_are_created()
        {
            await Handler.Handle(new StartApplicationRequest() { UserReference = "dave", WorkflowType = "EPAO" }, CancellationToken.None);

            var newApplication = await DataContext.Applications.FirstAsync();
            var newSequences = await DataContext.ApplicationSequences.OrderBy(s => s.SequenceNo).ToListAsync();

            newSequences.Count.Should().Be(2);
            newSequences.Should().AllBeEquivalentTo(new { ApplicationId = newApplication.Id });
            newSequences[0].SequenceNo.Should().Be(1);
            newSequences[1].SequenceNo.Should().Be(2);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageTests\GetPageTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageTests.GetPageTestBase.PageId
protected string PageId;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSequenceSections\GetSequenceSectionsHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sections.GetSequenceSections.GetSequenceSectionsHandler._mapper
private readonly IMapper _mapper;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageTests\GetPageTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageTests.GetPageTestBase.SetUp
[SetUp]
        public async Task SetUp()
        {
            ApplicationId = Guid.NewGuid();
            SectionId = Guid.NewGuid();
            PageId = Guid.NewGuid().ToString();

            var dataContext = DataContextHelpers.GetInMemoryDataContext();

            dataContext.Applications.Add(new Data.Entities.Application()
            {
                Id = ApplicationId,
            });

            dataContext.ApplicationSections.Add(new ApplicationSection()
            {
                Id = SectionId,
                ApplicationId = ApplicationId,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page { PageId = PageId }
                    }
                }
            });

            dataContext.SaveChanges();

            Handler = new GetPageHandler(dataContext);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSequenceSections\GetSequenceSectionsHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sections.GetSequenceSections.GetSequenceSectionsHandler._notRequiredProcessor
private readonly INotRequiredProcessor _notRequiredProcessor;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSequenceSections\GetSequenceSectionsHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSequenceSections.GetSequenceSectionsHandler.GetSequenceSectionsHandler
public GetSequenceSectionsHandler(QnaDataContext dataContext, IMapper mapper, INotRequiredProcessor notRequiredProcessor)
        {
            _dataContext = dataContext;
            _mapper = mapper;
            _notRequiredProcessor = notRequiredProcessor;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSequenceSections\GetSequenceSectionsHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSequenceSections.GetSequenceSectionsHandler.Handle
public async Task<HandlerResponse<List<Section>>> Handle(GetSequenceSectionsRequest request, CancellationToken cancellationToken)
        {
            var application = await _dataContext.Applications.AsNoTracking().FirstOrDefaultAsync(app => app.Id == request.ApplicationId, cancellationToken: cancellationToken);
            if (application is null) return new HandlerResponse<List<Section>>(false, "Application does not exist");

            var sections = _mapper.Map<List<Section>>(await _dataContext.ApplicationSections.AsNoTracking().Where(section => section.SequenceId == request.SequenceId).ToListAsync(cancellationToken: cancellationToken));

            if (!sections.Any())
            {
                return new HandlerResponse<List<Section>>(false, "Sequence does not exist");
            }

            foreach (var section in sections)
            {
                RemovePages(application, section);
            }

            return new HandlerResponse<List<Section>>(sections);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageBySectionNoTests\GetPageBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageBySectionNoTests.GetPageBySectionNoTestBase.SequenceNo
protected int SequenceNo;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.ValidateResetPageAnswersRequest
protected HandlerResponse<ResetPageAnswersResponse> ValidateResetPageAnswersRequest(string pageId, ApplicationSection section)
        {
            var page = section?.QnAData?.Pages.SingleOrDefault(p => p.PageId == pageId);

            if (page is null)
            {
                return new HandlerResponse<ResetPageAnswersResponse>(success: false, message: "Cannot find requested page.");
            }
            else if (page.Questions.Any())
            {
                if (page.Questions.All(q => "FileUpload".Equals(q.Input?.Type, StringComparison.InvariantCultureIgnoreCase)))
                {
                    return new HandlerResponse<ResetPageAnswersResponse>(success: false, message: "This endpoint cannot be used for FileUpload questions. Use Upload / DeleteFile instead.");
                }
                else if (page.Questions.Any(q => "FileUpload".Equals(q.Input?.Type, StringComparison.InvariantCultureIgnoreCase)))
                {
                    return new HandlerResponse<ResetPageAnswersResponse>(success: false, message: "Pages cannot contain a mixture of FileUploads and other Question Types.");
                }
            }

            return null;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\EmailValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.EmailValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", true)]
        [TestCase("test", false)]
        [TestCase("test@test", false)]
        [TestCase("test@test      .com", false)]
        [TestCase("test@test.com", true)]
        [TestCase("test@test.co.uk", true)]
        [TestCase("test@test.education", true)]
        [TestCase("test.test@test.com", true)]
        [TestCase("test-test@test.com", true)]
        [TestCase("test.test@test.co.uk", true)]
        [TestCase("test-test@test.co.uk", true)]
        [TestCase("test.test@test.education", true)]
        [TestCase("test-test@test.education", true)]
        [TestCase("test.test@123.com", true)]
        [TestCase("test-test@123.com", true)]
        [TestCase("test.test@123.co.uk", true)]
        [TestCase("test-test@123.co.uk", true)]
        [TestCase("test.test@123test.com", true)]
        [TestCase("test-test@123test.com", true)]
        [TestCase("test.test@123test.co.uk", true)]
        [TestCase("test-test@123test.co.uk", true)]
        [TestCase("test.test@123test.education", true)]
        [TestCase("test-test@123test.education", true)]
        public void Then_correct_errors_are_returned(string input, bool isValid)
        {
            var validator = new EmailValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Not a valid Email Address",
                    Name = "Email"
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Workflows\GetWorkflow\GetWorkflowRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Workflows.GetWorkflow.GetWorkflowRequest.ProjectId
public Guid ProjectId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationSequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.ApplicationSequence.Id
public Guid Id { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Workflows\CreateWorkflow\CreateWorkflowRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Workflows.CreateWorkflow.CreateWorkflowRequest.Workflow
public Workflow Workflow { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Workflows\GetWorkflow\GetWorkflowRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Workflows.GetWorkflow.GetWorkflowRequest.WorkflowId
public Guid WorkflowId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationControllerTests\StartApplication\When_StartApplication_is_called.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.ApplicationControllerTests.StartApplication.When_StartApplication_is_called_for_nonexistant_workflowtype.Controller
protected ApplicationController Controller;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileBySectionNoRequest.SequenceNo
public int SequenceNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Workflows\CreateWorkflow\CreateWorkflowRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Workflows.CreateWorkflow.CreateWorkflowRequest.CreateWorkflowRequest
public CreateWorkflowRequest(Guid projectId, Workflow workflow)
        {
            ProjectId = projectId;
            Workflow = workflow;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileBySectionNoRequest.SectionNo
public int SectionNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\ResetPageAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetPageAnswersTestBase.SectionId
protected Guid SectionId;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\ResetPageAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetPageAnswersTestBase.Handler
protected ResetPageAnswersHandler Handler;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileBySectionNoRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\ResetPageAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetPageAnswersTestBase.GetApplicationDataHandler
protected GetApplicationDataHandler GetApplicationDataHandler;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageTests\When_GetPage_handled.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageTests.When_GetPage_handled.Then_the_Page_is_returned
[Test]
        public async Task Then_the_Page_is_returned()
        {
            var result = await Handler.Handle(new GetPageRequest(ApplicationId, SectionId, PageId), CancellationToken.None);

            result.Value.Should().NotBeNull();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileBySectionNoHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileBySectionNoHandler._fileStorageConfig
private readonly IOptions<FileStorageConfig> _fileStorageConfig;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileBySectionNoRequest.QuestionId
public string QuestionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\ResetPageAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetPageAnswersTestBase.GetPageHandler
protected GetPageHandler GetPageHandler;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\ResetSectionAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.ResetSectionAnswersResponse.ResetSectionAnswersResponse
public ResetSectionAnswersResponse()
        { }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileBySectionNoHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileBySectionNoHandler._encryptionService
private readonly IEncryptionService _encryptionService;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileBySectionNoRequest.FileName
public string FileName { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileBySectionNoHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileBySectionNoHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileBySectionNoRequest.DownloadFileBySectionNoRequest
public DownloadFileBySectionNoRequest(Guid applicationId, int sequenceNo, int sectionNo, string pageId, string questionId, string fileName)
        {
            ApplicationId = applicationId;
            SequenceNo = sequenceNo;
            SectionNo = sectionNo;
            PageId = pageId;
            QuestionId = questionId;
            FileName = fileName;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\ResetPageAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetPageAnswersTestBase.DataContext
protected QnaDataContext DataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Condition.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Condition.QuestionTag
public string QuestionTag { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileBySectionNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileBySectionNoHandler.DownloadFileBySectionNoHandler
public DownloadFileBySectionNoHandler(IOptions<FileStorageConfig> fileStorageConfig, IEncryptionService encryptionService, QnaDataContext dataContext)
        {
            _fileStorageConfig = fileStorageConfig;
            _encryptionService = encryptionService;
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\ResetPageAnswersTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetPageAnswersTestBase.SetUp
[SetUp]
        public async Task SetUp()
        {
            DataContext = DataContextHelpers.GetInMemoryDataContext();
            Handler = new ResetPageAnswersHandler(DataContext, new NotRequiredProcessor(), new TagProcessingService(DataContext));
            GetApplicationDataHandler = new GetApplicationDataHandler(DataContext);
            GetPageHandler = new GetPageHandler(DataContext);

            ApplicationId = Guid.NewGuid();
            SectionId = Guid.NewGuid();
            await DataContext.ApplicationSections.AddAsync(new ApplicationSection()
            {
                ApplicationId = ApplicationId,
                Id = SectionId,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page()
                        {
                            PageId = "1",
                            Questions = new List<Question>{new Question(){QuestionId = "Q1", QuestionTag = "Q1", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>{ new PageOfAnswers { Answers = new List<Answer> { new Answer { QuestionId = "Q1", Value = "Yes" } } } },
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "2", Conditions = new List<Condition>(){ new Condition{QuestionId = "Q1", MustEqual = "Yes"}}},
                                new Next(){Action = "NextPage", ReturnId = "3", Conditions = new List<Condition>(){ new Condition{QuestionId = "Q1", MustEqual = "No"}}}
                            },
                            Feedback = new List<Feedback>{ new Feedback { IsCompleted = true } },
                            Active = true,
                            Complete = true
                        },
                        new Page()
                        {
                            PageId = "2",
                            Questions = new List<Question>{new Question(){QuestionId = "Q2", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "ReturnToSequence", Conditions = new List<Condition>() },
                            },
                            Active = true,
                            ActivatedByPageId = "1"
                        },
                        new Page()
                        {
                            PageId = "3",
                            Questions = new List<Question>{new Question(){QuestionId = "Q3", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "ReturnToSequence", Conditions = new List<Condition>()}
                            },
                            Active = false,
                            ActivatedByPageId = "1"
                        }
                    }
                }
            });

            await DataContext.Applications.AddAsync(new Data.Entities.Application() { Id = ApplicationId, ApplicationData = "{ \"Q1\" : \"Yes\" }" });

            await DataContext.SaveChangesAsync();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Condition.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Condition.MustEqual
public string MustEqual { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileBySectionNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileBySectionNoHandler.Handle
public async Task<HandlerResponse<DownloadFile>> Handle(DownloadFileBySectionNoRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.ApplicationSections.FirstOrDefaultAsync(sec => sec.SectionNo == request.SectionNo && sec.SequenceNo == request.SequenceNo && sec.ApplicationId == request.ApplicationId, cancellationToken);

            if (section == null)
            {
                return new HandlerResponse<DownloadFile>(success: false, message: $"Section {request.SectionNo} in Application {request.ApplicationId} does not exist.");
            }

            var downloadSerivce = new DownloadFileService(_fileStorageConfig, _encryptionService);
            return await downloadSerivce.GetDownloadFile(request.ApplicationId, section, request.PageId, request.QuestionId, request.FileName, cancellationToken);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\Application.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.Application.Reference
public string Reference { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Condition.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Condition.Contains
public string Contains { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\Application.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.Application.CreatedAt
public DateTime CreatedAt { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\Application.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.Application.ApplicationStatus
public string ApplicationStatus { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\Application.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.Application.ApplicationData
public string ApplicationData { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersBySectionNoHandlerTests\When_page_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersBySectionNoHandlerTests.When_page_found.Then_successful_response
[Test]
        public async Task Then_successful_response()
        {
            var response = await Handler.Handle(new ResetPageAnswersBySectionNoRequest(ApplicationId, SequenceNo, SectionNo, "1"), CancellationToken.None);

            response.Value.HasPageAnswersBeenReset.Should().BeTrue();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersBySectionNoHandlerTests\When_page_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersBySectionNoHandlerTests.When_page_found.Then_page_answers_are_reset
[Test]
        public async Task Then_page_answers_are_reset()
        {
            await Handler.Handle(new ResetPageAnswersBySectionNoRequest(ApplicationId, SequenceNo, SectionNo, "1"), CancellationToken.None);

            var getPageResponse = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, "1"), CancellationToken.None);
            getPageResponse.Value.PageOfAnswers.Should().BeEmpty();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationSection.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.ApplicationSection.Id
public Guid Id { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequences\GetSequencesRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetSequences.GetSequencesRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSequences\GetWorkflowSequences\GetWorkflowSequencesRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSequences.GetWorkflowSequences.GetWorkflowSequencesRequest.WorkflowId
public Guid WorkflowId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersBySectionNoHandlerTests\When_page_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersBySectionNoHandlerTests.When_page_found.Then_page_complete_is_false
[Test]
        public async Task Then_page_complete_is_false()
        {
            await Handler.Handle(new ResetPageAnswersBySectionNoRequest(ApplicationId, SequenceNo, SectionNo, "1"), CancellationToken.None);

            var getPageResponse = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, "1"), CancellationToken.None);
            getPageResponse.Value.Complete.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\FinancialApplicationGrade.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.FinancialApplicationGrade.InadequateMoreInformation
public string InadequateMoreInformation { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\QnaDataContext.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.QnaDataContext.WorkflowSections
public DbSet<WorkflowSection> WorkflowSections { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\QnaDataContext.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.QnaDataContext.QnaDataContext
public QnaDataContext(DbContextOptions<QnaDataContext> options) : base(options)
        {
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequence\GetSequenceHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sequences.GetSequence.GetSequenceHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSequences\GetWorkflowSequence\GetWorkflowSequenceHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.WorkflowSequences.GetWorkflowSequence.GetWorkflowSequenceHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Data\QnaDataContext.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.QnaDataContext.OnModelCreating
protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ApplicationSection>()
                .Property(c => c.QnAData)
                .HasConversion(
                    v => JsonSerializer.Serialize(v,
                        new JsonSerializerOptions { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull }),
                    v => JsonSerializer.Deserialize<QnAData>(v,
                        new JsonSerializerOptions { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull }));

            modelBuilder.Entity<WorkflowSection>()
                .Property(c => c.QnAData)
                .HasConversion(
                    v => JsonSerializer.Serialize(v,
                        new JsonSerializerOptions { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull }),
                    v => JsonSerializer.Deserialize<QnAData>(v,
                        new JsonSerializerOptions { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull }));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequence\GetSequenceHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sequences.GetSequence.GetSequenceHandler._mapper
private readonly IMapper _mapper;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSequences\GetWorkflowSequence\GetWorkflowSequenceHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSequences.GetWorkflowSequence.GetWorkflowSequenceHandler.GetWorkflowSequenceHandler
public GetWorkflowSequenceHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_page_contains_fileupload_question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_page_contains_fileupload_question.Then_validation_error_occurs
[Test]
        public async Task Then_validation_error_occurs()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId);

            var response = await Handler.Handle(new SetPageAnswersRequest(applicationId, sectionId, "100", new List<Answer>
            {
                new Answer { QuestionId = "Q1", Value = "Yes" },
                new Answer { QuestionId = "Q2", Value = "File.txt" },
                new Answer { QuestionId = "Q3", Value = "No" }
            }), CancellationToken.None);

            response.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequence\GetSequenceHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetSequence.GetSequenceHandler.GetSequenceHandler
public GetSequenceHandler(QnaDataContext dataContext, IMapper mapper)
        {
            _dataContext = dataContext;
            _mapper = mapper;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSequences\GetWorkflowSequence\GetWorkflowSequenceHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSequences.GetWorkflowSequence.GetWorkflowSequenceHandler.Handle
public async Task<HandlerResponse<WorkflowSequence>> Handle(GetWorkflowSequenceRequest request, CancellationToken cancellationToken)
        {
            var sequence = await _dataContext.WorkflowSequences.AsNoTracking().SingleOrDefaultAsync(seq => seq.Id == request.SequenceId && seq.WorkflowId == request.WorkflowId, cancellationToken);
            return sequence is null
                ? new HandlerResponse<WorkflowSequence>(success: false, message: "Project or WorkflowSection does not exist")
                : new HandlerResponse<WorkflowSequence>(sequence);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_page_contains_fileupload_question.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_page_contains_fileupload_question.SetupQuestionData
private async Task SetupQuestionData(Guid applicationId, Guid sectionId)
        {
            await DataContext.ApplicationSections.AddAsync(new ApplicationSection()
            {
                ApplicationId = applicationId,
                Id = sectionId,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page()
                        {
                            PageId = "100",
                            Questions = new List<Question>
                            {
                                new Question { QuestionId = "Q1", Input = new Input { Type = "TextArea" }},
                                new Question { QuestionId = "Q2", Input = new Input { Type = "FileUpload" }},
                                new Question { QuestionId = "Q3", Input = new Input { Type = "TextArea" }},
                            },
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>(),
                            Active = true
                        }
                    }
                }
            });

            await DataContext.Applications.AddAsync(new Data.Entities.Application() { Id = applicationId, ApplicationData = "{}" });

            await DataContext.SaveChangesAsync();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequence\GetSequenceHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetSequence.GetSequenceHandler.Handle
public async Task<HandlerResponse<Sequence>> Handle(GetSequenceRequest request, CancellationToken cancellationToken)
        {
            var application = await _dataContext.Applications.AsNoTracking().FirstOrDefaultAsync(app => app.Id == request.ApplicationId, cancellationToken: cancellationToken);
            if (application is null) return new HandlerResponse<Sequence>(false, "Application does not exist");

            var sequence = await _dataContext.ApplicationSequences.AsNoTracking().FirstOrDefaultAsync(seq => seq.Id == request.SequenceId, cancellationToken: cancellationToken);
            if (sequence is null) return new HandlerResponse<Sequence>(false, "Sequence does not exist");

            return new HandlerResponse<Sequence>(_mapper.Map<Sequence>(sequence));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Data\QnaDataContext.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.QnaDataContext.WorkflowSequences
public DbSet<WorkflowSequence> WorkflowSequences { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\FeedbackController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.FeedbackController._logger
private readonly ILogger<FeedbackController> _logger;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SkipPage\SkipPageRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SkipPage.SkipPageRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\FeedbackController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.FeedbackController._mediator
private readonly IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SkipPage\SkipPageBySectionNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SkipPage.SkipPageBySectionNoHandler.SkipPageBySectionNoHandler
public SkipPageBySectionNoHandler(QnaDataContext dataContext, INotRequiredProcessor notRequiredProcessor, ITagProcessingService tagProcessingService) : base(dataContext, notRequiredProcessor, tagProcessingService, null)
        {

        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SkipPage\SkipPageBySectionNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SkipPage.SkipPageBySectionNoHandler.Handle
public async Task<HandlerResponse<SkipPageResponse>> Handle(SkipPageBySectionNoRequest request, CancellationToken cancellationToken)
        {
            var application = await _dataContext.Applications.SingleOrDefaultAsync(app => app.Id == request.ApplicationId, cancellationToken: cancellationToken);
            if (application is null) return new HandlerResponse<SkipPageResponse>(false, "Application does not exist");

            var section = await _dataContext.ApplicationSections.SingleOrDefaultAsync(sec => sec.SectionNo == request.SectionNo && sec.SequenceNo == request.SequenceNo && sec.ApplicationId == request.ApplicationId, cancellationToken);
            if (section is null) return new HandlerResponse<SkipPageResponse>(false, "Section does not exist");

            var qnaData = new QnAData(section.QnAData);
            var page = qnaData.Pages.SingleOrDefault(p => p.PageId == request.PageId);
            if (page is null) return new HandlerResponse<SkipPageResponse>(false, "Page does not exist");

            try
            {
                var nextAction = GetNextActionForPage(section, application, page.PageId);
                var checkboxListAllNexts = GetCheckboxListMatchingNextActionsForPage(section, application, page.PageId);
                SetStatusOfNextPagesBasedOnDeemedNextActions(section, page.PageId, nextAction, checkboxListAllNexts);

                await _dataContext.SaveChangesAsync(cancellationToken);

                return new HandlerResponse<SkipPageResponse>(new SkipPageResponse(nextAction.Action, nextAction.ReturnId));
            }
            catch (ApplicationException)
            {
                if (page.Next is null || !page.Next.Any())
                {
                    return new HandlerResponse<SkipPageResponse>(new SkipPageResponse());
                }
                else
                {
                    return new HandlerResponse<SkipPageResponse>(false, "Cannot find a matching 'Next' instruction");
                }
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSections\UpsertWorkflowSection\UpsertWorkflowSectionHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSections.UpsertWorkflowSection.UpsertWorkflowSectionHandler.Handle
public async Task<HandlerResponse<WorkflowSection>> Handle(UpsertWorkflowSectionRequest request, CancellationToken cancellationToken)
        {
            var existingSection = await _dataContext.WorkflowSections.SingleOrDefaultAsync(sec => sec.Id == request.SectionId && sec.ProjectId == request.ProjectId, cancellationToken: cancellationToken);
            if (existingSection == null)
            {
                await _dataContext.WorkflowSections.AddAsync(request.Section, cancellationToken);
            }
            else
            {
                existingSection.Title = request.Section.Title;
                existingSection.DisplayType = request.Section.DisplayType;
                existingSection.LinkTitle = request.Section.LinkTitle;
                existingSection.QnAData = request.Section.QnAData;
            }

            await _dataContext.SaveChangesAsync(cancellationToken);

            return new HandlerResponse<WorkflowSection>(existingSection);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\EmailTypeValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.EmailTypeValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", true)]
        [TestCase("test", false)]
        [TestCase("test@test", false)]
        [TestCase("test@test      .com", false)]
        [TestCase("test@test.com", true)]
        [TestCase("test@test.co.uk", true)]
        [TestCase("test.test@test.com", true)]
        [TestCase("test-test@test.com", true)]
        [TestCase("test.test@test.co.uk", true)]
        [TestCase("test-test@test.co.uk", true)]
        public void Then_correct_errors_are_returned(string input, bool isValid)
        {
            var validator = new EmailTypeValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Answer must be a valid email",
                    Name = "Email"
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\AddressTownOrCityRequiredValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.AddressTownOrCityRequiredValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text))
            {
                var validateErrors = ValidateProperty(question.QuestionId, text, "AddressLine3", ValidationDefinition.ErrorMessage);

                if (validateErrors.Count > 0)
                {
                    errors.AddRange(validateErrors);
                }
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\PageOfAnswers.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.PageOfAnswers.Answers
public List<Answer> Answers { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Workflows\UpsertWorkflow\UpsertWorkflowRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Workflows.UpsertWorkflow.UpsertWorkflowRequest.WorkflowId
public Guid WorkflowId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Workflows\UpsertWorkflow\UpsertWorkflowRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Workflows.UpsertWorkflow.UpsertWorkflowRequest.Workflow
public Workflow Workflow { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_a_branching_condition_is_question_tag.Then_the_condition_does_not_pass_if_answer_is_blank_when_must_equal_a_value_and_contains_is_set
[Test]
        public async Task Then_the_condition_does_not_pass_if_answer_is_blank_when_must_equal_a_value_and_contains_is_set()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId, "", "", "No");

            var response = await Handler.Handle(new SetPageAnswersRequest(applicationId, sectionId, "100", new List<Answer>
            {
                new Answer() {QuestionId = "Q1", Value = "Yes"}
            }), CancellationToken.None);

            response.Value.NextActionId.Should().Be("102");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiClient.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiClient.GetSections
public async Task<List<Section>> GetSections(Guid applicationId, Guid sequenceId)
        {
            return await HttpCall<List<Section>>(async () => await _httpClient.GetAsync(new Uri($"applications/{applicationId}/sequences/{sequenceId}/sections", UriKind.Relative)));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Workflows\UpsertWorkflow\UpsertWorkflowRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Workflows.UpsertWorkflow.UpsertWorkflowRequest.UpsertWorkflowRequest
public UpsertWorkflowRequest(Guid projectId, Guid workflowId, Workflow workflow)
        {
            ProjectId = projectId;
            WorkflowId = workflowId;
            Workflow = workflow;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Projects\GetProjects\GetProjectsHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Projects.GetProjects.GetProjectsHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Input.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Input.Type
public string Type { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Projects\GetProjects\GetProjectsHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Projects.GetProjects.GetProjectsHandler.GetProjectsHandler
public GetProjectsHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationSequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.ApplicationSequence.ApplicationId
public Guid ApplicationId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Projects\GetProjects\GetProjectsHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Projects.GetProjects.GetProjectsHandler.Handle
public async Task<HandlerResponse<List<Project>>> Handle(GetProjectsRequest request, CancellationToken cancellationToken)
        {
            var projects = await _dataContext.Projects.AsNoTracking().ToListAsync(cancellationToken);

            return !projects.Any()
                ? new HandlerResponse<List<Project>>(success: false, message: "No Projects exist")
                : new HandlerResponse<List<Project>>(projects);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\FileController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.FileController.DownloadFileOrZipOfFiles
[HttpGet("{applicationId}/sequences/{sequenceNo}/sections/{sectionNo}/pages/{pageId}/questions/{questionId}/download")]
        public async Task<IActionResult> DownloadFileOrZipOfFiles(Guid applicationId, int sequenceNo, int sectionNo, string pageId, string questionId)
        {
            var downloadResult = await _mediator.Send(new DownloadFileBySectionNoRequest(applicationId, sequenceNo, sectionNo, pageId, questionId, null));

            if (!downloadResult.Success)
            {
                _logger.LogError($"Unable to download files for question {questionId} | Reason : {downloadResult.Message}");
                return BadRequest(new BadRequestError(downloadResult.Message));
            }

            var downloadResultValue = downloadResult.Value;

            return File(downloadResultValue.Stream, downloadResultValue.ContentType, downloadResultValue.FileName);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageTests\When_CanUpdatePage_handled_for_non_existent_page.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdateTests.When_CanUpdatePage_handled_for_non_existent_page.Then_unsuccessful_response_is_returned
[Test]
        public async Task Then_unsuccessful_response_is_returned()
        {
            var result = await Handler.Handle(new CanUpdatePageRequest(ApplicationId, SectionId, Guid.NewGuid().ToString()), CancellationToken.None);

            result.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\FeedbackController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.FeedbackController.UpsertFeedback
[HttpPut("{applicationId}/sections/{sectionId}/pages/{pageId}/feedback")]
        [ProducesResponseType((int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.BadRequest)]
        public async Task<ActionResult<Page>> UpsertFeedback(Guid applicationId, Guid sectionId, string pageId, [FromBody] Feedback feedback)
        {
            var upsertFeedbackResponse = await _mediator.Send(new UpsertFeedbackRequest(applicationId, sectionId, pageId, feedback), CancellationToken.None);
            if (!upsertFeedbackResponse.Success)
            {
                _logger.LogError($"Unable to upsert feedback for page {pageId} | Reason : {upsertFeedbackResponse.Message}");
                return BadRequest(new BadRequestError(upsertFeedbackResponse.Message));
            }

            return upsertFeedbackResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AnswerValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.AnswerValidator.Validate
public List<KeyValuePair<string, string>> Validate(List<Answer> answers, Page page)
        {
            var validationErrors = new List<KeyValuePair<string, string>>();
            foreach (var question in page.Questions)
            {
                var answerToThisQuestion = answers.SingleOrDefault(a => a.QuestionId == question.QuestionId);

                ValidateQuestion(question, validationErrors, answerToThisQuestion);

                if (question.Input.Options == null) continue;
                if (answerToThisQuestion?.Value == null) continue;

                foreach (var option in question.Input.Options.Where(option => answerToThisQuestion?.Value != null && option.FurtherQuestions != null))
                {
                    bool validateFurtherQuestions;

                    if ("CheckboxList".Equals(question.Input.Type, StringComparison.InvariantCultureIgnoreCase))
                    {
                        validateFurtherQuestions = answerToThisQuestion.Value.Contains(option.Value);
                    }
                    else
                    {
                        validateFurtherQuestions = answerToThisQuestion.Value.Equals(option.Value);
                    }

                    if (validateFurtherQuestions)
                    {
                        foreach (var furtherQuestion in option.FurtherQuestions)
                        {
                            var furtherAnswer = answers.FirstOrDefault(a => a.QuestionId == furtherQuestion.QuestionId);
                            ValidateQuestion(furtherQuestion, validationErrors, furtherAnswer);
                        }
                    }
                }
            }

            return validationErrors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\FeedbackController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.FeedbackController.DeleteFeedback
[HttpDelete("{applicationId}/sections/{sectionId}/pages/{pageId}/feedback/{feedbackId}")]
        [ProducesResponseType((int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        public async Task<ActionResult<Page>> DeleteFeedback(Guid applicationId, Guid sectionId, string pageId, Guid feedbackId)
        {
            var deleteFeedbackResponse = await _mediator.Send(new DeleteFeedbackRequest(applicationId, sectionId, pageId, feedbackId), CancellationToken.None);
            if (!deleteFeedbackResponse.Success)
            {
                _logger.LogError($"Unable to delete feedback for page {pageId} | Reason : {deleteFeedbackResponse.Message}");
                return NotFound(new NotFoundError(deleteFeedbackResponse.Message));
            }

            return deleteFeedbackResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\EncryptionService.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.EncryptionService.EncryptionService
public EncryptionService(IKeyProvider keyProvider)
        {
            _keyProvider = keyProvider;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSequenceSections\GetSequenceSectionsRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSequenceSections.GetSequenceSectionsRequest.SequenceId
public Guid SequenceId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\RemovePageAnswerResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.RemovePageAnswerResponse.Page
public Page.Page Page { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSequenceSections\GetSequenceSectionsRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSequenceSections.GetSequenceSectionsRequest.GetSequenceSectionsRequest
public GetSequenceSectionsRequest(Guid applicationId, Guid sequenceId)
        {
            ApplicationId = applicationId;
            SequenceId = sequenceId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\UpsertFeedbackTests\When_Feedback_exists.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.UpsertFeedbackTests.When_Feedback_exists._dataContext
private QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\UpsertFeedbackTests\When_Feedback_exists.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.UpsertFeedbackTests.When_Feedback_exists._applicationId
private Guid _applicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\UpsertFeedbackTests\When_Feedback_exists.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.UpsertFeedbackTests.When_Feedback_exists._sectionId
private Guid _sectionId;
--------------------------------------------------
src\SFA.DAS.QnA.Data\QnaDataContext.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.QnaDataContext.Applications
public DbSet<Application> Applications { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\UpsertFeedbackTests\When_Feedback_exists.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.UpsertFeedbackTests.When_Feedback_exists._feedbackId
private Guid _feedbackId;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Infrastructure\ApiError.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Infrastructure.ApiError.StatusCode
public int StatusCode { get; private set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\UpsertFeedbackTests\When_Feedback_exists.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.UpsertFeedbackTests.When_Feedback_exists.SetUp
[SetUp]
        public async Task SetUp()
        {
            _dataContext = DataContextHelpers.GetInMemoryDataContext();

            _applicationId = Guid.NewGuid();
            _sectionId = Guid.NewGuid();

            _feedbackId = Guid.NewGuid();
            var section = new ApplicationSection
            {
                ApplicationId = _applicationId,
                Id = _sectionId,
                QnAData = new QnAData
                {
                    Pages = new List<Page>
                    {
                        new Page
                        {
                            PageId = "1",
                            Feedback = new List<Feedback>
                            {
                                new Feedback
                                {
                                    Id = _feedbackId
                                }
                            }
                        }
                    }
                }
            };

            await _dataContext.ApplicationSections.AddAsync(section);
            await _dataContext.SaveChangesAsync();

            _handler = new UpsertFeedbackHandler(_dataContext);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\UpsertFeedbackTests\When_Feedback_exists.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.UpsertFeedbackTests.When_Feedback_exists.Then_feedback_entry_is_updated
[Test]
        public async Task Then_feedback_entry_is_updated()
        {
            await _handler.Handle(new UpsertFeedbackRequest(_applicationId, _sectionId, "1",
                new Feedback
                {
                    Date = DateTime.UtcNow,
                    From = "Dave",
                    Id = _feedbackId,
                    Message = "Feedback message"
                }), CancellationToken.None);

            var updatedSection = await _dataContext.ApplicationSections.SingleAsync();
            var updatedPage = updatedSection.QnAData.Pages[0];
            var updatedFeedback = updatedPage.Feedback[0];

            updatedFeedback.Id.Should().Be(_feedbackId);
            updatedFeedback.From.Should().Be("Dave");
            updatedFeedback.Message.Should().Be("Feedback message");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetCurrentSequenceTests\GetCurrentSequenceTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetCurrentSequenceTests.GetCurrentSequenceTestBase.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\SequencesController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.SequencesController._mediator
private readonly IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetCurrentSequenceTests\GetCurrentSequenceTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetCurrentSequenceTests.GetCurrentSequenceTestBase.SetUp
[SetUp]
        public async Task SetUp()
        {
            var dbContextOptions = new DbContextOptionsBuilder<QnaDataContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;

            var context = new QnaDataContext(dbContextOptions);

            ApplicationId = Guid.NewGuid();

            context.ApplicationSequences.AddRange(new[]
            {
                new ApplicationSequence {ApplicationId = ApplicationId, IsActive = false, SequenceNo = 1},
                new ApplicationSequence {ApplicationId = ApplicationId, IsActive = true, SequenceNo = 2},
                new ApplicationSequence {ApplicationId = Guid.NewGuid(), IsActive = true, SequenceNo = 1}
            });


            await context.Applications.AddAsync(new Data.Entities.Application() { Id = ApplicationId });

            await context.SaveChangesAsync();

            var mapper = new Mapper(new MapperConfiguration(config => { config.AddMaps(AppDomain.CurrentDomain.GetAssemblies()); }));

            Handler = new GetCurrentSequenceHandler(context, mapper);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\AzureTableStorageConfigurationSource.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Configuration.Infrastructure.AzureTableStorageConfigurationSource._appName
private readonly string _appName;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\SequencesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.SequencesController.SequencesController
public SequencesController(IMediator mediator)
        {
            _mediator = mediator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSections\CreateWorkflowSection\CreateWorkflowSectionRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSections.CreateWorkflowSection.CreateWorkflowSectionRequest.ProjectId
public Guid ProjectId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\EntityBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.EntityBase.Id
public Guid Id { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersHandlerTests\ResetPageAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetPageAnswersTestBase.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Config\AzureActiveDirectoryConfiguration.cs
BlockTypes.METHOD, SFA.DAS.QnA.Configuration.Config.AzureActiveDirectoryConfiguration.Identifier
public string Identifier { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\UrlValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.UrlValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", true)]
        [TestCase("google", false)]
        [TestCase("google.co.uk", true)]
        [TestCase("google.com", true)]
        [TestCase("www.google.co.uk", true)]
        [TestCase("www.google.com", true)]
        [TestCase("//www.google.com", false)]
        [TestCase("://www.google.com", false)]
        [TestCase("http://www.google.co.uk", true)]
        [TestCase("http://www.google.com", true)]
        [TestCase("https://www.google.co.uk", true)]
        [TestCase("https://www.google.com", true)]
        [TestCase("ftp://www.google.co.uk", true)]
        [TestCase("ftp://www.google.com", true)]
        public void Then_correct_errors_are_returned(string input, bool isValid)
        {
            var validator = new UrlValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Not a valid Url",
                    Name = "Url"
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\AzureTableStorageConfigurationExtensions.cs
BlockTypes.METHOD, SFA.DAS.QnA.Configuration.Infrastructure.AzureTableStorageConfigurationExtensions.AddAzureTableStorageConfiguration
public static IConfigurationBuilder AddAzureTableStorageConfiguration(this IConfigurationBuilder builder, string connection, string appName, string environment, string version)
        {
            return builder.Add(new AzureTableStorageConfigurationSource(connection, appName, environment, version));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Workflows\UpsertWorkflow\UpsertWorkflowHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Workflows.UpsertWorkflow.UpsertWorkflowHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Workflows\UpsertWorkflow\UpsertWorkflowHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Workflows.UpsertWorkflow.UpsertWorkflowHandler.UpsertWorkflowHandler
public UpsertWorkflowHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageBySectionNoTests\GetPageBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageBySectionNoTests.GetPageBySectionNoTestBase.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Workflows\UpsertWorkflow\UpsertWorkflowHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Workflows.UpsertWorkflow.UpsertWorkflowHandler.Handle
public async Task<HandlerResponse<Workflow>> Handle(UpsertWorkflowRequest request, CancellationToken cancellationToken)
        {
            var existingWorkflow = await _dataContext.Workflows.SingleOrDefaultAsync(sec => sec.Id == request.WorkflowId && sec.ProjectId == request.ProjectId, cancellationToken: cancellationToken);
            if (existingWorkflow == null)
            {
                request.Workflow.ProjectId = request.ProjectId;
                await _dataContext.Workflows.AddAsync(request.Workflow, cancellationToken);
            }
            else
            {
                existingWorkflow.Status = request.Workflow.Status;
                existingWorkflow.Description = request.Workflow.Description;
                existingWorkflow.Type = request.Workflow.Type;
                existingWorkflow.Version = request.Workflow.Version;
            }

            await _dataContext.SaveChangesAsync(cancellationToken);

            return new HandlerResponse<Workflow>(existingWorkflow);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Sequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Sequence.Id
public Guid Id { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\CreateSnapshot\CreateSnapshotRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.CreateSnapshot.CreateSnapshotRequest.CreateSnapshotRequest
public CreateSnapshotRequest(Guid applicationId)
        {
            ApplicationId = applicationId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\RemovePageAnswer\RemovePageAnswerRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.RemovePageAnswer.RemovePageAnswerRequest.SectionId
public Guid SectionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\StorageMigrationController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.StorageMigrationController._dataContext
private QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\RemovePageAnswer\RemovePageAnswerRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.RemovePageAnswer.RemovePageAnswerRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetPageAnswersBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetPageAnswersBySectionNoRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\StorageMigrationController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.StorageMigrationController._fileStorageConfig
private IOptions<FileStorageConfig> _fileStorageConfig;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\RemovePageAnswer\RemovePageAnswerRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.RemovePageAnswer.RemovePageAnswerRequest.AnswerId
public Guid AnswerId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\DateValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.DateValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\StorageMigrationController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.StorageMigrationController._encryptionService
private IEncryptionService _encryptionService;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\RemovePageAnswer\RemovePageAnswerRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.RemovePageAnswer.RemovePageAnswerRequest.RemovePageAnswerRequest
public RemovePageAnswerRequest(Guid applicationId, Guid sectionId, string pageId, Guid answerId)
        {
            ApplicationId = applicationId;
            SectionId = sectionId;
            PageId = pageId;
            AnswerId = answerId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Handlers\ResetPagesToIncompleteHandlerTests.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.Handlers.ResetPagesToIncompleteHandlerTests._handler
private ResetPagesToIncompleteHandler _handler;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\StorageMigrationController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.StorageMigrationController._log
private readonly ILogger<StorageMigrationController> _log;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiClient.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiClient.HttpCall
private async Task<T> HttpCall<T>(Func<Task<HttpResponseMessage>> httpClientAction)
        {
            var httpResponse = await httpClientAction();

            if (httpResponse.IsSuccessStatusCode)
            {
                return await httpResponse.Content.ReadAsAsync<T>();
            }

            throw new HttpRequestException($"Error sending {httpResponse.RequestMessage.Method} to {httpResponse.RequestMessage.RequestUri}. Returned: {await httpResponse.Content.ReadAsStringAsync()}");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\FileContentValidator.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.FileContentValidator._errorMessage
private const string _errorMessage = "The content for this file does not match its contents";
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\StorageMigrationController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.StorageMigrationController.StorageMigrationController
public StorageMigrationController(QnaDataContext dataContext, IOptions<FileStorageConfig> fileStorageConfig, IEncryptionService encryptionService, ILogger<StorageMigrationController> log)
        {
            _dataContext = dataContext;
            _fileStorageConfig = fileStorageConfig;
            _encryptionService = encryptionService;
            _log = log;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\TabularData.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.TabularData.Caption
public string Caption { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\SequencesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.SequencesController.GetSequences
[HttpGet("{applicationId}/sequences")]
        [ProducesResponseType(200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<List<Sequence>>> GetSequences(Guid applicationId)
        {
            var sequences = await _mediator.Send(new GetSequencesRequest(applicationId), CancellationToken.None);
            if (!sequences.Success) return NotFound(new NotFoundError(sequences.Message));
            if (sequences.Value.Count == 0) return NoContent();

            return sequences.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\StorageMigrationController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.StorageMigrationController.Migrate
[HttpPost("/storageMigration")]
        public async Task<ActionResult<FileMigrationResult>> Migrate()
        {
            var result = new FileMigrationResult { MigratedFiles = new List<MigratedFile>() };

            try
            {
                // get all sections where SectionNo = 3
                var sections = await _dataContext.ApplicationSections.Where(sec => (sec.SectionNo == 3 && sec.SequenceNo == 1) || sec.SequenceNo == 2).ToListAsync();

                foreach (var section in sections)
                {
                    var sectionId = section.Id;


                    foreach (var page in section.QnAData.Pages)
                    {
                        if (page.Questions.Any(q => q.Input.Type == "FileUpload"))
                        {
                            var sequenceId = page.SequenceId.Value;
                            foreach (var pageOfAnswer in page.PageOfAnswers)
                            {
                                foreach (var answer in pageOfAnswer.Answers)
                                {
                                    if (!string.IsNullOrWhiteSpace(answer.Value))
                                    {
                                        // get original file...
                                        var account = CloudStorageAccount.Parse(_fileStorageConfig.Value.StorageConnectionString);
                                        var client = account.CreateCloudBlobClient();
                                        var container = client.GetContainerReference(_fileStorageConfig.Value.ContainerName);

                                        var applicationFolder = container.GetDirectoryReference(section.ApplicationId.ToString());
                                        var sequenceFolder = applicationFolder.GetDirectoryReference(section.SequenceNo.ToString());
                                        var sectionFolder = sequenceFolder.GetDirectoryReference(section.SectionNo.ToString());
                                        var pageFolder = sectionFolder.GetDirectoryReference(page.PageId.ToLower());

                                        var questionFolder = pageFolder.GetDirectoryReference(answer.QuestionId.ToLower());

                                        var blobReference = questionFolder.GetBlockBlobReference(answer.Value);

                                        if (blobReference.Exists())
                                        {
                                            var newfileurl = $"{section.ApplicationId.ToString().ToLower()}/{sequenceId.ToString().ToLower()}/{sectionId.ToString().ToLower()}/{page.PageId}/{answer.QuestionId.ToLower()}/{answer.Value}";
                                            var newFileLocation = container.GetBlockBlobReference(newfileurl);

                                            await newFileLocation.StartCopyAsync(blobReference);

                                            result.MigratedFiles.Add(new MigratedFile { From = blobReference.Name, To = newfileurl });
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _log.LogInformation($"Error running file migration: {ex.Message}. Stack trace: {ex.StackTrace}");
                return new FileMigrationResult() { Error = ex.Message, ErrorStackTrace = ex.StackTrace };
            }

            return result;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\FileContentValidator.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.FileContentValidator._knownFileSignatures
private static readonly Dictionary<string, byte[]> _knownFileSignatures = new Dictionary<string, byte[]>
        {
            {"JPG",  new byte[] { 0xFF, 0xD8, 0xFF }},
            {"JPEG", new byte[] { 0xFF, 0xD8, 0xFF }},
            {"TIF",  new byte[] { 0x49, 0x49, 0x2A, 0x00 }},
            {"TIFF", new byte[] { 0x49, 0x49, 0x2A, 0x00 }},
            {"GIF",  new byte[] { 0x47, 0x49, 0x46, 0x38 }},
            {"BMP",  new byte[] { 0x42, 0x4D }},
            {"PNG",  new byte[] { 0x89, 0x50, 0x4E, 0x47 }},
            {"ICO",  new byte[] { 0x00, 0x00, 0x01, 0x00 }},

            {"PDF",  new byte[] { 0x25, 0x50, 0x44, 0x46 }},

            {"DOC",  new byte[] { 0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1 }},
            {"XLS",  new byte[] { 0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1 }},
            {"PPT",  new byte[] { 0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1 }},
            {"MSG",  new byte[] { 0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1 }},

            {"DOCX",  new byte[] { 0x50, 0x4B, 0x03, 0x04 }},
            {"XLSX",  new byte[] { 0x50, 0x4B, 0x03, 0x04 }},
            {"PPTX",  new byte[] { 0x50, 0x4B, 0x03, 0x04 }}
        };
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\FileContentValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.FileContentValidator.Validate
public List<KeyValuePair<string, string>> Validate(IFormFileCollection files)
        {
            var validationErrors = new List<KeyValuePair<string, string>>();

            if (files != null)
            {
                foreach (var file in files)
                {
                    using (var stream = file.OpenReadStream())
                    {
                        var fileExtension = Path.GetExtension(file.FileName).TrimStart('.');

                        if (!FileContentIsValidForFileExtension(fileExtension, stream))
                        {
                            validationErrors.Add(new KeyValuePair<string, string>(file.Name, _errorMessage));
                        }
                    }
                }
            }

            return validationErrors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetApplicationData\SetApplicationDataHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.SetApplicationData.SetApplicationDataHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetApplicationData\SetApplicationDataHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.SetApplicationData.SetApplicationDataHandler._applicationDataValidator
private readonly IApplicationDataValidator _applicationDataValidator;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\FileContentValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.FileContentValidator.FileContentIsValidForFileExtension
private bool FileContentIsValidForFileExtension(string fileExtension, Stream fileContents)
        {
            var isValid = false;

            if (fileExtension != null && fileContents != null)
            {
                if (_knownFileSignatures.TryGetValue(fileExtension.ToUpperInvariant(), out var headerForFileExtension))
                {
                    var headerOfActualFile = new byte[headerForFileExtension.Length];
                    fileContents.Read(headerOfActualFile, 0, headerOfActualFile.Length);
                    fileContents.Position = 0;

                    isValid = headerOfActualFile.SequenceEqual(headerForFileExtension);
                }
                else
                {
                    isValid = true;
                }
            }

            return isValid;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetApplicationData\SetApplicationDataHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetApplicationData.SetApplicationDataHandler.SetApplicationDataHandler
public SetApplicationDataHandler(QnaDataContext dataContext, IApplicationDataValidator applicationDataValidator)
        {
            _dataContext = dataContext;
            _applicationDataValidator = applicationDataValidator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\GetWorkflows\GetWorkflowsRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.GetWorkflows.GetWorkflowsRequest.ProjectId
public Guid ProjectId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\ComplexCheckboxListTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.ComplexChecklistBoxTypeValidator.ComplexChecklistBoxTypeValidator
public ComplexChecklistBoxTypeValidator()
        {
            ValidationDefinition = new ValidationDefinition() { ErrorMessage = "Answer must be one of the Input Options" };
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\ComplexCheckboxListTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.ComplexChecklistBoxTypeValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\ComplexCheckboxListTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.ComplexChecklistBoxTypeValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text))
            {
                var validValues = question.Input.Options.Select(o => o.Value).ToList();

                if (validValues.All(v => v != text))
                {
                    errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
                }
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\NumberTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.NumberTypeValidator.NumberTypeValidator
public NumberTypeValidator()
        {
            ValidationDefinition = new ValidationDefinition() { ErrorMessage = "Answer must be a valid number" };
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageBySectionNoTests\GetPageBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageBySectionNoTests.GetPageBySectionNoTestBase.SectionNo
protected int SectionNo;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageBySectionNoTests\GetPageBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageBySectionNoTests.GetPageBySectionNoTestBase.PageId
protected string PageId;
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\SequencesControllerTests\GetSequences\When_GetSequences_called_for_non-existant_application.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.SequencesControllerTests.GetSequences.When_GetSequences_called_for_non_existant_application.Then_NotFound_returned
[Test]
        public async Task Then_NotFound_returned()
        {
            var mediator = Substitute.For<IMediator>();

            mediator.Send(Arg.Any<GetSequencesRequest>(), Arg.Any<CancellationToken>())
                .Returns(new HandlerResponse<List<Sequence>> { Success = false, Message = "Application does not exist" });

            var controller = new SequencesController(mediator);

            var result = await controller.GetSequences(Guid.NewGuid());

            result.Result.Should().BeOfType<NotFoundObjectResult>();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\ApplicationData\GetApplicationData\GetQuestionTagDataHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.ApplicationData.GetApplicationData.GetQuestionTagDataHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageBySectionNoTests\GetPageBySectionNoTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageBySectionNoTests.GetPageBySectionNoTestBase.SetUp
[SetUp]
        public async Task SetUp()
        {
            ApplicationId = Guid.NewGuid();
            SequenceNo = 1;
            SectionNo = 1;
            PageId = Guid.NewGuid().ToString();

            var dataContext = DataContextHelpers.GetInMemoryDataContext();

            dataContext.Applications.Add(new Data.Entities.Application()
            {
                Id = ApplicationId,
            });

            dataContext.ApplicationSections.Add(new ApplicationSection()
            {
                SectionNo = SectionNo,
                SequenceNo = SequenceNo,
                ApplicationId = ApplicationId,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page { PageId = PageId }
                    }
                }
            });

            dataContext.SaveChanges();

            Handler = new GetPageBySectionNoHandler(dataContext);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\ApplicationData\GetApplicationData\GetQuestionTagDataHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.ApplicationData.GetApplicationData.GetQuestionTagDataHandler.GetQuestionTagDataHandler
public GetQuestionTagDataHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\MonthAndYearNotInFutureValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.MonthAndYearNotInFutureValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSequencesTests\When_GetSequences_handled_for_non_existant_application.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSequencesTests.When_GetSequences_handled_for_non_existant_application._results
private HandlerResponse<List<Sequence>> _results;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\ApplicationData\GetApplicationData\GetQuestionTagDataHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.ApplicationData.GetApplicationData.GetQuestionTagDataHandler.Handle
public async Task<HandlerResponse<string>> Handle(GetQuestionTagDataRequest request, CancellationToken cancellationToken)
        {
            using (var command = _dataContext.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = @"DECLARE @AppDataJson NVARCHAR(MAX) = (SELECT ApplicationData FROM [dbo].[Applications] WHERE Id = @ApplicationId)
                                                                SELECT value AS QuestionTagValue
                                                                FROM OPENJSON(@AppDataJson)
                                                                WHERE[key] = @QuestionTag";
                command.Parameters.Add(new SqlParameter("@ApplicationId", request.ApplicationId));
                command.Parameters.Add(new SqlParameter("@QuestionTag", request.QuestionTag));
                _dataContext.Database.OpenConnection();

                try
                {
                    var questionTagValue = command.ExecuteScalar();
                    return new HandlerResponse<string>(Convert.ToString(questionTagValue));
                }
                catch (Exception ex)
                {
                    // TODO: Log the ex.Message;
                    return new HandlerResponse<string>(success: false, message: "QuestionTag not exist.");
                }
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\MonthAndYearNotInFutureValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.MonthAndYearNotInFutureValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();
            var dateParts = answer?.Value.Split(new[] { "," }, StringSplitOptions.RemoveEmptyEntries);

            if (!string.IsNullOrEmpty(text) && dateParts != null && dateParts.Length == 2)
            {
                var month = dateParts[0];
                var year = dateParts[1];

                if (string.IsNullOrWhiteSpace(month) || string.IsNullOrWhiteSpace(year))
                {
                    return errors;
                }

                var dateString = $"1/{month}/{year}";
                var formatStrings = new string[] { "d/M/yyyy" };

                if (DateTime.TryParseExact(dateString, formatStrings, null, DateTimeStyles.None, out var dateEntered) && dateEntered > DateTime.Today)
                {
                    errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
                }
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_page_not_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_page_not_found.Then_validation_error_occurs
[Test]
        public async Task Then_validation_error_occurs()
        {
            var response = await Handler.Handle(new SubmitPageOfFilesRequest(ApplicationId, SectionId, "NOT_FOUND", new FormFileCollection
            {
                GenerateFile("This is a dummy file", "Q1", "File.txt")
            }), CancellationToken.None);

            response.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\StartApplicationTests\StartApplicationTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.StartApplicationTests.StartApplicationTestBase.DataContext
protected QnaDataContext DataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationSequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.ApplicationSequence.SequenceNo
public int SequenceNo { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\SetPageAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.SetPageAnswersResponse.SetPageAnswersResponse
public SetPageAnswersResponse()
        { }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AnswerValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.AnswerValidator.ValidateQuestion
private void ValidateQuestion(Question question, List<KeyValuePair<string, string>> validationErrors, Answer answerToThisQuestion)
        {
            var validators = _validatorFactory.Build(question);

            if (answerToThisQuestion is null || question.Input.GetEmptyAnswerValues().Contains(answerToThisQuestion.Value))
            {
                if (!validators.Any(v => v.GetType().Name.EndsWith("RequiredValidator"))) return;

                var requiredValidators = validators.Where(v => v.GetType().Name.EndsWith("RequiredValidator"));
                foreach (var requiredValidator in requiredValidators)
                {
                    var errors = requiredValidator.Validate(question, answerToThisQuestion);
                    if (errors.Any())
                    {
                        validationErrors.AddRange(errors);
                    }
                }
            }
            else
            {
                foreach (var validator in validators)
                {
                    var errors = validator.Validate(question, answerToThisQuestion);

                    if (errors.Any())
                    {
                        validationErrors.AddRange(errors);
                    }
                }
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiClient.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiClient.GetSection
public async Task<Section> GetSection(Guid applicationId, Guid sectionId)
        {
            return await HttpCall<Section>(async () => await _httpClient.GetAsync(new Uri($"applications/{applicationId}/sections/{sectionId}", UriKind.Relative)));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase.GetContainer
private static async Task<CloudBlobContainer> GetContainer(IOptions<FileStorageConfig> config)
        {
            return await ContainerHelpers.GetContainer(config.Value.StorageConnectionString, config.Value.ContainerName);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSequences\UpsertWorkflowSequence\UpsertWorkflowSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSequences.UpsertWorkflowSequence.UpsertWorkflowSequenceRequest.WorkflowId
public Guid WorkflowId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\When_section_not_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.When_section_not_found.Then_validation_error_occurs
[Test]
        public async Task Then_validation_error_occurs()
        {
            var response = await Handler.Handle(new ResetSectionAnswersRequest(ApplicationId, SequenceNo, SectionNo - 1), CancellationToken.None);

            response.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\MonthAndYearTypeValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.MonthAndYearTypeValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", false)]
        [TestCase(",", false)]
        [TestCase("01,0001", true)]
        [TestCase("11,2019", true)]
        [TestCase("12,9999", true)]
        public void Then_correct_errors_are_returned(string input, bool isValid)
        {
            var validator = new MonthAndYearTypeValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Answer must be a valid month and year",
                    Name = "MonthAndYear"
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Config\FileStorageConfig.cs
BlockTypes.METHOD, SFA.DAS.QnA.Configuration.Config.FileStorageConfig.StorageConnectionString
public string StorageConnectionString { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSequences\CreateWorkflowSequence\CreateWorkflowSectionHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.WorkflowSequences.CreateWorkflowSequence.CreateWorkflowSequenceHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\StorageMigrationController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.FileMigrationResult.Error
public string Error { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Infrastructure\UnprocessableEntityError.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Infrastructure.UnprocessableEntityError.UnprocessableEntityError
public UnprocessableEntityError()
            : base(422, HttpStatusCode.UnprocessableEntity.ToString())
        {
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSequences\CreateWorkflowSequence\CreateWorkflowSectionHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSequences.CreateWorkflowSequence.CreateWorkflowSequenceHandler.CreateWorkflowSequenceHandler
public CreateWorkflowSequenceHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSequences\CreateWorkflowSequence\CreateWorkflowSectionHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSequences.CreateWorkflowSequence.CreateWorkflowSequenceHandler.Handle
public async Task<HandlerResponse<WorkflowSequence>> Handle(CreateWorkflowSequenceRequest request, CancellationToken cancellationToken)
        {
            await _dataContext.WorkflowSequences.AddAsync(request.Sequence, cancellationToken);
            await _dataContext.SaveChangesAsync(cancellationToken);
            return new HandlerResponse<WorkflowSequence>(request.Sequence);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageBySectionNoTests\When_GetPageBySectionNo_handled.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageBySectionNoTests.When_GetPageBySectionNo_handled.Then_the_Page_is_returned
[Test]
        public async Task Then_the_Page_is_returned()
        {
            var result = await Handler.Handle(new GetPageBySectionNoRequest(ApplicationId, SequenceNo, SectionNo, PageId), CancellationToken.None);

            result.Value.Should().NotBeNull();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetCurrentSequenceTests\When_GetCurrentSequence_handled.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetCurrentSequenceTests.When_GetCurrentSequence_handled_for_valid_applicationId.Then_the_current_sequence_is_returned
[Test]
        public async Task Then_the_current_sequence_is_returned()
        {
            var results = await Handler.Handle(new GetCurrentSequenceRequest(ApplicationId), CancellationToken.None);

            results.Value.SequenceNo.Should().Be(2);
            results.Value.ApplicationId.Should().Be(ApplicationId);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Infrastructure\BadRequestError.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Infrastructure.BadRequestError.BadRequestError
public BadRequestError()
            : base(400, HttpStatusCode.BadRequest.ToString())
        {
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Infrastructure\BadRequestError.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Infrastructure.BadRequestError.BadRequestError
public BadRequestError(string message)
            : base(400, HttpStatusCode.BadRequest.ToString(), message)
        {
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileService.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileService.SpecifiedFile
private async Task<HandlerResponse<DownloadFile>> SpecifiedFile(Guid applicationId, string fileName, string pageId, string questionId, CancellationToken cancellationToken, Page page, CloudBlobDirectory directory)
        {
            var answer = page.PageOfAnswers.SelectMany(poa => poa.Answers).SingleOrDefault(a => a.Value == fileName && a.QuestionId == questionId);
            if (answer is null)
            {
                return new HandlerResponse<DownloadFile>(success: false, message: $"Question {questionId} on Page {pageId} in Application {applicationId} does not contain an upload named {fileName}");
            }

            return await IndividualFile(fileName, cancellationToken, directory);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Infrastructure\UnprocessableEntityError.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Infrastructure.UnprocessableEntityError.UnprocessableEntityError
public UnprocessableEntityError(string message)
            : base(422, HttpStatusCode.UnprocessableEntity.ToString(), message)
        {
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\MonthAndYearTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.MonthAndYearTypeValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersBySectionNoHandlerTests\ResetPageAnswersBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersBySectionNoHandlerTests.ResetPageAnswersBySectionNoTestBase.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\MonthAndYearTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.MonthAndYearTypeValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();
            var dateParts = text?.Split(new[] { "," }, StringSplitOptions.RemoveEmptyEntries);

            if (string.IsNullOrEmpty(text) || dateParts is null || dateParts.Length != 2)
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }
            else
            {
                var month = dateParts[0];
                var year = dateParts[1];

                if (string.IsNullOrWhiteSpace(month) || string.IsNullOrWhiteSpace(year))
                {
                    errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
                }
                else
                {
                    var dateString = $"1/{month}/{year}";
                    var formatStrings = new string[] { "d/M/yyyy" };

                    if (!DateTime.TryParseExact(dateString, formatStrings, null, DateTimeStyles.None, out _))
                    {
                        errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
                    }
                }
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\UpsertFeedbackTests\When_Feedback_exists.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.UpsertFeedbackTests.When_Feedback_exists._handler
private UpsertFeedbackHandler _handler;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\AddPageAnswerHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.AddPageAnswer.AddPageAnswerHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\When_application_not_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.When_application_not_found.Then_snapshot_fails_with_reason_why
[Test]
#if (!DEBUG)
        [Ignore("Must be tested on local DEV machine as it uses local Azure storage")]
#endif
        public async Task Then_snapshot_fails_with_reason_why()
        {
            var snapshot = await Handler.Handle(new CreateSnapshotRequest(Guid.NewGuid()), new System.Threading.CancellationToken());

            Assert.IsFalse(snapshot.Success);
            Assert.IsNotNull(snapshot.Message);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\AddPageAnswerHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.AddPageAnswer.AddPageAnswerHandler._answerValidator
private readonly IAnswerValidator _answerValidator;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\StorageMigrationController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.FileMigrationResult.ErrorStackTrace
public string ErrorStackTrace { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesHandler.GetAnswersFromRequest
private static List<Answer> GetAnswersFromRequest(SubmitPageOfFilesRequest request)
        {
            var answers = new List<Answer>();

            if (request.Files != null)
            {
                foreach (var file in request.Files)
                {
                    var answer = new Answer { QuestionId = file.Name, Value = file.FileName };
                    answers.Add(answer);
                }
            }

            return answers;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageBySectionNoTests\When_CanUpdatePageBySectionNo_handled.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdatePageBySectionNoTests.When_CanUpdatePageBySectionNo_handled.Then_true_is_returned_for_an_Active_page
[Test]
        public async Task Then_true_is_returned_for_an_Active_page()
        {
            var result = await Handler.Handle(new CanUpdatePageBySectionNoRequest(ApplicationId, SequenceNo, SectionNo, ActivePageId), CancellationToken.None);

            result.Value.Should().BeTrue();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSequenceSections\GetSequenceSectionsHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSequenceSections.GetSequenceSectionsHandler.RemoveInactivePages
private static void RemoveInactivePages(Section section)
        {
            section.QnAData.Pages.RemoveAll(p => !p.Active);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\StartApplicationTests\When_StartApplication_handled_with_nonexistant_workflowtype.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.StartApplicationTests.When_StartApplication_handled_with_nonexistant_workflowtype.Then_success_false_is_returned
[Test]
        public async Task Then_success_false_is_returned()
        {
            var result = await Handler.Handle(new StartApplicationRequest() { UserReference = "dave", WorkflowType = "NONEXISTANT_WORKFLOWTYPE" }, CancellationToken.None);

            result.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageBySectionNoTests\When_CanUpdatePageBySectionNo_handled.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdatePageBySectionNoTests.When_CanUpdatePageBySectionNo_handled.Then_false_is_returned_for_an_Inactive_page
[Test]
        public async Task Then_false_is_returned_for_an_Inactive_page()
        {
            var result = await Handler.Handle(new CanUpdatePageBySectionNoRequest(ApplicationId, SequenceNo, SectionNo, InactivePageId), CancellationToken.None);

            result.Value.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\DataContextHelpers.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.DataContextHelpers.GetInMemoryDataContext
public static QnaDataContext GetInMemoryDataContext()
        {
            var dbContextOptions = new DbContextOptionsBuilder<QnaDataContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;

            return new QnaDataContext(dbContextOptions);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetPageAnswersBySectionNoHandlerTests\When_page_found.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersBySectionNoHandlerTests.When_page_found.Then_all_pages_have_their_active_status_set_correctly
[Test]
        public async Task Then_all_pages_have_their_active_status_set_correctly()
        {
            await Handler.Handle(new ResetPageAnswersBySectionNoRequest(ApplicationId, SequenceNo, SectionNo, "1"), CancellationToken.None);

            var page1Response = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, "1"), CancellationToken.None);
            page1Response.Value.Active.Should().BeTrue();

            var page2Response = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, "2"), CancellationToken.None);
            page2Response.Value.Active.Should().BeFalse();

            var page3Response = await GetPageHandler.Handle(new GetPageRequest(ApplicationId, SectionId, "3"), CancellationToken.None);
            page3Response.Value.Active.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageTests\When_CanUpdatePage_handled_for_non_existent_section.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdateTests.When_CanUpdatePage_handled_for_non_existent_section.Then_unsuccessful_response_is_returned
[Test]
        public async Task Then_unsuccessful_response_is_returned()
        {
            var result = await Handler.Handle(new CanUpdatePageRequest(ApplicationId, Guid.NewGuid(), ActivePageId), CancellationToken.None);

            result.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPagesToIncomplete\ResetPagesToIncompleteRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPagesToIncomplete.ResetPagesToIncompleteRequest.SequenceNo
public int SequenceNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPagesToIncomplete\ResetPagesToIncompleteRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPagesToIncomplete.ResetPagesToIncompleteRequest.SectionNo
public int SectionNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\StartApplicationTests\When_StartApplication_handled.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.StartApplicationTests.When_StartApplication_handled.Then_the_correct_sections_are_created
[Test]
        public async Task Then_the_correct_sections_are_created()
        {
            await Handler.Handle(new StartApplicationRequest() { UserReference = "dave", WorkflowType = "EPAO" }, CancellationToken.None);

            var newApplication = await DataContext.Applications.FirstAsync();
            var newSections = await DataContext.ApplicationSections.OrderBy(s => s.SequenceNo).ThenBy(s => s.SectionNo).ToListAsync();

            newSections.Count.Should().Be(4);
            newSections.Should().AllBeEquivalentTo(new { ApplicationId = newApplication.Id });
            newSections[0].Should().BeEquivalentTo(new { Title = "Section 1", SequenceNo = 1, SectionNo = 1 });
            newSections[1].Should().BeEquivalentTo(new { Title = "Section 2", SequenceNo = 1, SectionNo = 2 });
            newSections[2].Should().BeEquivalentTo(new { Title = "Section 3", SequenceNo = 1, SectionNo = 3 });
            newSections[3].Should().BeEquivalentTo(new { Title = "Section 4", SequenceNo = 2, SectionNo = 4 });
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\StartApplicationResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.StartApplicationResponse.ApplicationId
public Guid ApplicationId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPagesToIncomplete\ResetPagesToIncompleteRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPagesToIncomplete.ResetPagesToIncompleteRequest.PageIdsToExclude
public List<string> PageIdsToExclude { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_a_branching_condition_is_question_tag.Then_the_condition_passes_if_answer_is_one_of_matching_values_when_contains_is_set
[Test]
        public async Task Then_the_condition_passes_if_answer_is_one_of_matching_values_when_contains_is_set()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId, "Possibly,Maybe", "", "Possibly");

            var response = await Handler.Handle(new SetPageAnswersRequest(applicationId, sectionId, "100", new List<Answer>
            {
                new Answer() {QuestionId = "Q1", Value = "Possibly"}
            }), CancellationToken.None);

            response.Value.NextActionId.Should().Be("103");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\FileController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.FileController.DownloadFile
[HttpGet("{applicationId}/sections/{sectionId}/pages/{pageId}/questions/{questionId}/download/{fileName}")]
        public async Task<IActionResult> DownloadFile(Guid applicationId, Guid sectionId, string pageId, string questionId, string fileName)
        {
            var downloadResult = await _mediator.Send(new DownloadFileRequest(applicationId, sectionId, pageId, questionId, fileName));

            if (!downloadResult.Success)
            {
                _logger.LogError($"Unable to download file for question {questionId} | Reason : {downloadResult.Message}");
                return BadRequest(new BadRequestError(downloadResult.Message));
            }

            var downloadResultValue = downloadResult.Value;

            return File(downloadResultValue.Stream, downloadResultValue.ContentType, downloadResultValue.FileName);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileRequest.SectionId
public Guid SectionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPagesToIncomplete\ResetPagesToIncompleteRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPagesToIncomplete.ResetPagesToIncompleteRequest.ResetPagesToIncompleteRequest
public ResetPagesToIncompleteRequest(Guid applicationId, int sequenceNo, int sectionNo, List<string> pageIdsToExclude)
        {
            ApplicationId = applicationId;
            SequenceNo = sequenceNo;
            SectionNo = sectionNo;
            PageIdsToExclude = pageIdsToExclude;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\SkipPageResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.SkipPageResponse.NextAction
public string NextAction { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\ValidatorFactory.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.ValidatorFactory.ValidatorFactory
public ValidatorFactory(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\SkipPageResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.SkipPageResponse.NextActionId
public string NextActionId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileRequest.QuestionId
public string QuestionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SkipPage\SkipPageBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SkipPage.SkipPageBySectionNoRequest.SequenceNo
public int SequenceNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\SkipPageResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.SkipPageResponse.SkipPageResponse
public SkipPageResponse()
        { }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileRequest.FileName
public string FileName { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SkipPage\SkipPageBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SkipPage.SkipPageBySectionNoRequest.SectionNo
public int SectionNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\SkipPageResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.SkipPageResponse.SkipPageResponse
public SkipPageResponse(string nextAction, string nextActionId)
        {
            NextAction = nextAction;
            NextActionId = nextActionId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileRequest.DownloadFileRequest
public DownloadFileRequest(Guid applicationId, Guid sectionId, string pageId, string questionId, string fileName)
        {
            ApplicationId = applicationId;
            SectionId = sectionId;
            PageId = pageId;
            QuestionId = questionId;
            FileName = fileName;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SkipPage\SkipPageBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SkipPage.SkipPageBySectionNoRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SkipPage\SkipPageBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SkipPage.SkipPageBySectionNoRequest.SkipPageBySectionNoRequest
public SkipPageBySectionNoRequest(Guid applicationId, int sequenceNo, int sectionNo, string pageId)
        {
            ApplicationId = applicationId;
            SequenceNo = sequenceNo;
            SectionNo = sectionNo;
            PageId = pageId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase.AddFile
private static async Task AddFile(Guid applicationId, Guid sequenceId, Guid sectionId, string pageId, string questionId, string filename, CloudBlobContainer container)
        {
            var questionDirectory = ContainerHelpers.GetDirectory(applicationId, sequenceId, sectionId, pageId, questionId, container);

            byte[] byteArray = Encoding.ASCII.GetBytes(filename);

            using (var stream = new MemoryStream(byteArray))
            {
                var fileBlob = questionDirectory.GetBlockBlobReference(filename);
                fileBlob.Properties.ContentType = "text/plain";
                await fileBlob.UploadFromStreamAsync(stream);
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_a_branching_condition_is_question_tag.Then_the_condition_does_not_pass_if_answer_does_not_match
[Test]
#if (!DEBUG)
        [Ignore("Must be tested on local DEV machine as it uses local Azure storage")]
#endif
        public async Task Then_the_condition_does_not_pass_if_answer_does_not_match()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId, "Yes", "No");

            var response = await Handler.Handle(new SubmitPageOfFilesRequest(applicationId, sectionId, "100", new FormFileCollection
            {
                GenerateFile("This is a dummy file", "Q1", "Yes")
            }), CancellationToken.None); ;

            response.Value.NextActionId.Should().Be("102");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_a_branching_condition_is_question_tag.Then_the_condition_passes_if_answer_matches
[Test]
#if (!DEBUG)
        [Ignore("Must be tested on local DEV machine as it uses local Azure storage")]
#endif
        public async Task Then_the_condition_passes_if_answer_matches()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId, "Yes", "Yes");

            var response = await Handler.Handle(new SubmitPageOfFilesRequest(applicationId, sectionId, "100", new FormFileCollection
            {
                GenerateFile("This is a dummy file", "Q1", "Yes")
            }), CancellationToken.None);

            response.Value.NextActionId.Should().Be("101");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\AddressValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.AddressValidatorTests.When_Validate_Called.Then_BuildingAndStreet_correct_errors_are_returned
[TestCase("", true)]
        [TestCase("{}", false)]
        [TestCase("{\"AddressLine1\" : \"\"}", false)]
        [TestCase("{\"AddressLine1\" : null}", false)]
        [TestCase("{\"AddressLine1\" : \"1 Test Street\"}", true)]
        [TestCase("{\"AddressLine1\" : \"1 Test Street\", \"AddressLine3\" : \"London\", \"Postcode\" : \"AB1 1BA\"}", true)]
        public void Then_BuildingAndStreet_correct_errors_are_returned(string input, bool isValid)
        {
            var validator = new AddressBuildingAndStreetRequiredValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "AddressLine1 is required",
                    Name = "AddressBuildingAndStreetRequired"
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\AddressValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.AddressValidatorTests.When_Validate_Called.Then_Postcode_correct_errors_are_returned
[TestCase("", true)]
        [TestCase("{}", false)]
        [TestCase("{\"Postcode\" : \"\"}", false)]
        [TestCase("{\"Postcode\" : null}", false)]
        [TestCase("{\"Postcode\" : \"AB1 1BA\"}", true)]
        [TestCase("{\"AddressLine1\" : \"1 Test Street\", \"AddressLine3\" : \"London\", \"Postcode\" : \"AB1 1BA\"}", true)]
        public void Then_Postcode_correct_errors_are_returned(string input, bool isValid)
        {
            var validator = new AddressPostcodeRequiredValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Postcode is required",
                    Name = "AddressPostcodeRequired"
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\StartApplication\StartApplicationHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.StartApplication.StartApplicationHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\AddressValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.AddressValidatorTests.When_Validate_Called.Then_TownOrCity_correct_errors_are_returned
[TestCase("", true)]
        [TestCase("{}", false)]
        [TestCase("{\"AddressLine3\" : \"\"}", false)]
        [TestCase("{\"AddressLine3\" : null}", false)]
        [TestCase("{\"AddressLine3\" : \"London\"}", true)]
        [TestCase("{\"AddressLine1\" : \"1 Test Street\", \"AddressLine3\" : \"London\", \"Postcode\" : \"AB1 1BA\"}", true)]
        public void Then_TownOrCity_correct_errors_are_returned(string input, bool isValid)
        {
            var validator = new AddressTownOrCityRequiredValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "AddressLine3 is required",
                    Name = "AddressTownOrCityRequired"
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\CanUpdatePage\CanUpdatePageRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.CanUpdatePage.CanUpdatePageRequest.SectionId
public Guid SectionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Feedback.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Feedback.From
public string From { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\CanUpdatePage\CanUpdatePageRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.CanUpdatePage.CanUpdatePageRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\MonthAndYearValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.MonthAndYearValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", false)]
        [TestCase(",", false)]
        [TestCase("01,0001", true)]
        [TestCase("11,2019", true)]
        [TestCase("12,9999", true)]
        public void Then_correct_errors_are_returned(string input, bool isValid)
        {
            var validator = new MonthAndYearValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Not a valid Date",
                    Name = "MonthAndYear"
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Feedback.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Feedback.Message
public string Message { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\CanUpdatePage\CanUpdatePageRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.CanUpdatePage.CanUpdatePageRequest.CanUpdatePageRequest
public CanUpdatePageRequest(Guid applicationId, Guid sectionId, string pageId)
        {
            ApplicationId = applicationId;
            SectionId = sectionId;
            PageId = pageId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_a_branching_condition_is_question_tag.Then_the_condition_does_not_pass_if_answer_does_not_match
[Test]
        public async Task Then_the_condition_does_not_pass_if_answer_does_not_match()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId, "Yes", "No");

            var response = await Handler.Handle(new SetPageAnswersRequest(applicationId, sectionId, "100", new List<Answer>
            {
                new Answer() {QuestionId = "Q1", Value = "Yes"}
            }), CancellationToken.None);

            response.Value.NextActionId.Should().Be("102");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Feedback.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Feedback.Date
public DateTime Date { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_a_branching_condition_is_question_tag.Then_the_condition_passes_if_answer_matches
[Test]
        public async Task Then_the_condition_passes_if_answer_matches()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId, "Yes", "Yes");

            var response = await Handler.Handle(new SetPageAnswersRequest(applicationId, sectionId, "100", new List<Answer>
            {
                new Answer() {QuestionId = "Q1", Value = "Yes"}
            }), CancellationToken.None);

            response.Value.NextActionId.Should().Be("101");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\UpsertFeedbackTests\When_Feedback_exists.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.UpsertFeedbackTests.When_Feedback_exists.Then_feedback_entry_is_not_inserted
[Test]
        public async Task Then_feedback_entry_is_not_inserted()
        {
            var existingSection = await _dataContext.ApplicationSections.SingleAsync();

            var existingPage = existingSection.QnAData.Pages[0];
            existingPage.Feedback.Should().NotBeNullOrEmpty();
            existingPage.Feedback.Count.Should().Be(1);

            await _handler.Handle(new UpsertFeedbackRequest(_applicationId, _sectionId, "1",
                new Feedback
                {
                    Date = DateTime.UtcNow,
                    From = "Dave",
                    Id = _feedbackId,
                    Message = "Feedback message"
                }), CancellationToken.None);

            var updatedSection = await _dataContext.ApplicationSections.SingleAsync();

            var updatedPage = updatedSection.QnAData.Pages[0];
            updatedPage.Feedback.Should().NotBeNullOrEmpty();
            updatedPage.Feedback.Count.Should().Be(1);

            var updatedFeedback = updatedPage.Feedback[0];
            updatedFeedback.Id.Should().Be(_feedbackId);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Feedback.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Feedback.IsCompleted
public bool IsCompleted { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Feedback.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Feedback.IsNew
public bool IsNew { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\SequencesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.SequencesController.GetSequence
[HttpGet("{applicationId}/sequences/{sequenceId:guid}")]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<Sequence>> GetSequence(Guid applicationId, Guid sequenceId)
        {
            var sequence = await _mediator.Send(new GetSequenceRequest(applicationId, sequenceId), CancellationToken.None);
            if (!sequence.Success) return NotFound(new NotFoundError(sequence.Message));

            return sequence.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\ValidatorFactory.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Validators.ValidatorFactory._serviceProvider
private readonly IServiceProvider _serviceProvider;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Services\TagProcessingService.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Services.TagProcessingService._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageTests\When_CanUpdatePage_handled.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdateTests.When_CanUpdatePage_handled.Then_true_is_returned_for_an_Active_page
[Test]
        public async Task Then_true_is_returned_for_an_Active_page()
        {
            var result = await Handler.Handle(new CanUpdatePageRequest(ApplicationId, SectionId, ActivePageId), CancellationToken.None);

            result.Value.Should().BeTrue();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSequencesTests\GetSequencesTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSequencesTests.GetSequencesTestBase.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\AzureTableStorageConfigurationProvider.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Configuration.Infrastructure.AzureTableStorageConfigurationProvider._connection
private readonly string _connection;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageTests\When_CanUpdatePage_handled.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdateTests.When_CanUpdatePage_handled.Then_false_is_returned_for_an_Inactive_page
[Test]
        public async Task Then_false_is_returned_for_an_Inactive_page()
        {
            var result = await Handler.Handle(new CanUpdatePageRequest(ApplicationId, SectionId, InactivePageId), CancellationToken.None);

            result.Value.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSequencesTests\GetSequencesTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSequencesTests.GetSequencesTestBase.SetUp
[SetUp]
        public async Task SetUp()
        {
            var dbContextOptions = new DbContextOptionsBuilder<QnaDataContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;

            var context = new QnaDataContext(dbContextOptions);

            ApplicationId = Guid.NewGuid();

            context.Applications.Add(new Data.Entities.Application { Id = ApplicationId });

            context.ApplicationSequences.AddRange(new[]
            {
                new ApplicationSequence {ApplicationId = ApplicationId, IsActive = false, SequenceNo = 1},
                new ApplicationSequence {ApplicationId = ApplicationId, IsActive = true, SequenceNo = 2},
                new ApplicationSequence {ApplicationId = Guid.NewGuid(), IsActive = true, SequenceNo = 1}
            });

            await context.SaveChangesAsync();

            var mapper = new Mapper(new MapperConfiguration(config => { config.AddMaps(AppDomain.CurrentDomain.GetAssemblies()); }));

            Handler = new GetSequencesHandler(context, mapper);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\CanUpdatePage\CanUpdatePageRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.CanUpdatePage.CanUpdatePageRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_a_branching_condition_is_question_tag.Then_the_condition_passes_if_the_answer_tested_for_is_blank
[Test]
        public async Task Then_the_condition_passes_if_the_answer_tested_for_is_blank()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId, "", "");

            var response = await Handler.Handle(new SetPageAnswersRequest(applicationId, sectionId, "100", new List<Answer>
            {
                new Answer() {QuestionId = "Q1", Value = ""}
            }), CancellationToken.None);

            response.Value.NextActionId.Should().Be("101");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Config\QnAConfig.cs
BlockTypes.METHOD, SFA.DAS.QnA.Configuration.Config.QnAConfig.SessionRedisConnectionString
public string SessionRedisConnectionString { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileHandler._fileStorageConfig
private readonly IOptions<FileStorageConfig> _fileStorageConfig;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileHandler._encryptionService
private readonly IEncryptionService _encryptionService;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPagesToIncomplete\ResetPagesToIncompleteRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPagesToIncomplete.ResetPagesToIncompleteRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase.FileExists
protected bool FileExists(Guid applicationId, Guid sequenceId, Guid sectionId, string pageId, string questionId, string filename, CloudBlobContainer container)
        {
            var questionDirectory = ContainerHelpers.GetDirectory(applicationId, sequenceId, sectionId, pageId, questionId, container);

            var fileBlob = questionDirectory.GetBlockBlobReference(filename);
            return fileBlob.Exists();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetAnswersBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetAnswersBase.MarkPageAsComplete
protected void MarkPageAsComplete(Page page)
        {
            page.Complete = true;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSequencesTests\When_GetSequences_handled.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSequencesTests.When_GetSequences_handled.Then_the_correct_sequences_are_returned
[Test]
        public async Task Then_the_correct_sequences_are_returned()
        {
            var results = await Handler.Handle(new GetSequencesRequest(ApplicationId), CancellationToken.None);

            results.Value.Count.Should().Be(2);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileHandler.DownloadFileHandler
public DownloadFileHandler(IOptions<FileStorageConfig> fileStorageConfig, IEncryptionService encryptionService, QnaDataContext dataContext)
        {
            _fileStorageConfig = fileStorageConfig;
            _encryptionService = encryptionService;
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\DateNotInFutureValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.DateNotInFutureValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", true)]
        [TestCase(",,", true)]
        [TestCase("01,01,0001", true)]
        [TestCase("01,11,2019", true)]
        [TestCase("31,12,9999", false)]
        public void Then_correct_errors_are_returned(string input, bool isValid)
        {
            var validator = new DateNotInFutureValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Date must not be in the future",
                    Name = "DateNotInFuture"
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileHandler.Handle
public async Task<HandlerResponse<DownloadFile>> Handle(DownloadFileRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.ApplicationSections.FirstOrDefaultAsync(sec => sec.Id == request.SectionId && sec.ApplicationId == request.ApplicationId, cancellationToken);

            if (section == null)
            {
                return new HandlerResponse<DownloadFile>(success: false, message: $"Section {request.SectionId} in Application {request.ApplicationId} does not exist.");
            }

            var downloadSerivce = new DownloadFileService(_fileStorageConfig, _encryptionService);
            return await downloadSerivce.GetDownloadFile(request.ApplicationId, section, request.PageId, request.QuestionId, request.FileName, cancellationToken);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiConfig.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiConfig.ResourceId
public string ResourceId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\ApplicationData\GetApplicationData\GetApplicationDataHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.ApplicationData.GetApplicationData.GetApplicationDataHandler.Handle
public async Task<HandlerResponse<string>> Handle(GetApplicationDataRequest request, CancellationToken cancellationToken)
        {
            var application = await _dataContext.Applications.AsNoTracking().SingleOrDefaultAsync(app => app.Id == request.ApplicationId, cancellationToken);
            return application is null
                ? new HandlerResponse<string>(success: false, message: "Application does not exist.")
                : new HandlerResponse<string>(application.ApplicationData);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Data\QnaDataContext.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.QnaDataContext.ApplicationSequences
public DbSet<ApplicationSequence> ApplicationSequences { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPageAnswers\ResetPageAnswersHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetPageAnswersHandler.ResetPageAnswersHandler
public ResetPageAnswersHandler(QnaDataContext dataContext, INotRequiredProcessor notRequiredProcessor, ITagProcessingService tagProcessingService) : base(dataContext, notRequiredProcessor, tagProcessingService, null)
        {
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\ApplicationData\GetApplicationData\GetApplicationDataHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.ApplicationData.GetApplicationData.GetApplicationDataHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPageAnswers\ResetPageAnswersHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetPageAnswersHandler.Handle
public async Task<HandlerResponse<ResetPageAnswersResponse>> Handle(ResetPageAnswersRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.ApplicationSections.SingleOrDefaultAsync(sec => sec.Id == request.SectionId && sec.ApplicationId == request.ApplicationId, cancellationToken);
            var validationErrorResponse = ValidateResetPageAnswersRequest(request.PageId, section);

            if (validationErrorResponse != null)
            {
                return validationErrorResponse;
            }

            await ResetPageAnswers(request.PageId, request.ApplicationId, section, cancellationToken);

            await _dataContext.SaveChangesAsync(cancellationToken);

            return new HandlerResponse<ResetPageAnswersResponse>(new ResetPageAnswersResponse(true));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationStatus.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Data.Entities.ApplicationStatus.Rejected
public const string Rejected = "Rejected";
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPageAnswers\ResetPageAnswersRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetPageAnswersRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiClient.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiClient.GetSectionBySectionNo
public async Task<Section> GetSectionBySectionNo(Guid applicationId, int sequenceNo, int sectionNo)
        {
            return await HttpCall<Section>(async () => await _httpClient.GetAsync(new Uri($"applications/{applicationId}/sequences/{sequenceNo}/sections/{sectionNo}", UriKind.Relative)));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\MaxLengthValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.MaxLengthValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text) && text.Length > long.Parse(ValidationDefinition.Value))
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPageAnswers\ResetPageAnswersBySectionNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetPageAnswersBySectionNoHandler.ResetPageAnswersBySectionNoHandler
public ResetPageAnswersBySectionNoHandler(QnaDataContext dataContext, INotRequiredProcessor notRequiredProcessor, ITagProcessingService tagProcessingService) : base(dataContext, notRequiredProcessor, tagProcessingService, null)
        {
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPageAnswers\ResetPageAnswersBySectionNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetPageAnswersBySectionNoHandler.Handle
public async Task<HandlerResponse<ResetPageAnswersResponse>> Handle(ResetPageAnswersBySectionNoRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.ApplicationSections.SingleOrDefaultAsync(sec => sec.SequenceNo == request.SequenceNo && sec.SectionNo == request.SectionNo && sec.ApplicationId == request.ApplicationId, cancellationToken);
            var validationErrorResponse = ValidateResetPageAnswersRequest(request.PageId, section);

            if (validationErrorResponse != null)
            {
                return validationErrorResponse;
            }

            await ResetPageAnswers(request.PageId, request.ApplicationId, section, cancellationToken);

            await _dataContext.SaveChangesAsync(cancellationToken);

            return new HandlerResponse<ResetPageAnswersResponse>(new ResetPageAnswersResponse(true));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\ResetSectionAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetSectionAnswersTestBase.SectionId
protected Guid SectionId;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_a_branching_condition_is_question_tag.Then_the_condition_does_not_pass_if_answer_is_blank_when_must_equal_a_value
[Test]
#if (!DEBUG)
        [Ignore("Must be tested on local DEV machine as it uses local Azure storage")]
#endif
        public async Task Then_the_condition_does_not_pass_if_answer_is_blank_when_must_equal_a_value()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId, "", "No");

            var response = await Handler.Handle(new SubmitPageOfFilesRequest(applicationId, sectionId, "100", new FormFileCollection
            {
                GenerateFile("This is a dummy file", "Q1", "Yes")
            }), CancellationToken.None);

            response.Value.NextActionId.Should().Be("102");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Config\QnAConfig.cs
BlockTypes.METHOD, SFA.DAS.QnA.Configuration.Config.QnAConfig.SqlConnectionstring
public string SqlConnectionstring { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\ResetSectionAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetSectionAnswersTestBase.SequenceNo
protected int SequenceNo = 2;
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationStatus.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Data.Entities.ApplicationStatus.Approved
public const string Approved = "Approved";
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\ResetSectionAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetSectionAnswersTestBase.SectionNo
protected int SectionNo = 4;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\ResetSectionAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetSectionAnswersTestBase.Handler
protected ResetSectionAnswersHandler Handler;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\EmailValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.EmailValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\ResetSectionAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetSectionAnswersTestBase.GetApplicationDataHandler
protected GetApplicationDataHandler GetApplicationDataHandler;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\EmailValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.EmailValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text) && !IsValidEmail(text))
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\ResetSectionAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetSectionAnswersTestBase.GetPageHandler
protected GetPageHandler GetPageHandler;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\EmailValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.EmailValidator.IsValidEmail
private static bool IsValidEmail(string email)
        {
            try
            {
                return Regex.IsMatch(email,
                    @"^[-!#$%&'*+/0-9=?A-Z^_a-z{|}~](\.?[-!#$%&'*+/0-9=?A-Z^_a-z{|}~])*@[a-zA-Z0-9](-?[a-zA-Z0-9])*(\.[a-zA-Z0-9](-?[a-zA-Z0-9])*)+$");
            }
            catch (ArgumentException)
            {
                return false;
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\ResetSectionAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetSectionAnswersTestBase.DataContext
protected QnaDataContext DataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Projects\UpsertProject\UpsertProjectRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Projects.UpsertProject.UpsertProjectRequest.ProjectId
public Guid ProjectId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\ResetSectionAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetSectionAnswersTestBase.Mediator
protected IMediator Mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\CanUpdatePage\CanUpdatePageBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.CanUpdatePage.CanUpdatePageBySectionNoRequest.SequenceNo
public int SequenceNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ResetSectionAnswersHandlerTests\ResetSectionAnswersTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ResetPageAnswersHandlerTests.ResetSectionAnswersTestBase.SetUp
[SetUp]
        public async Task SetUp()
        {
            DataContext = DataContextHelpers.GetInMemoryDataContext();
            Mediator = Substitute.For<IMediator>();
            Handler = new ResetSectionAnswersHandler(DataContext, Mediator, new NotRequiredProcessor(), new TagProcessingService(DataContext));
            GetApplicationDataHandler = new GetApplicationDataHandler(DataContext);
            GetPageHandler = new GetPageHandler(DataContext);

            ApplicationId = Guid.NewGuid();
            SectionId = Guid.NewGuid();
            await DataContext.ApplicationSections.AddAsync(new ApplicationSection()
            {
                ApplicationId = ApplicationId,
                Id = SectionId,
                SequenceNo = SequenceNo,
                SectionNo = SectionNo,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page()
                        {
                            PageId = "1",
                            Questions = new List<Question>{new Question(){QuestionId = "Q1", QuestionTag = "Q1", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>{ new PageOfAnswers { Answers = new List<Answer> { new Answer { QuestionId = "Q1", Value = "Yes" } } } },
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "2", Conditions = new List<Condition>(){ new Condition{QuestionId = "Q1", MustEqual = "Yes"}}},
                                new Next(){Action = "NextPage", ReturnId = "3", Conditions = new List<Condition>(){ new Condition{QuestionId = "Q1", MustEqual = "No"}}}
                            },
                            Feedback = new List<Feedback>{ new Feedback { IsCompleted = true } },
                            Active = true,
                            Complete = true
                        },
                        new Page()
                        {
                            PageId = "2",
                            Questions = new List<Question>{new Question(){QuestionId = "Q2", QuestionTag = "Q2", Input = new Input { Type = "FileUpload" } }},
                            PageOfAnswers = new List<PageOfAnswers>{ new PageOfAnswers { Answers = new List<Answer> { new Answer { QuestionId = "Q2", Value = "Folder/Filename.pdf" } } } },
                            Next = new List<Next>
                            {
                                new Next(){Action = "ReturnToSequence", Conditions = new List<Condition>() },
                            },
                            Active = true,
                            ActivatedByPageId = "1"
                        },
                        new Page()
                        {
                            PageId = "3",
                            Questions = new List<Question>{new Question(){QuestionId = "Q3", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "ReturnToSequence", Conditions = new List<Condition>()}
                            },
                            Active = false,
                            ActivatedByPageId = "1"
                        }
                    }
                }
            }); ;

            await DataContext.Applications.AddAsync(new Data.Entities.Application() { Id = ApplicationId, ApplicationData = "{ \"Q1\" : \"Yes\", \"Q2\" : \"Other\" }" });

            await DataContext.SaveChangesAsync();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\CanUpdatePage\CanUpdatePageBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.CanUpdatePage.CanUpdatePageBySectionNoRequest.SectionNo
public int SectionNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetApplicationData\SetApplicationDataRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetApplicationData.SetApplicationDataRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\CanUpdatePage\CanUpdatePageBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.CanUpdatePage.CanUpdatePageBySectionNoRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\ComplexRadioTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.ComplexRadioTypeValidator.ComplexRadioTypeValidator
public ComplexRadioTypeValidator()
        {
            ValidationDefinition = new ValidationDefinition() { ErrorMessage = "Answer must be one of the Input Options" };
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\CanUpdatePage\CanUpdatePageBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.CanUpdatePage.CanUpdatePageBySectionNoRequest.CanUpdatePageBySectionNoRequest
public CanUpdatePageBySectionNoRequest(Guid applicationId, int sequenceNo, int sectionNo, string pageId)
        {
            ApplicationId = applicationId;
            SequenceNo = sequenceNo;
            SectionNo = sectionNo;
            PageId = pageId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\ComplexRadioTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.ComplexRadioTypeValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\ErrorsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.ErrorsController.Error
[Route("{code}")]
        public IActionResult Error(int code)
        {
            var parsedCode = (HttpStatusCode)code;
            var error = new ApiError(code, parsedCode.ToString());
            return new ObjectResult(error);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Projects\CreateProject\CreateProjectHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Projects.CreateProject.CreateProjectHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetSectionAnswers\ResetSectionAnswersHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetSectionAnswersHandler._mediator
private readonly IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Projects\CreateProject\CreateProjectHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Projects.CreateProject.CreateProjectHandler.CreateProjectHandler
public CreateProjectHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetSectionAnswers\ResetSectionAnswersHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetSectionAnswersHandler.ResetSectionAnswersHandler
public ResetSectionAnswersHandler(QnaDataContext dataContext, IMediator mediator, INotRequiredProcessor notRequiredProcessor, ITagProcessingService tagProcessingService)
            : base(dataContext, notRequiredProcessor, tagProcessingService, null)
        {
            _mediator = mediator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetPage\GetPageRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetPage.GetPageRequest.SectionId
public Guid SectionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Projects\CreateProject\CreateProjectHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Projects.CreateProject.CreateProjectHandler.Handle
public async Task<HandlerResponse<Project>> Handle(CreateProjectRequest request, CancellationToken cancellationToken)
        {
            await _dataContext.Projects.AddAsync(request.Project, cancellationToken);
            await _dataContext.SaveChangesAsync(cancellationToken);
            return new HandlerResponse<Project>(request.Project);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetSectionAnswers\ResetSectionAnswersHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetSectionAnswersHandler.Handle
public async Task<HandlerResponse<ResetSectionAnswersResponse>> Handle(ResetSectionAnswersRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.ApplicationSections.SingleOrDefaultAsync(sec => sec.SequenceNo == request.SequenceNo && sec.SectionNo == request.SectionNo && sec.ApplicationId == request.ApplicationId, cancellationToken);
            var validationErrorResponse = ValidateSectionAnswersRequest(section);

            if (validationErrorResponse != null)
            {
                return validationErrorResponse;
            }

            foreach (var page in section.QnAData.Pages)
            {
                if (page.Questions.Any(q => "FileUpload".Equals(q.Input?.Type, StringComparison.InvariantCultureIgnoreCase)))
                {
                    foreach (var fileUploadQuestion in page.Questions.Where(q => "FileUpload".Equals(q.Input?.Type, StringComparison.InvariantCultureIgnoreCase)))
                    {
                        var answer = page.PageOfAnswers
                            .Select(x => x.Answers
                                .FirstOrDefault(b => b.QuestionId == fileUploadQuestion.QuestionId))
                            .FirstOrDefault();

                        if (answer != null)
                        {
                            await _mediator.Send(new DeleteFileRequest(request.ApplicationId, section.Id, page.PageId, fileUploadQuestion.QuestionId, answer.Value), CancellationToken.None);
                        }
                    }
                }

                await ResetPageAnswers(page.PageId, request.ApplicationId, section, cancellationToken, true, true);
            }

            await _dataContext.SaveChangesAsync(cancellationToken);

            return new HandlerResponse<ResetSectionAnswersResponse>(new ResetSectionAnswersResponse(true));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetPage\GetPageRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetPage.GetPageRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetPage\GetPageRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetPage.GetPageRequest.GetPageRequest
public GetPageRequest(Guid applicationId, Guid sectionId, string pageId)
        {
            ApplicationId = applicationId;
            SectionId = sectionId;
            PageId = pageId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\ComplexRadioTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.ComplexRadioTypeValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text))
            {
                var validValues = question.Input.Options.Select(o => o.Value).ToList();

                if (validValues.All(v => v != text))
                {
                    errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
                }
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\EmailTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.EmailTypeValidator.EmailTypeValidator
public EmailTypeValidator()
        {
            ValidationDefinition = new ValidationDefinition() { ErrorMessage = "Answer must be a valid email" };
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\FeedbackController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.FeedbackController.CompleteFeedbackWithinSequence
[HttpPost("{applicationId}/sequence/{sequenceId}/feedback/completed")]
        [ProducesResponseType((int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.BadRequest)]
        public async Task<ActionResult<bool>> CompleteFeedbackWithinSequence(Guid applicationId, Guid sequenceId)
        {
            var completeFeedbackWithinSequenceResponse = await _mediator.Send(new CompleteFeedbackWithinSequenceRequest(applicationId, sequenceId), CancellationToken.None);
            if (!completeFeedbackWithinSequenceResponse.Success) return BadRequest(new BadRequestError(completeFeedbackWithinSequenceResponse.Message));

            return completeFeedbackWithinSequenceResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Input.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Input.InputClasses
public string InputClasses { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\DateNotInFutureValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.DateNotInFutureValidator.Validate
public override List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            if (!IsEmpty(answer, out string[] dateParts) && (!TryParseExact(dateParts, out DateTime dateEntered) || dateEntered > DateTime.Today))
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Input.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Input.InputPrefix
public string InputPrefix { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DeleteFile\DeleteFileRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DeleteFile.DeleteFileRequest.SectionId
public Guid SectionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Input.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Input.InputSuffix
public string InputSuffix { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DeleteFile\DeleteFileRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DeleteFile.DeleteFileRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Input.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Input.Options
public List<Option> Options { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DeleteFile\DeleteFileRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DeleteFile.DeleteFileRequest.QuestionId
public string QuestionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\QnaDataContext.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.QnaDataContext.ApplicationSections
public DbSet<ApplicationSection> ApplicationSections { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Input.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Input.Validations
public List<ValidationDefinition> Validations { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DeleteFile\DeleteFileRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DeleteFile.DeleteFileRequest.FileName
public string FileName { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSequences\GetWorkflowSequence\GetWorkflowSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSequences.GetWorkflowSequence.GetWorkflowSequenceRequest.WorkflowId
public Guid WorkflowId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Input.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Input.DataEndpoint
public string DataEndpoint { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DeleteFile\DeleteFileRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DeleteFile.DeleteFileRequest.DeleteFileRequest
public DeleteFileRequest(Guid applicationId, Guid sectionId, string pageId, string questionId, string fileName)
        {
            ApplicationId = applicationId;
            SectionId = sectionId;
            PageId = pageId;
            QuestionId = questionId;
            FileName = fileName;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_files_specified_is_null.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_files_specified_is_null.Then_return_no_files_specified_message
[Test]
        public async Task Then_return_no_files_specified_message()
        {
            var response = await Handler.Handle(new SubmitPageOfFilesRequest(ApplicationId, SectionId, "1", null), CancellationToken.None);

            response.Success.Should().BeFalse();
            response.Message.Should().Be("No files specified.");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Input.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Input.GetEmptyAnswerValues
public List<string> GetEmptyAnswerValues()
        {
            List<string> emptyAnswerValues = new List<string> { string.Empty };

            switch (Type)
            {
                case "MonthAndYear":
                    emptyAnswerValues.Add(",");
                    break;
                case "Date":
                    emptyAnswerValues.Add(",,");
                    break;
            }

            return emptyAnswerValues;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\UploadFile\SubmitPageOfFilesHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.UploadFile.SubmitPageOfFilesHandler.GetExistingAnswersFromPage
private static List<Answer> GetExistingAnswersFromPage(Page page)
        {
            var answers = new List<Answer>();

            if (page.PageOfAnswers != null)
            {
                foreach (var pageOfAnswers in page.PageOfAnswers)
                {
                    foreach (var pageAnswer in pageOfAnswers.Answers)
                    {
                        if (answers.All(a => a.QuestionId != pageAnswer.QuestionId))
                        {
                            answers.Add(pageAnswer);
                        }
                    }
                }
            }

            return answers;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSections\GetWorkflowSections\GetWorkflowSectionsHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.WorkflowSections.GetWorkflowSections.GetWorkflowSectionsHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSections\GetWorkflowSections\GetWorkflowSectionsHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSections.GetWorkflowSections.GetWorkflowSectionsHandler.GetWorkflowSectionsHandler
public GetWorkflowSectionsHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSectionsTests\GetSectionsTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSectionsTests.GetSectionsTestBase.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\SequencesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.SequencesController.GetSequenceBySequenceNo
[HttpGet("{applicationId}/sequences/{sequenceNo:int}")]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<Sequence>> GetSequenceBySequenceNo(Guid applicationId, int sequenceNo)
        {
            var sequence = await _mediator.Send(new GetSequenceBySequenceNoRequest(applicationId, sequenceNo), CancellationToken.None);
            if (!sequence.Success) return NotFound(new NotFoundError(sequence.Message));

            return sequence.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSections\GetWorkflowSections\GetWorkflowSectionsHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSections.GetWorkflowSections.GetWorkflowSectionsHandler.Handle
public async Task<HandlerResponse<List<WorkflowSection>>> Handle(GetWorkflowSectionsRequest request, CancellationToken cancellationToken)
        {
            var sections = await _dataContext.WorkflowSections.AsNoTracking().Where(sec => sec.ProjectId == request.ProjectId).ToListAsync(cancellationToken);
            return !sections.Any()
                ? new HandlerResponse<List<WorkflowSection>>(success: false, message: "No sections exist for this Project ID")
                : new HandlerResponse<List<WorkflowSection>>(sections);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetSectionsTests\GetSectionsTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetSectionsTests.GetSectionsTestBase.SetUp
[SetUp]
        public async Task SetUp()
        {
            var dbContextOptions = new DbContextOptionsBuilder<QnaDataContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;

            var context = new QnaDataContext(dbContextOptions);

            ApplicationId = Guid.NewGuid();

            context.Applications.Add(new Data.Entities.Application { Id = ApplicationId, ApplicationData = "{}" });

            context.ApplicationSequences.AddRange(new[]
            {
                new ApplicationSequence {ApplicationId = ApplicationId, IsActive = false, SequenceNo = 1},
                new ApplicationSequence {ApplicationId = ApplicationId, IsActive = true, SequenceNo = 2}
            });

            context.ApplicationSections.AddRange(new[]
            {
                new ApplicationSection {ApplicationId = ApplicationId, SequenceNo = 1, SectionNo = 1, QnAData = new QnAData { Pages = new List<Page>()} },
                new ApplicationSection {ApplicationId = ApplicationId, SequenceNo = 1, SectionNo = 2, QnAData = new QnAData { Pages = new List<Page>()} },
                new ApplicationSection {ApplicationId = ApplicationId, SequenceNo = 2, SectionNo = 1, QnAData = new QnAData { Pages = new List<Page>()} }
            });

            await context.SaveChangesAsync();

            var mapper = new Mapper(new MapperConfiguration(config => { config.AddMaps(AppDomain.CurrentDomain.GetAssemblies()); }));

            Handler = new GetSectionsHandler(context, mapper, new NotRequiredProcessor());
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\DateValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.DateValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", false)]
        [TestCase(",,", false)]
        [TestCase("01,01,0001", true)]
        [TestCase("01,11,2019", true)]
        [TestCase("31,12,9999", true)]
        [TestCase("32,12,2020", false)]
        [TestCase("31,13,2020", false)]
        [TestCase("29,02,2020", true)]
        [TestCase("29,02,2021", false)]
        public void Then_correct_errors_are_returned(string input, bool isValid)
        {
            var validator = new DateValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Not a valid Date",
                    Name = "Date"
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Deserializer\HandlerResponseDeserializer.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Deserializer.HandlerResponseDeserializer.Deserialize
public static object Deserialize(HandlerResponse<string> handlerResponse) { return JsonSerializer.Deserialize<object>(handlerResponse.Value); }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\UpsertFeedback\UpsertFeedbackRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.UpsertFeedback.UpsertFeedbackRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\DeleteFeedback\DeleteFeedbackHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.PageFeedback.DeleteFeedback.DeleteFeedbackHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Feedback.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Feedback.Id
public Guid Id { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\DeleteFeedback\DeleteFeedbackHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.DeleteFeedback.DeleteFeedbackHandler.DeleteFeedbackHandler
public DeleteFeedbackHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationSection.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.ApplicationSection.ApplicationId
public Guid ApplicationId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\DeleteFeedback\DeleteFeedbackHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.DeleteFeedback.DeleteFeedbackHandler.Handle
public async Task<HandlerResponse<Page>> Handle(DeleteFeedbackRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.ApplicationSections.SingleOrDefaultAsync(sec => sec.ApplicationId == request.ApplicationId && sec.Id == request.SectionId, cancellationToken);
            if (section is null) return new HandlerResponse<Page>(success: false, message: $"SectionId {request.SectionId} does not exist in ApplicationId {request.ApplicationId}");

            var qnaData = new QnAData(section.QnAData);

            var page = qnaData.Pages.SingleOrDefault(p => p.PageId == request.PageId);
            if (page is null) return new HandlerResponse<Page>(success: false, message: $"PageId {request.PageId} does not exist");

            if (page.Feedback is null) return new HandlerResponse<Page>(success: false, message: $"Feedback {request.FeedbackId} does not exist");

            var existingFeedback = page.Feedback.SingleOrDefault(f => f.Id == request.FeedbackId);

            if (existingFeedback is null) return new HandlerResponse<Page>(success: false, message: $"Feedback {request.FeedbackId} does not exist");

            page.Feedback.Remove(existingFeedback);

            section.QnAData = qnaData;
            await _dataContext.SaveChangesAsync(cancellationToken);

            return new HandlerResponse<Page>(page);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Data\QnaDataContext.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.QnaDataContext.Projects
public DbSet<Project> Projects { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationSection.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.ApplicationSection.SequenceNo
public int SequenceNo { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\FinancialApplicationGrade.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.FinancialApplicationGrade.SelectedGrade
public string SelectedGrade { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationSection.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.ApplicationSection.SectionNo
public int SectionNo { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\MaxWordCountValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.MaxWordCountValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationSection.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.ApplicationSection.QnAData
public QnAData QnAData { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\MaxWordCountValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.MaxWordCountValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text))
            {
                var wordCount = text.Split(new[] { " " }, StringSplitOptions.RemoveEmptyEntries).Length;

                if (wordCount > long.Parse(ValidationDefinition.Value))
                {
                    errors.Add(new KeyValuePair<string, string>(answer.QuestionId, ValidationDefinition.ErrorMessage));
                }
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_a_branching_condition_is_question_tag.Then_the_condition_does_not_pass_if_answer_is_not_blank_when_must_equal_blank
[Test]
#if (!DEBUG)
        [Ignore("Must be tested on local DEV machine as it uses local Azure storage")]
#endif
        public async Task Then_the_condition_does_not_pass_if_answer_is_not_blank_when_must_equal_blank()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId, "Yes", "");

            var response = await Handler.Handle(new SubmitPageOfFilesRequest(applicationId, sectionId, "100", new FormFileCollection
            {
                GenerateFile("This is a dummy file", "Q1", "Yes")
            }), CancellationToken.None);

            response.Value.NextActionId.Should().Be("102");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationSection.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.ApplicationSection.Title
public string Title { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationSection.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.ApplicationSection.LinkTitle
public string LinkTitle { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationSection.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.ApplicationSection.DisplayType
public string DisplayType { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationSection.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.ApplicationSection.SequenceId
public Guid SequenceId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Authorization\LocalAuthorizationHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Authorization.LocalAuthorizationHandler.HandleRequirementAsync
protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, NoneRequirement requirement)
        {
            context.Succeed(requirement);
            return Task.CompletedTask;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\RequiredValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.RequiredValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", "Text", false)]
        [TestCase("     ", "Text", false)]
        [TestCase(".", "Text", true)]
        [TestCase(",", "Text", true)]
        [TestCase(",,", "Text", true)]
        [TestCase("some input", "Text", true)]
        [TestCase("    some input", "Text", true)]
        [TestCase("", "Date", false)]
        [TestCase("     ", "Date", false)]
        [TestCase(",,", "Date", false)]
        [TestCase("10,10,2010", "Date", true)]
        [TestCase(",10,2010", "Date", true)]
        [TestCase("10,,2010", "Date", true)]
        [TestCase("10,10,", "Date", true)]
        [TestCase("", "MonthAndYear", false)]
        [TestCase("     ", "MonthAndYear", false)]
        [TestCase(",", "MonthAndYear", false)]
        [TestCase("10,2010", "MonthAndYear", true)]
        [TestCase(",2010", "MonthAndYear", true)]
        [TestCase("10,", "MonthAndYear", true)]
        public void Then_correct_errors_are_returned(string input, string inputType, bool isValid)
        {
            var validator = new RequiredValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Input is required",
                    Name = "Required"
                }
            };

            var question = new Question { QuestionId = "Q1", Input = new Input { Type = inputType } };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\FileController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.FileController.DeleteFile
[HttpDelete("{applicationId}/sections/{sectionId}/pages/{pageId}/questions/{questionId}/download/{fileName}")]
        public async Task<IActionResult> DeleteFile(Guid applicationId, Guid sectionId, string pageId, string questionId, string fileName)
        {
            var deleteFileResponse = await _mediator.Send(new DeleteFileRequest(applicationId, sectionId, pageId, questionId, fileName));

            if (!deleteFileResponse.Success)
            {
                _logger.LogError($"Unable to delete file for question {questionId} | Reason : {deleteFileResponse.Message}");
                return BadRequest(new BadRequestError(deleteFileResponse.Message));
            }

            return Ok();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_a_branching_condition_is_question_tag.Then_the_condition_does_not_pass_if_answer_is_blank_when_must_equal_a_value
[Test]
        public async Task Then_the_condition_does_not_pass_if_answer_is_blank_when_must_equal_a_value()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId, "", "No");

            var response = await Handler.Handle(new SetPageAnswersRequest(applicationId, sectionId, "100", new List<Answer>
            {
                new Answer() {QuestionId = "Q1", Value = "Yes"}
            }), CancellationToken.None);

            response.Value.NextActionId.Should().Be("102");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionBySectionNoHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionBySectionNoHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\SetPageAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.SetPageAnswersTestBase.SectionId
protected Guid SectionId;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionBySectionNoHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionBySectionNoHandler._mapper
private readonly IMapper _mapper;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\SetPageAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.SetPageAnswersTestBase.Handler
protected SetPageAnswersHandler Handler;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\QnAData.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.QnAData.QnAData
public QnAData(QnAData copyFrom)
        {
            this.Pages = copyFrom.Pages;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionBySectionNoHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionBySectionNoHandler._notRequiredProcessor
private readonly INotRequiredProcessor _notRequiredProcessor;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\SetPageAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.SetPageAnswersTestBase.DataContext
protected QnaDataContext DataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Authorization\AuthorizationExtensions.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Authorization.AuthorizationExtensions.AddApiAuthorization
public static IServiceCollection AddApiAuthorization(this IServiceCollection services, IHostingEnvironment environment)
        {
            var isDevelopment = environment.IsDevelopment();

            services.AddAuthorization(x =>
            {
                x.AddPolicy("Default", policy =>
                {
                    if (isDevelopment)
                    {
                        policy.AllowAnonymousUser();
                    }
                    else
                    {
                        policy.RequireAuthenticatedUser();
                        policy.RequireRole("Default");
                    }
                });

                x.DefaultPolicy = x.GetPolicy("Default");
            });

            if (isDevelopment)
            {
                services.AddSingleton<IAuthorizationHandler, LocalAuthorizationHandler>();
            }

            return services;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionBySectionNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionBySectionNoHandler.GetSectionBySectionNoHandler
public GetSectionBySectionNoHandler(QnaDataContext dataContext, IMapper mapper, INotRequiredProcessor notRequiredProcessor)
        {
            _dataContext = dataContext;
            _mapper = mapper;
            _notRequiredProcessor = notRequiredProcessor;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\SetPageAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.SetPageAnswersTestBase.NotRequiredProcessor
protected NotRequiredProcessor NotRequiredProcessor;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\StorageMigrationController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.FileMigrationResult.MigratedFiles
public List<MigratedFile> MigratedFiles { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionBySectionNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionBySectionNoHandler.Handle
public async Task<HandlerResponse<Section>> Handle(GetSectionBySectionNoRequest request, CancellationToken cancellationToken)
        {
            var application = await _dataContext.Applications.AsNoTracking().FirstOrDefaultAsync(app => app.Id == request.ApplicationId, cancellationToken: cancellationToken);
            if (application is null) return new HandlerResponse<Section>(false, "Application does not exist");

            var section = await _dataContext.ApplicationSections.AsNoTracking().FirstOrDefaultAsync(sec => sec.SectionNo == request.SectionNo && sec.SequenceNo == request.SequenceNo && sec.ApplicationId == request.ApplicationId, cancellationToken);
            if (section is null) return new HandlerResponse<Section>(false, "Section does not exist");

            RemovePages(application, section);

            return new HandlerResponse<Section>(_mapper.Map<Section>(section));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\SetPageAnswersTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.SetPageAnswersTestBase.TagProcessingService
protected TagProcessingService TagProcessingService;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\SetPageAnswersTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.SetPageAnswersTestBase.SetUp
[SetUp]
        public async Task SetUp()
        {
            DataContext = DataContextHelpers.GetInMemoryDataContext();
            var validator = Substitute.For<IAnswerValidator>();
            NotRequiredProcessor = new NotRequiredProcessor();
            TagProcessingService = new TagProcessingService(DataContext);

            validator.Validate(Arg.Any<List<Answer>>(), Arg.Any<Page>()).Returns(new List<KeyValuePair<string, string>>());

            Handler = new SetPageAnswersHandler(DataContext, validator, NotRequiredProcessor, TagProcessingService);

            ApplicationId = Guid.NewGuid();
            SectionId = Guid.NewGuid();
            await DataContext.ApplicationSections.AddAsync(new ApplicationSection()
            {
                ApplicationId = ApplicationId,
                Id = SectionId,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page()
                        {
                            PageId = "1",
                            Questions = new List<Question>{new Question(){QuestionId = "Q1", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "2", Conditions = new List<Condition>(){ new Condition{QuestionId = "Q1", MustEqual = "Yes"}}},
                                new Next(){Action = "NextPage", ReturnId = "4", Conditions = new List<Condition>(){ new Condition{QuestionId = "Q1", MustEqual = "No"}}}
                            },
                            Active = true
                        },
                        new Page()
                        {
                            PageId = "2",
                            Questions = new List<Question>{new Question(){QuestionId = "Q2", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "3", Conditions = new List<Condition>(){  new Condition{QuestionId = "Q2", MustEqual = "Yes"}}},
                                new Next(){Action = "NextPage", ReturnId = "5", Conditions = new List<Condition>(){ new  Condition{QuestionId = "Q2", MustEqual = "No"}}}
                            },
                            Active = false,
                            ActivatedByPageId = "1"
                        },
                        new Page()
                        {
                            PageId = "3",
                            Questions = new List<Question>{new Question(){QuestionId = "Q3", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "7"}
                            },
                            Active = false,
                            ActivatedByPageId = "2"
                        },
                        new Page()
                        {
                            PageId = "4",
                            Questions = new List<Question>{new Question(){QuestionId = "Q4", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "6"}
                            },
                            Active = false,
                            ActivatedByPageId = "1"
                        },
                        new Page()
                        {
                            PageId = "5",
                            Questions = new List<Question>{new Question(){QuestionId = "Q5", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "7"}
                            },
                            Active = false,
                            ActivatedByPageId = "2"
                        },
                        new Page()
                        {
                            PageId = "6",
                            Questions = new List<Question>{new Question(){QuestionId = "Q6", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "8"}
                            },
                            Active = false,
                            ActivatedByPageId = "1"
                        },
                        new Page()
                        {
                            PageId = "7",
                            Questions = new List<Question>{new Question(){QuestionId = "Q7", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "8"}
                            },
                            Active = false,
                            ActivatedByPageId = "1"
                        },
                        new Page()
                        {
                            PageId = "8",
                            Questions = new List<Question>{new Question(){QuestionId = "Q8", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "9"}
                            },
                            Active = true
                        },
                        new Page()
                        {
                            PageId = "9",
                            Questions = new List<Question>{new Question(){QuestionId = "Q9", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "10"}
                            },
                            Active = true
                        },
                        new Page()
                        {
                            PageId = "10",
                            Questions = new List<Question>{new Question(){QuestionId = "Q10", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "ReturnToSequence", ReturnId = "1"}
                            },
                            Active = true
                        }
                    }
                }
            });

            await DataContext.Applications.AddAsync(new Data.Entities.Application() { Id = ApplicationId, ApplicationData = "{}" });

            await DataContext.SaveChangesAsync();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\MaxWordCountValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.MaxWordCountValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", "10", true)]
        [TestCase("Mary had a little lamb", "10", true)]
        [TestCase("    Mary  had   a   little lamb ", "10", true)]
        [TestCase("Mary had a little lamb, its fleece was white as snow", "10", false)]
        [TestCase("   Mary had a     little lamb, its fleece was white as snow                   ", "10", false)]
        public void Then_correct_errors_are_returned(string input, string wordLimit, bool isValid)
        {
            var validator = new MaxWordCountValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Word count exceeded",
                    Name = "MaxWordCount",
                    Value = wordLimit
                }
            };

            var question = new Question { QuestionId = "Q1" };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSequences\GetWorkflowSequence\GetWorkflowSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSequences.GetWorkflowSequence.GetWorkflowSequenceRequest.SequenceId
public Guid SequenceId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Program.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Program.Main
public static void Main(string[] args)
        {
            var logger = NLogBuilder.ConfigureNLog("nlog.config").GetCurrentClassLogger();
            try
            {
                logger.Info("Starting up host");
                CreateWebHostBuilder(args).Build().Run();
            }
            catch (Exception ex)
            {
                logger.Error(ex, "Stopped program because of exception");
                throw;
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DeleteFile\DeleteFileRequest.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.DeleteFile.DeleteFileHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSequences\GetWorkflowSequence\GetWorkflowSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSequences.GetWorkflowSequence.GetWorkflowSequenceRequest.GetWorkflowSequenceRequest
public GetWorkflowSequenceRequest(Guid workflowId, Guid sequenceId)
        {
            WorkflowId = workflowId;
            SequenceId = sequenceId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Program.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Program.CreateWebHostBuilder
public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
            WebHost.CreateDefaultBuilder(args)
                .UseApplicationInsights()
                .UseStartup<Startup>()
                .UseNLog();
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetPage\GetPageRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetPage.GetPageRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\AddressBuildingAndStreetRequiredValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.AddressBuildingAndStreetRequiredValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\ConfigKeyProvider.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.ConfigKeyProvider._config
private readonly IOptions<FileStorageConfig> _config;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\ConfigKeyProvider.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.ConfigKeyProvider.ConfigKeyProvider
public ConfigKeyProvider(IOptions<FileStorageConfig> config)
        {
            _config = config;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetPage\GetPageBySectionNoHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sections.GetPage.GetPageBySectionNoHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSequences\GetWorkflowSequences\GetWorkflowSequencesHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.WorkflowSequences.GetWorkflowSequences.GetWorkflowSequencesHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\ConfigKeyProvider.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.ConfigKeyProvider.GetKey
public string GetKey()
        {
            var key = _config.Value.FileEncryptionKey;

            return key;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetPage\GetPageBySectionNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetPage.GetPageBySectionNoHandler.GetPageBySectionNoHandler
public GetPageBySectionNoHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSequences\GetWorkflowSequences\GetWorkflowSequencesHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSequences.GetWorkflowSequences.GetWorkflowSequencesHandler.GetWorkflowSequencesHandler
public GetWorkflowSequencesHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetPage\GetPageBySectionNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetPage.GetPageBySectionNoHandler.Handle
public async Task<HandlerResponse<Page>> Handle(GetPageBySectionNoRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.ApplicationSections.AsNoTracking().FirstOrDefaultAsync(sec => sec.SectionNo == request.SectionNo && sec.SequenceNo == request.SequenceNo && sec.ApplicationId == request.ApplicationId, cancellationToken);
            if (section is null) return new HandlerResponse<Page>(false, "Section does not exist");

            var page = section.QnAData.Pages.FirstOrDefault(p => p.PageId == request.PageId);
            if (page is null) return new HandlerResponse<Page>(false, "Page does not exist");

            return new HandlerResponse<Page>(page);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetPage\GetPageBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetPage.GetPageBySectionNoRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSequences\GetWorkflowSequences\GetWorkflowSequencesHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSequences.GetWorkflowSequences.GetWorkflowSequencesHandler.Handle
public async Task<HandlerResponse<List<WorkflowSequence>>> Handle(GetWorkflowSequencesRequest request, CancellationToken cancellationToken)
        {
            var sequences = await _dataContext.WorkflowSequences.AsNoTracking().Where(seq => seq.WorkflowId == request.WorkflowId).ToListAsync(cancellationToken);

            return !sequences.Any()
                ? new HandlerResponse<List<WorkflowSequence>>(success: false, message: "No sequences exist for this Workflow ID")
                : new HandlerResponse<List<WorkflowSequence>>(sequences);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DeleteFile\DeleteFileRequest.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.DeleteFile.DeleteFileHandler._fileStorageConfig
private readonly IOptions<FileStorageConfig> _fileStorageConfig;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetPageAnswers\ResetPageAnswersBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetPageAnswersBySectionNoRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DeleteFile\DeleteFileRequest.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.DeleteFile.DeleteFileHandler._answerValidator
private readonly IAnswerValidator _answerValidator;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DeleteFile\DeleteFileRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DeleteFile.DeleteFileHandler.DeleteFileHandler
public DeleteFileHandler(QnaDataContext dataContext, IAnswerValidator answerValidator, IOptions<FileStorageConfig> fileStorageConfig)
        {
            _dataContext = dataContext;
            _fileStorageConfig = fileStorageConfig;
            _answerValidator = answerValidator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\CanUpdatePage\CanUpdatePageHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sections.CanUpdatePage.CanUpdatePageHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Services\TagProcessingService.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Services.TagProcessingService.TagProcessingService
public TagProcessingService(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\RemovePageAnswer\RemovePageAnswerHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.RemovePageAnswer.RemovePageAnswerHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\CanUpdatePage\CanUpdatePageHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.CanUpdatePage.CanUpdatePageHandler.CanUpdatePageHandler
public CanUpdatePageHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\RemovePageAnswer\RemovePageAnswerHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.RemovePageAnswer.RemovePageAnswerHandler.RemovePageAnswerHandler
public RemovePageAnswerHandler(QnaDataContext dataContext) : base(dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\CanUpdatePage\CanUpdatePageHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.CanUpdatePage.CanUpdatePageHandler.Handle
public async Task<HandlerResponse<bool>> Handle(CanUpdatePageRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.ApplicationSections.FirstOrDefaultAsync(sec => sec.Id == request.SectionId && sec.ApplicationId == request.ApplicationId, cancellationToken);
            if (section is null) return new HandlerResponse<bool>(false, "Section does not exist");

            var page = section.QnAData.Pages.FirstOrDefault(p => p.PageId == request.PageId);
            if (page is null) return new HandlerResponse<bool>(false, "Page does not exist");

            return new HandlerResponse<bool>(page.Active);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\RemovePageAnswer\RemovePageAnswerHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.RemovePageAnswer.RemovePageAnswerHandler.Handle
public async Task<HandlerResponse<RemovePageAnswerResponse>> Handle(RemovePageAnswerRequest request, CancellationToken cancellationToken)
        {
            await GetSectionAndPage(request.ApplicationId, request.SectionId, request.PageId);

            if (Application == null || Section == null || Page == null)
            {
                return new HandlerResponse<RemovePageAnswerResponse>(false, $"ApplicationId {request.ApplicationId}, Section {request.SectionId} or PageId {request.PageId} does not exist.");
            }

            if (Page.AllowMultipleAnswers == false)
            {
                return new HandlerResponse<RemovePageAnswerResponse>(false, $"ApplicationId {request.ApplicationId}, Section {request.SectionId}, PageId {request.PageId} does not AllowMultipleAnswers ");
            }

            var pageOfAnswers = Page.PageOfAnswers.SingleOrDefault(poa => poa.Id == request.AnswerId);

            if (pageOfAnswers == null)
            {
                return new HandlerResponse<RemovePageAnswerResponse>(false, $"AnswerId {request.AnswerId} does not exist.");
            }

            Page.PageOfAnswers.Remove(pageOfAnswers);

            if (Page.PageOfAnswers.Count == 0)
            {
                Page.Complete = false;
                if (Page.HasFeedback)
                {
                    foreach (var feedback in Page.Feedback.Where(feedback => feedback.IsNew).Select(feedback => feedback))
                    {
                        feedback.IsCompleted = false;
                    }
                }
            }
            else
            {
                MarkFeedbackComplete(Page);
            }

            Section.QnAData = QnaData;



            await _dataContext.SaveChangesAsync(CancellationToken.None);

            return new HandlerResponse<RemovePageAnswerResponse>(new RemovePageAnswerResponse(Page));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Startup.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Startup.ConfigureServices
public void ConfigureServices(IServiceCollection services)
        {
            services.AddOptions();
            services.Configure<QnAConfig>(Configuration.GetSection("QnA"));
            services.Configure<AzureActiveDirectoryConfiguration>(Configuration.GetSection("AzureActiveDirectoryConfiguration"));
            services.Configure<FileStorageConfig>(Configuration.GetSection("FileStorage"));
            var serviceProvider = services.BuildServiceProvider();
            var config = serviceProvider.GetService<IOptions<QnAConfig>>();
            IdentityModelEventSource.ShowPII = false;

            services.AddApiAuthorization(_hostingEnvironment);
            services.AddApiAuthentication(serviceProvider);

            services.RegisterAllTypes<IValidator>(new[] { typeof(IValidator).Assembly });
            services.AddTransient<IValidatorFactory, ValidatorFactory>();
            services.AddTransient<IAnswerValidator, AnswerValidator>();
            services.AddTransient<IFileContentValidator, FileContentValidator>();
            services.AddTransient<IApplicationDataValidator, ApplicationDataValidator>();

            services.AddTransient<IEncryptionService, EncryptionService>();
            services.AddTransient<INotRequiredProcessor, NotRequiredProcessor>();
            services.AddTransient<IKeyProvider, ConfigKeyProvider>();
            services.AddTransient<ITagProcessingService, TagProcessingService>();
            services.AddAutoMapper(typeof(SystemTime).Assembly);
            services.AddMediatR(AppDomain.CurrentDomain.GetAssemblies());

            services.AddDbContext<QnaDataContext>(options =>
            {
                var qnaSqlConnectionString = config.Value.SqlConnectionstring;

                var connection = new System.Data.SqlClient.SqlConnection(qnaSqlConnectionString);

                if (!_hostingEnvironment.IsDevelopment())
                {
                    var generateTokenTask = SqlTokenGenerator.GenerateTokenAsync();
                    connection.AccessToken = generateTokenTask.GetAwaiter().GetResult();
                }

                options.UseSqlServer(connection, providerOptions => providerOptions.EnableRetryOnFailure());
            });

            services.AddEntityFrameworkSqlServer();

            services.AddMvc(setup =>
            {
                setup.EnableEndpointRouting = false;
                if (!_hostingEnvironment.IsDevelopment())
                {
                    setup.Filters.Add(new AuthorizeFilter("default"));
                }
                setup.Conventions.Add(new ApiExplorerGroupConvention());
            });

            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "QnA API", Version = "0.1" });
                c.SwaggerDoc("config", new OpenApiInfo { Title = "QnA API Config", Version = "0.1" });

                if (_hostingEnvironment.IsDevelopment())
                {
                    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
                    c.IncludeXmlComments(xmlPath);
                }
            });

            services.AddHealthChecks().AddDbContextCheck<QnaDataContext>();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\SimpleRadioNotNullValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.SimpleRadioNotNullValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\SimpleRadioNotNullValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.SimpleRadioNotNullValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            if (answer is null)
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Handlers\ResetPagesToIncompleteHandlerTests.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.Handlers.ResetPagesToIncompleteHandlerTests.DataContext
protected QnaDataContext DataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiConfig.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiConfig.ClientSecret
public string ClientSecret { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_a_branching_condition_is_question_tag.GetSection
private ApplicationSection GetSection(Guid applicationId, Guid sectionId)
        {
            return DataContext.ApplicationSections.FirstOrDefault(sec => sec.ApplicationId == applicationId && sec.Id == sectionId);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Handlers\ResetPagesToIncompleteHandlerTests.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.Handlers.ResetPagesToIncompleteHandlerTests._applicationId
private Guid _applicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Startup.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Startup._hostingEnvironment
private readonly IHostingEnvironment _hostingEnvironment;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\ResetPageAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.ResetPageAnswersResponse.ResetPageAnswersResponse
public ResetPageAnswersResponse(bool hasPageAnswersBeenReset)
        {
            ValidationPassed = true;
            HasPageAnswersBeenReset = hasPageAnswersBeenReset;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Handlers\ResetPagesToIncompleteHandlerTests.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.Handlers.ResetPagesToIncompleteHandlerTests.SequenceNo
private const int SequenceNo = 1;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Startup.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Startup.Configuration
private IConfiguration Configuration { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\ResetPageAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.ResetPageAnswersResponse.ValidationErrors
public List<KeyValuePair<string, string>> ValidationErrors { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Handlers\ResetPagesToIncompleteHandlerTests.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.Handlers.ResetPagesToIncompleteHandlerTests.SectionNo
private const int SectionNo = 5;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Startup.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Startup.Startup
public Startup(IConfiguration configuration, IHostingEnvironment hostingEnvironment)
        {
            _hostingEnvironment = hostingEnvironment;
            Configuration = configuration;

            var config = new ConfigurationBuilder()
                .AddConfiguration(configuration)
                .AddAzureTableStorageConfiguration(
                    configuration["ConfigurationStorageConnectionString"],
                    configuration["ConfigNames"],
                    configuration["Environment"],
                    configuration["Version"]
                ).Build();

            Configuration = config;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\ResetPageAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.ResetPageAnswersResponse.ValidationPassed
public bool ValidationPassed { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Workflow.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Workflow.Id
public Guid Id { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\ResetPageAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.ResetPageAnswersResponse.HasPageAnswersBeenReset
public bool HasPageAnswersBeenReset { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileService.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileService.IndividualFile
private async Task<HandlerResponse<DownloadFile>> IndividualFile(string filename, CancellationToken cancellationToken, CloudBlobDirectory directory)
        {
            var blobStream = await GetFileStream(cancellationToken, directory, filename);

            return new HandlerResponse<DownloadFile>(new DownloadFile() { ContentType = blobStream.Item2, FileName = filename, Stream = blobStream.Item1 });
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Handlers\ResetPagesToIncompleteHandlerTests.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Handlers.ResetPagesToIncompleteHandlerTests.TestSetup
[SetUp]
        public void TestSetup()
        {
            _applicationId = Guid.NewGuid();
            DataContext = DataContextHelpers.GetInMemoryDataContext();
            _handler = new ResetPagesToIncompleteHandler(DataContext,
                                    Mock.Of<INotRequiredProcessor>(),
                                    Mock.Of<ITagProcessingService>(),
                                    Mock.Of<ILogger<ResetPagesToIncompleteHandler>>());
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\ResetPageAnswersResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.ResetPageAnswersResponse.ResetPageAnswersResponse
public ResetPageAnswersResponse(List<KeyValuePair<string, string>> validationErrors)
        {
            ValidationErrors = validationErrors;
            ValidationPassed = false;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\SubmitPageOfFilesTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.SubmitPageOfFilesTestBase._fileStorageConnectionString
private const string _fileStorageConnectionString = "UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://127.0.0.1";
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Handlers\ResetPagesToIncompleteHandlerTests.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Handlers.ResetPagesToIncompleteHandlerTests.Handle_OnSuccessfulUpdate_ResetsPagesToIncomplete
[Test]
        public async Task Handle_OnSuccessfulUpdate_ResetsPagesToIncomplete()
        {
            var pages = new List<Page>
            {
                new Page { PageId = "Page1", Complete = true },
                new Page { PageId = "Page2", Complete = true },
                new Page { PageId = "Page3", Complete=true },
                new Page { PageId = "Page4", Complete = true},
                new Page { PageId = "Page5", Complete = true}
            };
            var pagesToExclude = new List<string>
            {
                "Page1",
                "Page3",
                "Page5"
            };

            var applicationSection = new ApplicationSection
            {
                ApplicationId = _applicationId,
                SequenceNo = SequenceNo,
                SectionNo = SectionNo,
                QnAData = new QnAData { Pages = pages }
            };

            await DataContext.ApplicationSections.AddAsync(applicationSection);
            await DataContext.SaveChangesAsync();
            var request = new ResetPagesToIncompleteRequest(_applicationId, SequenceNo, SectionNo, pagesToExclude);

            var result = await _handler.Handle(request, new CancellationToken());

            var updatedPages = DataContext.ApplicationSections.First().QnAData.Pages;

            Assert.AreEqual(5, updatedPages.Count);

            foreach (var page in updatedPages)
            {
                if (pagesToExclude.Contains(page.PageId))
                {
                    Assert.IsTrue(page.Complete);
                }
                else
                {
                    Assert.IsFalse(page.Complete);
                }
            }

            Assert.IsTrue(result.Value);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Config\FileStorageConfig.cs
BlockTypes.METHOD, SFA.DAS.QnA.Configuration.Config.FileStorageConfig.ContainerName
public string ContainerName { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\StartApplicationRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.StartApplicationRequest.UserReference
public string UserReference { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\AddPageAnswer\AddPageAnswerHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.AddPageAnswer.AddPageAnswerHandler.AddPageAnswerHandler
public AddPageAnswerHandler(QnaDataContext dataContext, IAnswerValidator answerValidator) : base(dataContext)
        {
            _dataContext = dataContext;
            _answerValidator = answerValidator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Infrastructure\ApiExplorerGroupConvention.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Infrastructure.ApiExplorerGroupConvention.Apply
public void Apply(ControllerModel controller)
        {
            var controllerNamespace = controller.ControllerType.Namespace;
            if (controllerNamespace.Contains("Config"))
            {
                controller.ApiExplorer.GroupName = "config";
            }
            else
            {
                controller.ApiExplorer.GroupName = "v1";
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\StartApplicationRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.StartApplicationRequest.WorkflowType
public string WorkflowType { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\CanUpdatePage\CanUpdatePageBySectionNoHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sections.CanUpdatePage.CanUpdatePageBySectionNoHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\StartApplicationRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.StartApplicationRequest.ApplicationData
public string ApplicationData { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\CanUpdatePage\CanUpdatePageBySectionNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.CanUpdatePage.CanUpdatePageBySectionNoHandler.CanUpdatePageBySectionNoHandler
public CanUpdatePageBySectionNoHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowSequencesController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.Config.WorkflowSequencesController._mediator
private readonly IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\CanUpdatePage\CanUpdatePageBySectionNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.CanUpdatePage.CanUpdatePageBySectionNoHandler.Handle
public async Task<HandlerResponse<bool>> Handle(CanUpdatePageBySectionNoRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.ApplicationSections.FirstOrDefaultAsync(sec => sec.SectionNo == request.SectionNo && sec.SequenceNo == request.SequenceNo && sec.ApplicationId == request.ApplicationId, cancellationToken);
            if (section is null) return new HandlerResponse<bool>(false, "Section does not exist");

            var page = section.QnAData.Pages.FirstOrDefault(p => p.PageId == request.PageId);
            if (page is null) return new HandlerResponse<bool>(false, "Page does not exist");

            return new HandlerResponse<bool>(page.Active);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionBySectionNoRequest.SequenceNo
public int SequenceNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\ApplicationSnapshotController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.ApplicationSnapshotController._mediator
private readonly IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowSequencesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.WorkflowSequencesController.WorkflowSequencesController
public WorkflowSequencesController(IMediator mediator)
        {
            _mediator = mediator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionBySectionNoRequest.SectionNo
public int SectionNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\ApplicationSnapshotController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.ApplicationSnapshotController.ApplicationSnapshotController
public ApplicationSnapshotController(IMediator mediator)
        {
            _mediator = mediator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowSequencesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.WorkflowSequencesController.GetSequences
[HttpGet("{workflowId}/sequences")]
        public async Task<ActionResult<List<WorkflowSequence>>> GetSequences(Guid workflowId)
        {
            var getWorkflowSequencesResult = await _mediator.Send(new GetWorkflowSequencesRequest(workflowId));
            if (!getWorkflowSequencesResult.Success) return NotFound(new NotFoundError(getWorkflowSequencesResult.Message));

            return getWorkflowSequencesResult.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileService.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileService._fileStorageConfig
private readonly IOptions<FileStorageConfig> _fileStorageConfig;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileService.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileService._encryptionService
private readonly IEncryptionService _encryptionService;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionBySectionNoRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionBySectionNoRequest.GetSectionBySectionNoRequest
public GetSectionBySectionNoRequest(Guid applicationId, int sequenceNo, int sectionNo)
        {
            ApplicationId = applicationId;
            SequenceNo = sequenceNo;
            SectionNo = sectionNo;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowSequencesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.WorkflowSequencesController.GetSequence
[HttpGet("{workflowId}/sequences/{sequenceId}")]
        public async Task<ActionResult<WorkflowSequence>> GetSequence(Guid workflowId, Guid sequenceId)
        {
            var getWorkflowSequenceResult = await _mediator.Send(new GetWorkflowSequenceRequest(workflowId, sequenceId));
            if (!getWorkflowSequenceResult.Success) return NotFound(new NotFoundError(getWorkflowSequenceResult.Message));

            return getWorkflowSequenceResult.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\SystemTime.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.SystemTime.UtcNow
public static Func<DateTime> UtcNow = () => DateTime.UtcNow;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileService.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileService.DownloadFileService
internal DownloadFileService(IOptions<FileStorageConfig> fileStorageConfig, IEncryptionService encryptionService)
        {
            _fileStorageConfig = fileStorageConfig;
            _encryptionService = encryptionService;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileService.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileService.GetDownloadFile
internal async Task<HandlerResponse<DownloadFile>> GetDownloadFile(Guid applicationId, ApplicationSection section, string pageId, string questionId, string fileName, CancellationToken cancellationToken)
        {
            var page = section.QnAData.Pages.FirstOrDefault(p => p.PageId == pageId);

            if (page == null)
            {
                return new HandlerResponse<DownloadFile>(success: false, message: $"Page {pageId} in Application {applicationId} does not exist.");
            }

            if (page.Questions.All(q => q.Input.Type != "FileUpload"))
            {
                return new HandlerResponse<DownloadFile>(success: false, message: $"Page {pageId} in Application {applicationId} does not contain any File Upload questions.");
            }

            if (page.PageOfAnswers == null || !page.PageOfAnswers.Any())
            {
                return new HandlerResponse<DownloadFile>(success: false, message: $"Page {pageId} in Application {applicationId} does not contain any uploads.");
            }

            var container = await ContainerHelpers.GetContainer(_fileStorageConfig.Value.StorageConnectionString, _fileStorageConfig.Value.ContainerName);
            var questionDirectory = ContainerHelpers.GetDirectory(applicationId, section.SequenceId, section.Id, pageId, questionId, container);
            var pageDirectory = ContainerHelpers.GetDirectory(applicationId, section.SequenceId, section.Id, pageId, null, container);

            if ((questionId is null)) return await PageFiles(applicationId, pageId, cancellationToken, page, pageDirectory);

            if (!(fileName is null)) return await SpecifiedFile(applicationId, fileName, pageId, questionId, cancellationToken, page, questionDirectory);

            var blobs = questionDirectory.ListBlobs(useFlatBlobListing: true).ToList();
            if (blobs.Count() == 1)
            {
                var answer = page.PageOfAnswers.SelectMany(poa => poa.Answers).Single(a => a.QuestionId == questionId);
                return await IndividualFile(answer.Value, cancellationToken, questionDirectory);
            }

            if (!blobs.Any()) return new HandlerResponse<DownloadFile>(success: false, message: $"Page {pageId} in Application {applicationId} does not contain any uploads.");

            return await ZippedMultipleFiles(questionId, cancellationToken, page, questionDirectory);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Projects\UpsertProject\UpsertProjectHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Projects.UpsertProject.UpsertProjectHandler.Handle
public async Task<HandlerResponse<Project>> Handle(UpsertProjectRequest request, CancellationToken cancellationToken)
        {
            var existingProject = await _dataContext.Projects.SingleOrDefaultAsync(project => project.Id == request.ProjectId, cancellationToken: cancellationToken);
            if (existingProject == null)
            {
                await _dataContext.Projects.AddAsync(request.Project, cancellationToken);
            }
            else
            {
                existingProject.Name = request.Project.Name;
                existingProject.ApplicationDataSchema = request.Project.ApplicationDataSchema;
                existingProject.CreatedBy = request.Project.CreatedBy;
            }

            await _dataContext.SaveChangesAsync(cancellationToken);

            return new HandlerResponse<Project>(existingProject);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetPage\GetPageHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.Sections.GetPage.GetPageHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\WorkflowSequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.WorkflowSequence.Id
public Guid Id { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetPage\GetPageHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetPage.GetPageHandler.GetPageHandler
public GetPageHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\GetPageBySectionNoTests\GetPageBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.GetPageBySectionNoTests.GetPageBySectionNoTestBase.Handler
protected GetPageBySectionNoHandler Handler;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\CompleteFeedbackWithinSequence\CompleteFeedbackWithinSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.CompleteFeedbackWithinSequence.CompleteFeedbackWithinSequenceRequest.SequenceId
public Guid SequenceId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\UpsertFeedback\UpsertFeedbackRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.UpsertFeedback.UpsertFeedbackRequest.SectionId
public Guid SectionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetPage\GetPageHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetPage.GetPageHandler.Handle
public async Task<HandlerResponse<Page>> Handle(GetPageRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.ApplicationSections.AsNoTracking().FirstOrDefaultAsync(sec => sec.Id == request.SectionId && sec.ApplicationId == request.ApplicationId, cancellationToken);
            if (section is null) return new HandlerResponse<Page>(false, "Section does not exist");

            var page = section.QnAData.Pages.FirstOrDefault(p => p.PageId == request.PageId);
            if (page is null) return new HandlerResponse<Page>(false, "Page does not exist");

            return new HandlerResponse<Page>(page);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationDataControllerTests\WhenGettingApplicationData.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.ApplicationDataControllerTests.WhenGettingApplicationData.And_MediatorCallFails_ThenNotFoundResultReturned
[Test]
        public async Task And_MediatorCallFails_ThenNotFoundResultReturned()
        {
            var mediator = Substitute.For<IMediator>();
            var controller = new ApplicationDataController(mediator);
            mediator.Send(Arg.Any<GetApplicationDataRequest>()).Returns(new HandlerResponse<string>() { Success = false, Message = "Application does not exist." });

            var result = await controller.Get(Guid.NewGuid());

            result.Result.Should().BeOfType<NotFoundObjectResult>();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\CompleteFeedbackWithinSequence\CompleteFeedbackWithinSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.CompleteFeedbackWithinSequence.CompleteFeedbackWithinSequenceRequest.CompleteFeedbackWithinSequenceRequest
public CompleteFeedbackWithinSequenceRequest(Guid applicationId, Guid sequenceId)
        {
            ApplicationId = applicationId;
            SequenceId = sequenceId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\UpsertFeedback\UpsertFeedbackRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.UpsertFeedback.UpsertFeedbackRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\ApplicationDataControllerTests\WhenGettingApplicationData.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.ApplicationDataControllerTests.WhenGettingApplicationData.And_MediatorCallIsSuccessful_ThenOkObjectResultReturned
[Test]
        public async Task And_MediatorCallIsSuccessful_ThenOkObjectResultReturned()
        {
            var mediator = Substitute.For<IMediator>();
            var controller = new ApplicationDataController(mediator);
            var applicationData = @"{""OrganisationReferenceId"": ""c3333b62-a07c-415e-8778-84222231b0s1""}";
            mediator.Send(Arg.Any<GetApplicationDataRequest>()).Returns(new HandlerResponse<string>(applicationData));

            var result = await controller.Get(Guid.NewGuid());

            result.Result.Should().BeOfType<OkObjectResult>();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\FileControllerTests\When_upload_is_called.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.FileControllerTests.When_upload_is_called._logger
private ILogger<FileController> _logger;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\UpsertFeedback\UpsertFeedbackRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.UpsertFeedback.UpsertFeedbackRequest.Feedback
public Feedback Feedback { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\FinancialApplicationGrade.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.FinancialApplicationGrade.GradedBy
public string GradedBy { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\FileControllerTests\When_upload_is_called.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.FileControllerTests.When_upload_is_called._mediator
private IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\PageFeedback\UpsertFeedback\UpsertFeedbackRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.PageFeedback.UpsertFeedback.UpsertFeedbackRequest.UpsertFeedbackRequest
public UpsertFeedbackRequest(Guid applicationId, Guid sectionId, string pageId, Feedback feedback)
        {
            ApplicationId = applicationId;
            SectionId = sectionId;
            PageId = pageId;
            Feedback = feedback;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\FinancialApplicationGrade.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.FinancialApplicationGrade.GradedDateTime
public DateTime GradedDateTime { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\FileControllerTests\When_upload_is_called.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.UnitTests.FileControllerTests.When_upload_is_called._fileController
private FileController _fileController;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\AddressPostcodeRequiredValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.AddressPostcodeRequiredValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\FinancialApplicationGrade.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.FinancialApplicationGrade.FinancialDueDate
public DateTime? FinancialDueDate { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\FileControllerTests\When_upload_is_called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.FileControllerTests.When_upload_is_called.SetUp
[SetUp]
        public void SetUp()
        {
            _logger = Substitute.For<ILogger<FileController>>();
            _mediator = Substitute.For<IMediator>();
            _fileController = new FileController(_logger, _mediator)
            {
                ControllerContext = new ControllerContext()
                {
                    HttpContext = new DefaultHttpContext()
                }
            };
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\AddressPostcodeRequiredValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.AddressPostcodeRequiredValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text))
            {
                var validateErrors = ValidateProperty(question.QuestionId, text, "Postcode", ValidationDefinition.ErrorMessage);

                if (validateErrors.Count > 0)
                {
                    errors.AddRange(validateErrors);
                }
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\FileControllerTests\When_upload_is_called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.FileControllerTests.When_upload_is_called.Then_bad_request_returned_if_fails_to_upload
[Test]
        public async Task Then_bad_request_returned_if_fails_to_upload()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            var pageId = "pageId";
            var failMessage = "failed";

            _mediator.Send(Arg.Any<SubmitPageOfFilesRequest>()).Returns(new HandlerResponse<SetPageAnswersResponse>(false, failMessage));

            var result = await _fileController.Upload(applicationId, sectionId, pageId);

            result.Result.Should().BeOfType<BadRequestObjectResult>();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DownloadFile\DownloadFileService.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DownloadFile.DownloadFileService.PageFiles
private async Task<HandlerResponse<DownloadFile>> PageFiles(Guid applicationId, string pageId, CancellationToken cancellationToken, Page page, CloudBlobDirectory pageDirectory)
        {
            // Get All answers on the page./
            // Loop them.
            // for each question...
            //     get the blobdirectory for that question
            //     download any files from that directory
            //     add to the zip
            using (var zipStream = new MemoryStream())
            {
                using (var zipArchive = new ZipArchive(zipStream, ZipArchiveMode.Create, true))
                {
                    foreach (var answer in page.PageOfAnswers.SelectMany(poa => poa.Answers))
                    {
                        var questionDirectory = pageDirectory.GetDirectoryReference(answer.QuestionId.ToLower());
                        var blobStream = await GetFileStream(cancellationToken, questionDirectory, answer.Value);

                        var zipEntry = zipArchive.CreateEntry(answer.Value);
                        using (var entryStream = zipEntry.Open())
                        {
                            blobStream.Item1.CopyTo(entryStream);
                        }
                    }
                }

                zipStream.Position = 0;
                var newStream = new MemoryStream();
                zipStream.CopyTo(newStream);
                newStream.Position = 0;
                return new HandlerResponse<DownloadFile>(new DownloadFile() { ContentType = "application/zip", FileName = $"{applicationId}_{pageId}_uploads.zip", Stream = newStream });
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_a_branching_condition_is_question_tag.Then_all_pages_are_set_to_active_if_the_condition_passes_and_answer_matches
[Test]
#if (!DEBUG)
        [Ignore("Must be tested on local DEV machine as it uses local Azure storage")]
#endif
        public async Task Then_all_pages_are_set_to_active_if_the_condition_passes_and_answer_matches()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId, "Yes", "Yes");

            var response = await Handler.Handle(new SubmitPageOfFilesRequest(applicationId, sectionId, "100", new FormFileCollection
            {
                GenerateFile("This is a dummy file", "Q1", "Yes")
            }), CancellationToken.None);

            var section = GetSection(applicationId, sectionId);
            section.QnAData.Pages.TrueForAll(p => p.Active).Should().BeTrue();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\Page\Answer.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.Page.Answer.Value
public string Value { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Handlers\ResetPagesToIncompleteHandlerTests.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Handlers.ResetPagesToIncompleteHandlerTests.Handle_NoMatchingPageIds_ResetsAllPagesToIncomplete
[Test]
        public async Task Handle_NoMatchingPageIds_ResetsAllPagesToIncomplete()
        {
            var pages = new List<Page>
            {
                new Page { PageId = "Page1", Complete = true },
                new Page { PageId = "Page2", Complete = true },
                new Page { PageId = "Page3", Complete=true },
                new Page { PageId = "Page4", Complete = true},
                new Page { PageId = "Page5", Complete = true}
            };
            var pagesToExclude = new List<string>
            {
                "Page7",
                "Page8",
                "Page9"
            };

            var applicationSection = new ApplicationSection
            {
                ApplicationId = _applicationId,
                SequenceNo = SequenceNo,
                SectionNo = SectionNo,
                QnAData = new QnAData { Pages = pages }
            };

            await DataContext.ApplicationSections.AddAsync(applicationSection);
            await DataContext.SaveChangesAsync();
            var request = new ResetPagesToIncompleteRequest(_applicationId, SequenceNo, SectionNo, pagesToExclude);

            var result = await _handler.Handle(request, new CancellationToken());

            var updatedPages = DataContext.ApplicationSections.First().QnAData.Pages;

            Assert.AreEqual(5, updatedPages.Count);

            foreach (var page in updatedPages)
            {
                Assert.IsFalse(page.Complete);
            }

            Assert.IsTrue(result.Value);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\SequencesControllerTests\GetSequences\When_GetSequences_is_called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.SequencesControllerTests.GetSequences.When_GetSequences_is_called.Then_a_list_of_sequences_is_returned
[Test]
        public async Task Then_a_list_of_sequences_is_returned()
        {
            var mediator = Substitute.For<IMediator>();
            var applicationId = Guid.NewGuid();

            mediator.Send(Arg.Any<GetSequencesRequest>(), Arg.Any<CancellationToken>())
                .Returns(new HandlerResponse<List<Sequence>>
                {
                    Value = new List<Sequence>
                    {
                        new Sequence(),
                        new Sequence()
                    }
                });

            var controller = new SequencesController(mediator);

            var result = await controller.GetSequences(applicationId);

            result.Value.Should().BeOfType<List<Sequence>>();
            result.Value.Count.Should().Be(2);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\NumberTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.NumberTypeValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\ApplicationSnapshotController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.ApplicationSnapshotController.CreateSnapshot
[HttpPost("{applicationId}/snapshot")]
        [ProducesResponseType((int)HttpStatusCode.Created)]
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        public async Task<ActionResult<CreateSnapshotResponse>> CreateSnapshot(Guid applicationId)
        {
            var newSnapshot = await _mediator.Send(new CreateSnapshotRequest(applicationId));

            if (!newSnapshot.Success) return NotFound(new NotFoundError(newSnapshot.Message));

            return newSnapshot.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetSectionAnswers\ResetSectionAnswersRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetSectionAnswersRequest.SequenceNo
public int SequenceNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_a_branching_condition_is_question_tag.Then_the_condition_does_not_pass_if_answer_is_not_blank_when_must_equal_blank
[Test]
        public async Task Then_the_condition_does_not_pass_if_answer_is_not_blank_when_must_equal_blank()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId, "Yes", "");

            var response = await Handler.Handle(new SetPageAnswersRequest(applicationId, sectionId, "100", new List<Answer>
            {
                new Answer() {QuestionId = "Q1", Value = "Yes"}
            }), CancellationToken.None);

            response.Value.NextActionId.Should().Be("102");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowSequencesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.WorkflowSequencesController.UpsertWorkflowSequence
[HttpPut("{workflowId}/sequences/{sequenceId}")]
        public async Task<ActionResult<WorkflowSequence>> UpsertWorkflowSequence(Guid workflowId, Guid sequenceId, [FromBody] WorkflowSequence sequence)
        {
            var upsertWorkflowSequenceResponse = await _mediator.Send(new UpsertWorkflowSequenceRequest(workflowId, sequenceId, sequence));
            if (!upsertWorkflowSequenceResponse.Success) return BadRequest(new BadRequestError(upsertWorkflowSequenceResponse.Message));

            return upsertWorkflowSequenceResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetSectionAnswers\ResetSectionAnswersRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetSectionAnswersRequest.SectionNo
public int SectionNo { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\StartApplication\StartApplicationHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.StartApplication.StartApplicationHandler.CopyWorkflows
private async Task CopyWorkflows(CancellationToken cancellationToken, Data.Entities.Application newApplication)
        {

            var workflowSequences = await _dataContext.WorkflowSequences.AsNoTracking()
                .Where(seq => seq.WorkflowId == newApplication.WorkflowId).ToListAsync(cancellationToken);

            var groupedSequences = workflowSequences.GroupBy(seq => new { seq.SequenceNo, seq.IsActive }).ToList();

            var newApplicationSequences = groupedSequences.Select(seq => new ApplicationSequence
            {
                ApplicationId = newApplication.Id,
                SequenceNo = seq.Key.SequenceNo,
                IsActive = seq.Key.IsActive
            }).ToList();

            await _dataContext.ApplicationSequences.AddRangeAsync(newApplicationSequences, cancellationToken);
            _logger.LogInformation($"Created ApplicationSequence entities for Application: {newApplication.Id}");

            var sectionIds = groupedSequences.SelectMany(seq => seq).Select(seq => seq.SectionId).ToList();

            var workflowSections = await _dataContext.WorkflowSections.AsNoTracking()
                .Where(sec => sectionIds.Contains(sec.Id)).ToListAsync(cancellationToken: cancellationToken);

            var newApplicationSections = new List<ApplicationSection>();
            foreach (var sequence in groupedSequences)
            {
                var applicationSequence = newApplicationSequences.Single(appSeq => appSeq.SequenceNo == sequence.Key.SequenceNo);

                foreach (var sectionDetails in sequence)
                {
                    var workflowSection = workflowSections.Single(wSec => wSec.Id == sectionDetails.SectionId);

                    var newSection = new ApplicationSection
                    {
                        Id = Guid.NewGuid(),
                        SequenceId = applicationSequence.Id,
                        Title = workflowSection.Title,
                        LinkTitle = workflowSection.LinkTitle,
                        ApplicationId = newApplication.Id,
                        DisplayType = workflowSection.DisplayType,
                        QnAData = workflowSection.QnAData,
                        SectionNo = sectionDetails.SectionNo,
                        SequenceNo = sectionDetails.SequenceNo
                    };

                    foreach (var page in newSection.QnAData.Pages)
                    {
                        page.SectionId = newSection.Id;
                        page.SequenceId = newSection.SequenceId;
                    }

                    newApplicationSections.Add(newSection);
                }
            }

            await _dataContext.ApplicationSections.AddRangeAsync(newApplicationSections, cancellationToken);
            _logger.LogInformation($"Created ApplicationSection entities for Application: {newApplication.Id}");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\ResetSectionAnswers\ResetSectionAnswersRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.ResetPageAnswers.ResetSectionAnswersRequest.ResetSectionAnswersRequest
public ResetSectionAnswersRequest(Guid applicationId, int sequenceNo, int sectionNo)
        {
            ApplicationId = applicationId;
            SequenceNo = sequenceNo;
            SectionNo = sectionNo;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\Files\DeleteFile\DeleteFileRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.Files.DeleteFile.DeleteFileRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequence\GetSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetSequence.GetSequenceRequest.SequenceId
public Guid SequenceId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sequences\GetSequence\GetSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sequences.GetSequence.GetSequenceRequest.GetSequenceRequest
public GetSequenceRequest(Guid applicationId, Guid sequenceId)
        {
            ApplicationId = applicationId;
            SequenceId = sequenceId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\SubmitPageOfFilesTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.SubmitPageOfFilesTestBase._fileStorageContainerName
private string _fileStorageContainerName = Guid.NewGuid().ToString();
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SkipPage\SkipPageBySectionNoRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SkipPage.SkipPageBySectionNoRequest.ApplicationId
public Guid ApplicationId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\SubmitPageOfFilesTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.SubmitPageOfFilesTestBase.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\SubmitPageOfFilesTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.SubmitPageOfFilesTestBase.SectionId
protected Guid SectionId;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetPageAnswersHandlerBySectionNo.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetPageAnswersBySectionNoHandler.SetPageAnswersBySectionNoHandler
public SetPageAnswersBySectionNoHandler(QnaDataContext dataContext, IAnswerValidator answerValidator, INotRequiredProcessor notRequiredProcessor, ITagProcessingService tagProcessingService) : base(dataContext, notRequiredProcessor, tagProcessingService, answerValidator)
        {
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\SubmitPageOfFilesTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.SubmitPageOfFilesTestBase.Handler
protected SubmitPageOfFilesHandler Handler;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SetPageAnswers\SetPageAnswersHandlerBySectionNo.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SetPageAnswers.SetPageAnswersBySectionNoHandler.Handle
public async Task<HandlerResponse<SetPageAnswersResponse>> Handle(SetPageAnswersBySectionNoRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.ApplicationSections.SingleOrDefaultAsync(sec => sec.SequenceNo == request.SequenceNo && sec.SectionNo == request.SectionNo && sec.ApplicationId == request.ApplicationId, cancellationToken);
            var validationErrorResponse = ValidateSetPageAnswersRequest(request.PageId, request.Answers, section);

            if (validationErrorResponse != null)
            {
                return validationErrorResponse;
            }

            SaveAnswersIntoPage(section, request.PageId, request.Answers);

            var application = await _dataContext.Applications.SingleOrDefaultAsync(app => app.Id == request.ApplicationId, cancellationToken);
            UpdateApplicationData(request.PageId, request.Answers, section, application);

            var nextAction = GetNextActionForPage(section, application, request.PageId);
            var checkboxListAllNexts = GetCheckboxListMatchingNextActionsForPage(section, application, request.PageId);

            SetStatusOfNextPagesBasedOnDeemedNextActions(section, request.PageId, nextAction, checkboxListAllNexts);

            await _dataContext.SaveChangesAsync(cancellationToken);

            return new HandlerResponse<SetPageAnswersResponse>(new SetPageAnswersResponse(nextAction.Action, nextAction.ReturnId));
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\SubmitPageOfFilesTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.SubmitPageOfFilesTestBase.DataContext
protected QnaDataContext DataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SkipPage\SkipPageRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SkipPage.SkipPageRequest.SectionId
public Guid SectionId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\SubmitPageOfFilesTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.SubmitPageOfFilesTestBase.NotRequiredProcessor
protected NotRequiredProcessor NotRequiredProcessor;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_page_contains_mixture_of_question_types.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_page_contains_mixture_of_question_types.Then_validation_error_occurs
[Test]
        public async Task Then_validation_error_occurs()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId);

            var response = await Handler.Handle(new SubmitPageOfFilesRequest(applicationId, sectionId, "1", new FormFileCollection
            {
                GenerateFile("This is a dummy file", "Q1", "File.txt")
            }), CancellationToken.None);

            response.Success.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\SequencesControllerTests\GetSequences\When_GetSequences_called_for_application_with_no_sequences.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.SequencesControllerTests.GetSequences.When_GetSequences_called_for_application_with_no_sequences.Then_NoContent_returned
[Test]
        public async Task Then_NoContent_returned()
        {
            var mediator = Substitute.For<IMediator>();

            mediator.Send(Arg.Any<GetSequencesRequest>(), Arg.Any<CancellationToken>())
                .Returns(new HandlerResponse<List<Sequence>> { Success = true, Value = new List<Sequence>() });

            var controller = new SequencesController(mediator);

            var result = await controller.GetSequences(Guid.NewGuid());

            result.Result.Should().BeOfType<NoContentResult>();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SkipPage\SkipPageRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SkipPage.SkipPageRequest.PageId
public string PageId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\SubmitPageOfFilesTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.SubmitPageOfFilesTestBase.TagProcessingService
protected TagProcessingService TagProcessingService;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\SkipPage\SkipPageRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.SkipPage.SkipPageRequest.SkipPageRequest
public SkipPageRequest(Guid applicationId, Guid sectionId, string pageId)
        {
            ApplicationId = applicationId;
            SectionId = sectionId;
            PageId = pageId;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\SubmitPageOfFilesTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.SubmitPageOfFilesTestBase.SetUp
[SetUp]
        public async Task SetUp()
        {
            DataContext = DataContextHelpers.GetInMemoryDataContext();
            NotRequiredProcessor = new NotRequiredProcessor();
            TagProcessingService = new TagProcessingService(DataContext);
            var fileStorageConfig = GetFileStorageConfig();

            var encryptionService = Substitute.For<IEncryptionService>();
            encryptionService.Encrypt(Arg.Any<Stream>()).Returns(callinfo => callinfo.ArgAt<Stream>(0)); // Don't Encrypt stream
            encryptionService.Decrypt(Arg.Any<Stream>()).Returns(callinfo => callinfo.ArgAt<Stream>(0)); // Don't Decrypt stream

            var validator = Substitute.For<IAnswerValidator>();
            validator.Validate(Arg.Any<List<Answer>>(), Arg.Any<Page>()).Returns(new List<KeyValuePair<string, string>>());

            var fileContentValidator = Substitute.For<IFileContentValidator>();
            fileContentValidator.Validate(Arg.Any<IFormFileCollection>()).Returns(new List<KeyValuePair<string, string>>());

            Handler = new SubmitPageOfFilesHandler(DataContext, fileStorageConfig, encryptionService, validator, fileContentValidator, NotRequiredProcessor, TagProcessingService);

            ApplicationId = Guid.NewGuid();
            SectionId = Guid.NewGuid();
            await DataContext.ApplicationSections.AddAsync(new ApplicationSection()
            {
                ApplicationId = ApplicationId,
                Id = SectionId,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page()
                        {
                            PageId = "1",
                            Questions = new List<Question>{new Question(){QuestionId = "Q1", Input = new Input { Type = "FileUpload" } }},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>{ new Next { } },
                            Active = true
                        }
                    }
                }
            });

            await DataContext.Applications.AddAsync(new Data.Entities.Application() { Id = ApplicationId, ApplicationData = "{}" });

            await DataContext.SaveChangesAsync();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\SubmitPageOfFilesTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.SubmitPageOfFilesTestBase.GetFileStorageConfig
private IOptions<FileStorageConfig> GetFileStorageConfig()
        {
            return Options.Create(new FileStorageConfig { ContainerName = _fileStorageContainerName, StorageConnectionString = _fileStorageConnectionString });
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_page_contains_mixture_of_question_types.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_page_contains_mixture_of_question_types.SetupQuestionData
private async Task SetupQuestionData(Guid applicationId, Guid sectionId)
        {
            await DataContext.ApplicationSections.AddAsync(new ApplicationSection()
            {
                ApplicationId = applicationId,
                Id = sectionId,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page()
                        {
                            PageId = "1",
                            Questions = new List<Question>
                            {
                                new Question { QuestionId = "Q1", Input = new Input { Type = "FileUpload" }},
                                new Question { QuestionId = "Q2", Input = new Input { Type = "TextArea" }}
                            },
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>(),
                            Active = true
                        }
                    }
                }
            });

            await DataContext.Applications.AddAsync(new Data.Entities.Application() { Id = applicationId, ApplicationData = "{}" });

            await DataContext.SaveChangesAsync();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\WorkflowSection.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.WorkflowSection.Id
public Guid Id { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\AddressBuildingAndStreetRequiredValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.AddressBuildingAndStreetRequiredValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (!string.IsNullOrEmpty(text))
            {
                var validateErrors = ValidateProperty(question.QuestionId, text, "AddressLine1", ValidationDefinition.ErrorMessage);

                if (validateErrors.Count > 0)
                {
                    errors.AddRange(validateErrors);
                }
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\AddressRequiredValidatorBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.AddressRequiredValidatorBase.ValidateProperty
protected List<KeyValuePair<string, string>> ValidateProperty(string questionId, string answer, string property, string errorMessage)
        {
            var errorMessages = new List<KeyValuePair<string, string>>();

            try
            {
                var addressObject = JObject.Parse(answer);

                if (addressObject.TryGetValue(property, out var propertyValue))
                {
                    if (string.IsNullOrWhiteSpace(propertyValue.Value<string>()))
                    {
                        errorMessages.Add(new KeyValuePair<string, string>(questionId, errorMessage));
                        return errorMessages;
                    }
                }
                else
                {
                    errorMessages.Add(new KeyValuePair<string, string>(questionId, errorMessage));
                }
            }
            catch (System.Text.Json.JsonException)
            {
                errorMessages.Add(new KeyValuePair<string, string>(questionId, "Address data is not JSON"));

            }

            return errorMessages;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Client\QnaApiClientExtensions.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Client.QnaApiClientExtensions.AddQnaApiClient
public static void AddQnaApiClient(this IServiceCollection services, QnaApiConfig config, bool disableBearerHeader = false)
        {
            config.DisableBearerHeader = disableBearerHeader;
            services.AddTransient<QnaApiConfig>(provider => config);
            services.AddHttpClient<QnaApiClient>(client => client.BaseAddress = config.BaseUri);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.UnitTests\FileControllerTests\When_upload_is_called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.UnitTests.FileControllerTests.When_upload_is_called.Then_success_returned_if_uploaded_successfully
[Test]
        public async Task Then_success_returned_if_uploaded_successfully()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            var pageId = "pageId";
            var nextAction = "nextAction";
            var nextActionId = "nextActionId";

            var response = new SetPageAnswersResponse(nextAction, nextActionId);

            _mediator.Send(Arg.Any<SubmitPageOfFilesRequest>()).Returns(new HandlerResponse<SetPageAnswersResponse>(response));

            _fileController.HttpContext.Request.Form = new FormCollection(new Dictionary<string, StringValues>());
            var result = await _fileController.Upload(applicationId, sectionId, pageId);

            result.Value.Should().BeOfType<SetPageAnswersResponse>();
            result.Value.ValidationPassed.Should().BeTrue();
            result.Value.NextAction.Should().Be(nextAction);
            result.Value.NextActionId.Should().Be(nextActionId);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSections\UpsertWorkflowSection\UpsertWorkflowSectionRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSections.UpsertWorkflowSection.UpsertWorkflowSectionRequest.ProjectId
public Guid ProjectId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\AddPageAnswerResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.AddPageAnswerResponse.Page
public Page.Page Page { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSections\CreateWorkflowSection\CreateWorkflowSectionHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Commands.WorkflowSections.CreateWorkflowSection.CreateWorkflowSectionHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\AddPageAnswerResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.AddPageAnswerResponse.ValidationErrors
public List<KeyValuePair<string, string>> ValidationErrors { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSections\CreateWorkflowSection\CreateWorkflowSectionHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSections.CreateWorkflowSection.CreateWorkflowSectionHandler.CreateWorkflowSectionHandler
public CreateWorkflowSectionHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\AzureTableStorageConfigurationProvider.cs
BlockTypes.METHOD, SFA.DAS.QnA.Configuration.Infrastructure.AzureTableStorageConfigurationProvider.Load
public override void Load()
        {
            if (_environment.Equals("DEV", StringComparison.CurrentCultureIgnoreCase))
            {
                return;
            }

            var table = GetTable();
            var operation = GetOperation(_appName, _environment, _version);

            var result = table.ExecuteAsync(operation).Result;

            var configItem = (ConfigurationItem)result.Result;

            var jsonObject = JObject.Parse(configItem.Data);

            foreach (var child in jsonObject.Children())
            {
                foreach (var jToken in child.Children().Children())
                {
                    var child1 = (JProperty)jToken;
                    Data.Add($"{child.Path}:{child1.Name}", child1.Value.ToString());
                }
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\AddPageAnswerResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.AddPageAnswerResponse.AddPageAnswerResponse
public AddPageAnswerResponse(List<KeyValuePair<string, string>> validationErrors)
        {
            ValidationErrors = validationErrors;
            Success = false;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSections\CreateWorkflowSection\CreateWorkflowSectionHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSections.CreateWorkflowSection.CreateWorkflowSectionHandler.Handle
public async Task<HandlerResponse<WorkflowSection>> Handle(CreateWorkflowSectionRequest request, CancellationToken cancellationToken)
        {
            await _dataContext.WorkflowSections.AddAsync(request.Section, cancellationToken);
            await _dataContext.SaveChangesAsync(cancellationToken);
            return new HandlerResponse<WorkflowSection>(request.Section);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\AddPageAnswerResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.AddPageAnswerResponse.AddPageAnswerResponse
public AddPageAnswerResponse(Page.Page page)
        {
            Page = page;
            Success = true;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\ApplicationDataValidatorTests\When_valid_applicationData_has_extra_properties.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.ApplicationDataValidatorTests.When_valid_applicationData_has_extra_properties.Then_returns_false
[Test]
        public void Then_returns_false()
        {
            var validator = new ApplicationDataValidator();

            var schema = @"{   '$schema': 'http://json-schema.org/draft-04/schema#',   'definitions': {},   'id': 'http://example.com/example.json',   'properties': {     'TradingName': {       'anyOf': [             {'type':'string'},             {'type':'null'}         ]     },     'UseTradingName': {       'minLength': 1,       'type': 'boolean'     },     'ContactGivenName': {       'anyOf': [             {'type':'string'},             {'type':'null'}         ]     },     'ReferenceNumber': {        'anyOf': [             {'type':'string'},             {'type':'null'}         ]     },     'StandardCode': {       'anyOf': [             {'type':'string'},             {'type':'null'}         ]     },      'StandardName': {       'anyOf': [             {'type':'string'},             {'type':'null'}         ]     },     'OrganisationReferenceId': {       'minLength': 1,       'type': 'string'     },     'OrganisationName': {       'minLength': 1,       'type': 'string'     }   },   'additionalProperties': false,   'required': [     'OrganisationReferenceId',     'OrganisationName'   ],   'type': 'object'  }";

            var result = validator.IsValid(schema, "{'OrganisationReferenceId':'123', 'OrganisationName':'Org1', 'AnExtraProperty':'abc'}");

            result.Should().BeFalse();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_a_branching_condition_is_question_tag.SetupQuestionData
private async Task SetupQuestionData(Guid applicationId, Guid sectionId, string questionValue, string conditionValue, string containsValue = "")
        {

            await DataContext.ApplicationSections.AddAsync(new ApplicationSection()
            {
                ApplicationId = applicationId,
                Id = sectionId,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page()
                        {
                            PageId = "100",
                            Questions = new List<Question>{new Question(){QuestionId = "Q1", QuestionTag = "TagName", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "101", Conditions = new List<Condition>(){  new Condition{QuestionTag = "TagName", MustEqual = conditionValue } }},
                                new Next(){Action = "NextPage", ReturnId = "103", Conditions = new List<Condition>(){  new Condition{QuestionTag = "TagName", Contains = containsValue }}},
                                new Next(){Action = "NextPage", ReturnId = "102", Conditions = new List<Condition>()}
                            },
                            Active = true
                        },
                        new Page()
                        {
                            PageId = "101",
                            Questions = new List<Question>{new Question(){QuestionId = "Q2", QuestionTag = "TagName2", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>
                            {
                                new Next(){Action = "NextPage", ReturnId = "102", Conditions = new List<Condition>()}
                            },
                            Active = false,
                            ActivatedByPageId = "100"
                        },
                        new Page()
                        {
                            PageId = "102",
                            Questions = new List<Question>{new Question(){QuestionId = "Q3", QuestionTag = "TagName3", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>(){
                                new Next(){Action = "NextPage", ReturnId = "103", Conditions = new List<Condition>()}
                            },
                            Active = false,
                            ActivatedByPageId = "100"
                        },
                        new Page()
                        {
                            PageId = "103",
                            Questions = new List<Question>{new Question(){QuestionId = "Q4", QuestionTag = "TagName103", Input = new Input()}},
                            PageOfAnswers = new List<PageOfAnswers>(),
                            Next = new List<Next>(),
                            Active = false,
                            ActivatedByPageId = "100"
                        }
                    }
                }
            });

            var json = "{ \"TagName\" : \"" + questionValue + "\"}";

            await DataContext.Applications.AddAsync(new Data.Entities.Application() { Id = applicationId, ApplicationData = json });

            await DataContext.SaveChangesAsync();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\Validators\ComplexRadioTypeValidatorTests\When_Validate_Called.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.Validators.ComplexRadioTypeValidatorTests.When_Validate_Called.Then_correct_errors_are_returned
[TestCase("", true)]
        [TestCase("yes", true)]
        [TestCase("no", true)]
        [TestCase("invalid option", false)]
        public void Then_correct_errors_are_returned(string input, bool isValid)
        {
            var validator = new ComplexRadioTypeValidator
            {
                ValidationDefinition = new ValidationDefinition()
                {
                    ErrorMessage = "Answer must be one of the Input Options",
                    Name = "ComplexRadio"
                }
            };

            var options = new List<Option> { new Option { Value = "yes" }, new Option { Value = "no" } };
            var question = new Question { QuestionId = "Q1", Input = new Input { Options = options } };
            var errors = validator.Validate(question, new Answer { Value = input, QuestionId = question.QuestionId });

            (errors.Count is 0).Should().Be(isValid);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationStatus.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Data.Entities.ApplicationStatus.InProgress
public const string InProgress = "In Progress";
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\MaxLengthValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.MaxLengthValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSequences\CreateWorkflowSequence\CreateWorkflowSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSequences.CreateWorkflowSequence.CreateWorkflowSequenceRequest.Sequence
public WorkflowSequence Sequence { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\AzureTableStorageConfigurationProvider.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Configuration.Infrastructure.AzureTableStorageConfigurationProvider._environment
private readonly string _environment;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Commands\WorkflowSequences\CreateWorkflowSequence\CreateWorkflowSequenceRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Commands.WorkflowSequences.CreateWorkflowSequence.CreateWorkflowSequenceRequest.CreateWorkflowSequenceRequest
public CreateWorkflowSequenceRequest(Guid workflowId, WorkflowSequence sequence)
        {
            WorkflowId = workflowId;
            Sequence = sequence;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\AzureTableStorageConfigurationProvider.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Configuration.Infrastructure.AzureTableStorageConfigurationProvider._version
private readonly string _version;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageBySectionNoTests\CanUpdatePageBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdatePageBySectionNoTests.CanUpdatePageBySectionNoTestBase.Handler
protected CanUpdatePageBySectionNoHandler Handler;
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\AzureTableStorageConfigurationProvider.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Configuration.Infrastructure.AzureTableStorageConfigurationProvider._appName
private readonly string _appName;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\RequiredValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.RequiredValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageBySectionNoTests\CanUpdatePageBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdatePageBySectionNoTests.CanUpdatePageBySectionNoTestBase.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\FileTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.FileTypeValidator.ValidationDefinition
public ValidationDefinition ValidationDefinition { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\RequiredValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.RequiredValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            if (text == null || question.Input.GetEmptyAnswerValues().Contains(text))
            {
                errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageBySectionNoTests\CanUpdatePageBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdatePageBySectionNoTests.CanUpdatePageBySectionNoTestBase.SequenceNo
protected int SequenceNo;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\WorkflowSequencesController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.WorkflowSequencesController.CreateWorkflowSequence
[HttpPost("{workflowId}/sequences")]
        public async Task<ActionResult<WorkflowSequence>> CreateWorkflowSequence(Guid workflowId, [FromBody] WorkflowSequence sequence)
        {
            var createWorkflowSequenceResponse = await _mediator.Send(new CreateWorkflowSequenceRequest(workflowId, sequence));
            if (!createWorkflowSequenceResponse.Success) return BadRequest(new BadRequestError(createWorkflowSequenceResponse.Message));

            return createWorkflowSequenceResponse.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api.Types\AddPageAnswerResponse.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Types.AddPageAnswerResponse.Success
public bool Success { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSection\GetSectionBySectionNoHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSection.GetSectionBySectionNoHandler.RemoveInactivePages
private static void RemoveInactivePages(ApplicationSection section)
        {
            section.QnAData.Pages.RemoveAll(p => !p.Active);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\Sections\GetSequenceSections\GetSequenceSectionsRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.Sections.GetSequenceSections.GetSequenceSectionsRequest.ApplicationId
public Guid ApplicationId { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\FileTypeValidator.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.FileTypeValidator.Validate
public List<KeyValuePair<string, string>> Validate(Question question, Answer answer)
        {
            var errors = new List<KeyValuePair<string, string>>();

            var text = answer?.Value?.Trim();

            var allowedExtension = ValidationDefinition.Value?.ToString().Split(",", StringSplitOptions.RemoveEmptyEntries)[0];

            if (!string.IsNullOrEmpty(text) && !string.IsNullOrEmpty(allowedExtension))
            {
                var fileNameParts = text.Split(".", StringSplitOptions.RemoveEmptyEntries);
                var fileNameExtension = fileNameParts[fileNameParts.Length - 1];

                if (!fileNameExtension.Equals(allowedExtension, StringComparison.OrdinalIgnoreCase))
                {
                    errors.Add(new KeyValuePair<string, string>(question.QuestionId, ValidationDefinition.ErrorMessage));
                }
            }

            return errors;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageBySectionNoTests\CanUpdatePageBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdatePageBySectionNoTests.CanUpdatePageBySectionNoTestBase.SectionNo
protected int SectionNo;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageBySectionNoTests\CanUpdatePageBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdatePageBySectionNoTests.CanUpdatePageBySectionNoTestBase.ActivePageId
protected string ActivePageId;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageBySectionNoTests\CanUpdatePageBySectionNoTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdatePageBySectionNoTests.CanUpdatePageBySectionNoTestBase.InactivePageId
protected string InactivePageId;
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\WorkflowStatus.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Data.Entities.WorkflowStatus.Live
public const string Live = "Live";
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\QueriesTests\CanUpdatePageBySectionNoTests\CanUpdatePageBySectionNoTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.QueriesTests.CanUpdatePageBySectionNoTests.CanUpdatePageBySectionNoTestBase.SetUp
[SetUp]
        public async Task SetUp()
        {
            ApplicationId = Guid.NewGuid();
            SequenceNo = 1;
            SectionNo = 1;
            ActivePageId = Guid.NewGuid().ToString();
            InactivePageId = Guid.NewGuid().ToString();

            var dataContext = DataContextHelpers.GetInMemoryDataContext();

            dataContext.Applications.Add(new Data.Entities.Application()
            {
                Id = ApplicationId,
            });

            dataContext.ApplicationSections.Add(new ApplicationSection()
            {
                SectionNo = SectionNo,
                SequenceNo = SequenceNo,
                ApplicationId = ApplicationId,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page { PageId = ActivePageId, Active = true },
                        new Page { PageId = InactivePageId, Active = false },
                    }
                }
            });

            dataContext.SaveChanges();

            Handler = new CanUpdatePageBySectionNoHandler(dataContext);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSections\GetWorkflowSections\GetWorkflowSectionsRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSections.GetWorkflowSections.GetWorkflowSectionsRequest.ProjectId
public Guid ProjectId { get; }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase._fileStorageConnectionString
private const string _fileStorageConnectionString = "UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://127.0.0.1";
--------------------------------------------------
src\SFA.DAS.QnA.Configuration\Infrastructure\AzureTableStorageConfigurationProvider.cs
BlockTypes.METHOD, SFA.DAS.QnA.Configuration.Infrastructure.AzureTableStorageConfigurationProvider.GetTable
private CloudTable GetTable()
        {
            var storageAccount = CloudStorageAccount.Parse(_connection);
            var tableClient = storageAccount.CreateCloudTableClient();
            return tableClient.GetTableReference("Configuration");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\ProjectsController.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Api.Controllers.Config.ProjectsController._mediator
private readonly IMediator _mediator;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Validators\ValidatorFactory.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Validators.ValidatorFactory.Build
public List<IValidator> Build(Question question)
        {
            var validators = new Dictionary<string, IValidator>();

            if (question?.Input != null)
            {
                var hasInputValidatorsSpecified = question.Input.Validations != null && question.Input.Validations.Count > 0;

                if (hasInputValidatorsSpecified)
                {
                    // Always load the input validators
                    // Note that if same validator is specified more than once, the latest one takes precedence
                    foreach (var inputValidation in question.Input.Validations.Where(v => v.Name != "ClientApiCall"))
                    {
                        var validatorName = $"{inputValidation.Name}Validator";
                        var validator = _serviceProvider.GetServices<IValidator>().FirstOrDefault(v => v.GetType().Name == validatorName);

                        if (validator != null)
                        {
                            validator.ValidationDefinition = inputValidation;
                            validators[validatorName] = validator;
                        }
                    }
                }

                var typeValidatorName = $"{question.Input.Type}TypeValidator";
                var typeValidator = _serviceProvider.GetServices<IValidator>().FirstOrDefault(v => v.GetType().Name == typeValidatorName);

                // If the type validator is found and doesn't have an overriding input validator, then add it
                if (typeValidator != null && !validators.ContainsKey($"{question.Input.Type}Validator"))
                {
                    validators[typeValidatorName] = typeValidator;
                }

                // If there are no validators for the question then add a default one (which happens to be NullValidator)
                if (validators.Count == 0)
                {
                    validators["NullValidator"] = new NullValidator();
                }
            }

            return validators.Values.ToList();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase._fileStorageContainerName
private string _fileStorageContainerName = Guid.NewGuid().ToString();
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\ProjectsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.ProjectsController.ProjectsController
public ProjectsController(IMediator mediator)
        {
            _mediator = mediator;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSections\GetWorkflowSection\GetWorkflowSectionHandler.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.Queries.WorkflowSections.GetWorkflowSection.GetWorkflowSectionHandler._dataContext
private readonly QnaDataContext _dataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase.ApplicationId
protected Guid ApplicationId;
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\ProjectsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.ProjectsController.GetProjects
[HttpGet]
        public async Task<ActionResult<List<Project>>> GetProjects()
        {
            var getProjectsResult = await _mediator.Send(new GetProjectsRequest());
            if (!getProjectsResult.Success) return NotFound(new NotFoundError(getProjectsResult.Message));

            return getProjectsResult.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSections\GetWorkflowSection\GetWorkflowSectionHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSections.GetWorkflowSection.GetWorkflowSectionHandler.GetWorkflowSectionHandler
public GetWorkflowSectionHandler(QnaDataContext dataContext)
        {
            _dataContext = dataContext;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase.SequenceId
protected Guid SequenceId;
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\WorkflowSections\GetWorkflowSection\GetWorkflowSectionHandler.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.WorkflowSections.GetWorkflowSection.GetWorkflowSectionHandler.Handle
public async Task<HandlerResponse<WorkflowSection>> Handle(GetWorkflowSectionRequest request, CancellationToken cancellationToken)
        {
            var section = await _dataContext.WorkflowSections.AsNoTracking().SingleOrDefaultAsync(sec => sec.Id == request.SectionId && sec.ProjectId == request.ProjectId, cancellationToken);
            return section is null
                ? new HandlerResponse<WorkflowSection>(success: false, message: "Project or WorkflowSection does not exist")
                : new HandlerResponse<WorkflowSection>(section);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase.SectionId
protected Guid SectionId;
--------------------------------------------------
src\SFA.DAS.QnA.Data\Entities\ApplicationSequence.cs
BlockTypes.METHOD, SFA.DAS.QnA.Data.Entities.ApplicationSequence.IsActive
public bool IsActive { get; set; }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Controllers\Config\ProjectsController.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Controllers.Config.ProjectsController.GetProject
[HttpGet("{projectId}")]
        public async Task<ActionResult<Project>> GetProject(Guid projectId)
        {
            var getProjectResult = await _mediator.Send(new GetProjectRequest(projectId));
            if (!getProjectResult.Success) return NotFound(new NotFoundError(getProjectResult.Message));

            return getProjectResult.Value;
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase.PageId
protected string PageId;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase.QuestionId
protected string QuestionId;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase.Filename
protected string Filename;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SubmitPageOfFilesHandlerTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SubmitPageOfFilesHandlerTests.When_a_branching_condition_is_question_tag.Then_the_condition_does_not_pass_if_answer_is_blank_when_must_equal_a_value_and_contains_is_set
[Test]
#if (!DEBUG)
        [Ignore("Must be tested on local DEV machine as it uses local Azure storage")]
#endif
        public async Task Then_the_condition_does_not_pass_if_answer_is_blank_when_must_equal_a_value_and_contains_is_set()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId, "", "", "No");

            var response = await Handler.Handle(new SubmitPageOfFilesRequest(applicationId, sectionId, "100", new FormFileCollection
            {
                GenerateFile("This is a dummy file", "Q1", "Yes")
            }), CancellationToken.None);

            response.Value.NextActionId.Should().Be("102");
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase.Handler
protected CreateSnapshotHandler Handler;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase.DataContext
protected QnaDataContext DataContext;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.VARIABLE, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase.Container
protected CloudBlobContainer Container;
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase.SetUp
[SetUp]
        public async Task SetUp()
        {
            DataContext = DataContextHelpers.GetInMemoryDataContext();
            var fileStorageConfig = GetFileStorageConfig();
            var logger = Substitute.For<ILogger<CreateSnapshotHandler>>();

            Handler = new CreateSnapshotHandler(DataContext, fileStorageConfig, logger);

            ApplicationId = Guid.NewGuid();
            SequenceId = Guid.NewGuid();
            SectionId = Guid.NewGuid();
            PageId = "1";
            QuestionId = "Q1";
            Filename = "file.txt";

            Container = await GetContainer(fileStorageConfig);

            await DataContext.Applications.AddAsync(new Data.Entities.Application() { Id = ApplicationId, ApplicationData = "{}" });

            await DataContext.ApplicationSequences.AddAsync(new ApplicationSequence()
            {
                ApplicationId = ApplicationId,
                Id = SequenceId
            });

            await DataContext.ApplicationSections.AddAsync(new ApplicationSection()
            {
                ApplicationId = ApplicationId,
                Id = SectionId,
                SequenceId = SequenceId,
                QnAData = new QnAData()
                {
                    Pages = new List<Page>
                    {
                        new Page()
                        {
                            SectionId = SectionId,
                            SequenceId = SequenceId,
                            PageId = PageId,
                            Questions = new List<Question>{new Question(){QuestionId = QuestionId, Input = new Input { Type = "FileUpload" } }},
                            PageOfAnswers = new List<PageOfAnswers>(){ new PageOfAnswers { Id = Guid.NewGuid(), Answers = new List<Answer> { new Answer { QuestionId = QuestionId, Value = Filename } } } },
                            Next = new List<Next>(),
                            Active = true
                        }
                    }
                }
            });

            await DataContext.SaveChangesAsync();

            await AddFile(ApplicationId, SequenceId, SectionId, PageId, QuestionId, Filename, Container);
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\SetPageAnswersTests\When_a_branching_condition_is_question_tag.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.SetPageAnswersTests.When_a_branching_condition_is_question_tag.Then_all_pages_are_set_to_active_if_the_condition_passes_and_answer_matches
[Test]
        public async Task Then_all_pages_are_set_to_active_if_the_condition_passes_and_answer_matches()
        {
            var applicationId = Guid.NewGuid();
            var sectionId = Guid.NewGuid();
            await SetupQuestionData(applicationId, sectionId, "Yes", "Yes");

            await Handler.Handle(new SetPageAnswersRequest(applicationId, sectionId, "100", new List<Answer>
            {
                new Answer() {QuestionId = "Q1", Value = "Yes"}
            }), CancellationToken.None);

            var section = GetSection(applicationId, sectionId);
            section.QnAData.Pages.TrueForAll(p => p.Active).Should().BeTrue();
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application.UnitTests\CommandsTests\CreateSnapshotTests\CreateSnapshotTestBase.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.UnitTests.CommandsTests.CreateSnapshotTests.CreateSnapshotTestBase.TearDown
[TearDown]
        public void TearDown()
        {
            if (Container != null)
            {
                Container.DeleteIfExists();
            }
        }
--------------------------------------------------
src\SFA.DAS.QnA.Api\Startup.cs
BlockTypes.METHOD, SFA.DAS.QnA.Api.Startup.Configure
public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseHsts();
                app.UseAuthentication();
            }

            app.UseExceptionHandler("/errors/500");
            app.UseStatusCodePagesWithReExecute("/errors/{0}");

            app.UseSwagger();
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "QnA API");
                c.SwaggerEndpoint("/swagger/config/swagger.json", "QnA API Config");
            });

            app.UseHealthChecks("/health");
            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "api/{controller}/{action}/{id?}");
            });
        }
--------------------------------------------------
src\SFA.DAS.QnA.Application\Queries\ApplicationData\GetApplicationData\GetApplicationDataRequest.cs
BlockTypes.METHOD, SFA.DAS.QnA.Application.Queries.ApplicationData.GetApplicationData.GetApplicationDataRequest.GetApplicationDataRequest
public GetApplicationDataRequest(Guid applicationId)
        {
            ApplicationId = applicationId;
        }
--------------------------------------------------
